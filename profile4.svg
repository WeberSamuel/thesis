<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="490" onload="init(evt)" viewBox="0 0 1200 490" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="490" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">C:\Users\samue\miniconda3\envs\thesis\Scripts\py-spy.exe record -o profile4.svg --pid 19432</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="479.00"> </text><svg id="frames" x="10" width="1180" total_samples="1801"><g><title>copy (rich\table.py:116) (7 samples, 0.39%)</title><rect x="0.3887%" y="244" width="0.3887%" height="15" fill="rgb(227,0,7)" fg:x="7" fg:w="7"/><text x="0.6387%" y="254.50"></text></g><g><title>replace (dataclasses.py:1446) (2 samples, 0.11%)</title><rect x="0.6663%" y="260" width="0.1110%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="2"/><text x="0.9163%" y="270.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1556) (13 samples, 0.72%)</title><rect x="0.1666%" y="228" width="0.7218%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="13"/><text x="0.4166%" y="238.50"></text></g><g><title>get_file_type (pydevd.py:1022) (2 samples, 0.11%)</title><rect x="0.7773%" y="244" width="0.1110%" height="15" fill="rgb(248,212,6)" fg:x="14" fg:w="2"/><text x="1.0273%" y="254.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1559) (2 samples, 0.11%)</title><rect x="0.9439%" y="228" width="0.1110%" height="15" fill="rgb(208,68,35)" fg:x="17" fg:w="2"/><text x="1.1939%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1560) (6 samples, 0.33%)</title><rect x="1.0550%" y="228" width="0.3331%" height="15" fill="rgb(232,128,0)" fg:x="19" fg:w="6"/><text x="1.3050%" y="238.50"></text></g><g><title>get_table_column (rich\progress.py:503) (6 samples, 0.33%)</title><rect x="1.0550%" y="244" width="0.3331%" height="15" fill="rgb(207,160,47)" fg:x="19" fg:w="6"/><text x="1.3050%" y="254.50"></text></g><g><title>make_tasks_table (rich\progress.py:1564) (26 samples, 1.44%)</title><rect x="0.1110%" y="212" width="1.4436%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="26"/><text x="0.3610%" y="222.50"></text></g><g><title>grid (rich\table.py:272) (2 samples, 0.11%)</title><rect x="1.4436%" y="228" width="0.1110%" height="15" fill="rgb(218,30,26)" fg:x="26" fg:w="2"/><text x="1.6936%" y="238.50"></text></g><g><title>make_tasks_table (rich\progress.py:1568) (2 samples, 0.11%)</title><rect x="1.5547%" y="212" width="0.1110%" height="15" fill="rgb(220,122,19)" fg:x="28" fg:w="2"/><text x="1.8047%" y="222.50"></text></g><g><title>refresh (rich\live.py:221) (31 samples, 1.72%)</title><rect x="0.0000%" y="132" width="1.7213%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="31"/><text x="0.2500%" y="142.50"></text></g><g><title>renderable (rich\live.py:203) (30 samples, 1.67%)</title><rect x="0.0555%" y="148" width="1.6657%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="30"/><text x="0.3055%" y="158.50"></text></g><g><title>get_renderable (rich\live.py:98) (30 samples, 1.67%)</title><rect x="0.0555%" y="164" width="1.6657%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="30"/><text x="0.3055%" y="174.50"></text></g><g><title>get_renderable (rich\progress.py:1539) (30 samples, 1.67%)</title><rect x="0.0555%" y="180" width="1.6657%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="30"/><text x="0.3055%" y="190.50"></text></g><g><title>get_renderables (rich\progress.py:1544) (30 samples, 1.67%)</title><rect x="0.0555%" y="196" width="1.6657%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="30"/><text x="0.3055%" y="206.50"></text></g><g><title>write (wandb\sdk\lib\redirect.py:640) (2 samples, 0.11%)</title><rect x="1.7768%" y="196" width="0.1110%" height="15" fill="rgb(231,73,38)" fg:x="32" fg:w="2"/><text x="2.0268%" y="206.50"></text></g><g><title>refresh (rich\live.py:239) (9 samples, 0.50%)</title><rect x="1.7213%" y="132" width="0.4997%" height="15" fill="rgb(225,20,46)" fg:x="31" fg:w="9"/><text x="1.9713%" y="142.50"></text></g><g><title>__exit__ (rich\console.py:848) (9 samples, 0.50%)</title><rect x="1.7213%" y="148" width="0.4997%" height="15" fill="rgb(210,31,41)" fg:x="31" fg:w="9"/><text x="1.9713%" y="158.50"></text></g><g><title>_exit_buffer (rich\console.py:806) (9 samples, 0.50%)</title><rect x="1.7213%" y="164" width="0.4997%" height="15" fill="rgb(221,200,47)" fg:x="31" fg:w="9"/><text x="1.9713%" y="174.50"></text></g><g><title>_check_buffer (rich\console.py:2009) (8 samples, 0.44%)</title><rect x="1.7768%" y="180" width="0.4442%" height="15" fill="rgb(226,26,5)" fg:x="32" fg:w="8"/><text x="2.0268%" y="190.50"></text></g><g><title>write (wandb\sdk\lib\redirect.py:643) (6 samples, 0.33%)</title><rect x="1.8878%" y="196" width="0.3331%" height="15" fill="rgb(249,33,26)" fg:x="34" fg:w="6"/><text x="2.1378%" y="206.50"></text></g><g><title>&lt;lambda&gt; (wandb\sdk\wandb_run.py:2079) (6 samples, 0.33%)</title><rect x="1.8878%" y="212" width="0.3331%" height="15" fill="rgb(235,183,28)" fg:x="34" fg:w="6"/><text x="2.1378%" y="222.50"></text></g><g><title>wrapper_fn (wandb\sdk\wandb_run.py:342) (6 samples, 0.33%)</title><rect x="1.8878%" y="228" width="0.3331%" height="15" fill="rgb(221,5,38)" fg:x="34" fg:w="6"/><text x="2.1378%" y="238.50"></text></g><g><title>_console_raw_callback (wandb\sdk\wandb_run.py:1425) (5 samples, 0.28%)</title><rect x="1.9434%" y="244" width="0.2776%" height="15" fill="rgb(247,18,42)" fg:x="35" fg:w="5"/><text x="2.1934%" y="254.50"></text></g><g><title>publish_output_raw (wandb\sdk\interface\interface.py:658) (4 samples, 0.22%)</title><rect x="1.9989%" y="260" width="0.2221%" height="15" fill="rgb(241,131,45)" fg:x="36" fg:w="4"/><text x="2.2489%" y="270.50"></text></g><g><title>_publish_output_raw (wandb\sdk\interface\interface_shared.py:79) (3 samples, 0.17%)</title><rect x="2.0544%" y="276" width="0.1666%" height="15" fill="rgb(249,31,29)" fg:x="37" fg:w="3"/><text x="2.3044%" y="286.50"></text></g><g><title>_publish (wandb\sdk\interface\interface_sock.py:51) (3 samples, 0.17%)</title><rect x="2.0544%" y="292" width="0.1666%" height="15" fill="rgb(225,111,53)" fg:x="37" fg:w="3"/><text x="2.3044%" y="302.50"></text></g><g><title>send_record_publish (wandb\sdk\lib\sock_client.py:221) (3 samples, 0.17%)</title><rect x="2.0544%" y="308" width="0.1666%" height="15" fill="rgb(238,160,17)" fg:x="37" fg:w="3"/><text x="2.3044%" y="318.50"></text></g><g><title>send_server_request (wandb\sdk\lib\sock_client.py:155) (3 samples, 0.17%)</title><rect x="2.0544%" y="324" width="0.1666%" height="15" fill="rgb(214,148,48)" fg:x="37" fg:w="3"/><text x="2.3044%" y="334.50"></text></g><g><title>_send_message (wandb\sdk\lib\sock_client.py:152) (2 samples, 0.11%)</title><rect x="2.1099%" y="340" width="0.1110%" height="15" fill="rgb(232,36,49)" fg:x="38" fg:w="2"/><text x="2.3599%" y="350.50"></text></g><g><title>_sendall_with_error_handle (wandb\sdk\lib\sock_client.py:130) (2 samples, 0.11%)</title><rect x="2.1099%" y="356" width="0.1110%" height="15" fill="rgb(209,103,24)" fg:x="38" fg:w="2"/><text x="2.3599%" y="366.50"></text></g><g><title>_get_cells (rich\table.py:675) (2 samples, 0.11%)</title><rect x="3.2760%" y="324" width="0.1110%" height="15" fill="rgb(229,88,8)" fg:x="59" fg:w="2"/><text x="3.5260%" y="334.50"></text></g><g><title>_measure_column (rich\table.py:722) (5 samples, 0.28%)</title><rect x="3.1649%" y="308" width="0.2776%" height="15" fill="rgb(213,181,19)" fg:x="57" fg:w="5"/><text x="3.4149%" y="318.50"></text></g><g><title>get (rich\measure.py:109) (3 samples, 0.17%)</title><rect x="3.5536%" y="356" width="0.1666%" height="15" fill="rgb(254,191,54)" fg:x="64" fg:w="3"/><text x="3.8036%" y="366.50"></text></g><g><title>__rich_measure__ (rich\text.py:649) (3 samples, 0.17%)</title><rect x="3.5536%" y="372" width="0.1666%" height="15" fill="rgb(241,83,37)" fg:x="64" fg:w="3"/><text x="3.8036%" y="382.50"></text></g><g><title>&lt;genexpr&gt; (rich\text.py:649) (3 samples, 0.17%)</title><rect x="3.5536%" y="388" width="0.1666%" height="15" fill="rgb(233,36,39)" fg:x="64" fg:w="3"/><text x="3.8036%" y="398.50"></text></g><g><title>normalize (rich\measure.py:30) (2 samples, 0.11%)</title><rect x="3.7202%" y="372" width="0.1110%" height="15" fill="rgb(226,3,54)" fg:x="67" fg:w="2"/><text x="3.9702%" y="382.50"></text></g><g><title>get (rich\measure.py:115) (3 samples, 0.17%)</title><rect x="3.7202%" y="356" width="0.1666%" height="15" fill="rgb(245,192,40)" fg:x="67" fg:w="3"/><text x="3.9702%" y="366.50"></text></g><g><title>get (rich\measure.py:109) (8 samples, 0.44%)</title><rect x="3.5536%" y="324" width="0.4442%" height="15" fill="rgb(238,167,29)" fg:x="64" fg:w="8"/><text x="3.8036%" y="334.50"></text></g><g><title>__rich_measure__ (rich\padding.py:132) (8 samples, 0.44%)</title><rect x="3.5536%" y="340" width="0.4442%" height="15" fill="rgb(232,182,51)" fg:x="64" fg:w="8"/><text x="3.8036%" y="350.50"></text></g><g><title>get (rich\measure.py:99) (2 samples, 0.11%)</title><rect x="3.8867%" y="356" width="0.1110%" height="15" fill="rgb(231,60,39)" fg:x="70" fg:w="2"/><text x="4.1367%" y="366.50"></text></g><g><title>render_str (rich\console.py:1403) (2 samples, 0.11%)</title><rect x="3.8867%" y="372" width="0.1110%" height="15" fill="rgb(208,69,12)" fg:x="70" fg:w="2"/><text x="4.1367%" y="382.50"></text></g><g><title>render (rich\markup.py:147) (2 samples, 0.11%)</title><rect x="3.8867%" y="388" width="0.1110%" height="15" fill="rgb(235,93,37)" fg:x="70" fg:w="2"/><text x="4.1367%" y="398.50"></text></g><g><title>_measure_column (rich\table.py:723) (12 samples, 0.67%)</title><rect x="3.4425%" y="308" width="0.6663%" height="15" fill="rgb(213,116,39)" fg:x="62" fg:w="12"/><text x="3.6925%" y="318.50"></text></g><g><title>_calculate_column_widths (rich\table.py:519) (19 samples, 1.05%)</title><rect x="3.1094%" y="276" width="1.0550%" height="15" fill="rgb(222,207,29)" fg:x="56" fg:w="19"/><text x="3.3594%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (rich\table.py:520) (19 samples, 1.05%)</title><rect x="3.1094%" y="292" width="1.0550%" height="15" fill="rgb(206,96,30)" fg:x="56" fg:w="19"/><text x="3.3594%" y="302.50"></text></g><g><title>_get_cells (rich\table.py:679) (2 samples, 0.11%)</title><rect x="4.4975%" y="324" width="0.1110%" height="15" fill="rgb(218,138,4)" fg:x="81" fg:w="2"/><text x="4.7475%" y="334.50"></text></g><g><title>__init__ (rich\padding.py:42) (2 samples, 0.11%)</title><rect x="4.4975%" y="340" width="0.1110%" height="15" fill="rgb(250,191,14)" fg:x="81" fg:w="2"/><text x="4.7475%" y="350.50"></text></g><g><title>_measure_column (rich\table.py:722) (8 samples, 0.44%)</title><rect x="4.2199%" y="308" width="0.4442%" height="15" fill="rgb(239,60,40)" fg:x="76" fg:w="8"/><text x="4.4699%" y="318.50"></text></g><g><title>get (rich\measure.py:109) (2 samples, 0.11%)</title><rect x="4.7751%" y="356" width="0.1110%" height="15" fill="rgb(206,27,48)" fg:x="86" fg:w="2"/><text x="5.0251%" y="366.50"></text></g><g><title>__rich_measure__ (rich\padding.py:132) (5 samples, 0.28%)</title><rect x="4.7751%" y="340" width="0.2776%" height="15" fill="rgb(225,35,8)" fg:x="86" fg:w="5"/><text x="5.0251%" y="350.50"></text></g><g><title>get (rich\measure.py:99) (2 samples, 0.11%)</title><rect x="4.9417%" y="356" width="0.1110%" height="15" fill="rgb(250,213,24)" fg:x="89" fg:w="2"/><text x="5.1917%" y="366.50"></text></g><g><title>render_str (rich\console.py:1403) (2 samples, 0.11%)</title><rect x="4.9417%" y="372" width="0.1110%" height="15" fill="rgb(247,123,22)" fg:x="89" fg:w="2"/><text x="5.1917%" y="382.50"></text></g><g><title>_measure_column (rich\table.py:723) (9 samples, 0.50%)</title><rect x="4.6641%" y="308" width="0.4997%" height="15" fill="rgb(231,138,38)" fg:x="84" fg:w="9"/><text x="4.9141%" y="318.50"></text></g><g><title>get (rich\measure.py:109) (7 samples, 0.39%)</title><rect x="4.7751%" y="324" width="0.3887%" height="15" fill="rgb(231,145,46)" fg:x="86" fg:w="7"/><text x="5.0251%" y="334.50"></text></g><g><title>__rich_console__ (rich\table.py:478) (39 samples, 2.17%)</title><rect x="3.1094%" y="260" width="2.1655%" height="15" fill="rgb(251,118,11)" fg:x="56" fg:w="39"/><text x="3.3594%" y="270.50">_..</text></g><g><title>_calculate_column_widths (rich\table.py:558) (20 samples, 1.11%)</title><rect x="4.1644%" y="276" width="1.1105%" height="15" fill="rgb(217,147,25)" fg:x="75" fg:w="20"/><text x="4.4144%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (rich\table.py:559) (20 samples, 1.11%)</title><rect x="4.1644%" y="292" width="1.1105%" height="15" fill="rgb(247,81,37)" fg:x="75" fg:w="20"/><text x="4.4144%" y="302.50"></text></g><g><title>_get_cells (rich\table.py:664) (2 samples, 0.11%)</title><rect x="5.4969%" y="292" width="0.1110%" height="15" fill="rgb(209,12,38)" fg:x="99" fg:w="2"/><text x="5.7469%" y="302.50"></text></g><g><title>get_style (rich\console.py:1448) (2 samples, 0.11%)</title><rect x="5.4969%" y="308" width="0.1110%" height="15" fill="rgb(227,1,9)" fg:x="99" fg:w="2"/><text x="5.7469%" y="318.50"></text></g><g><title>__init__ (rich\padding.py:42) (2 samples, 0.11%)</title><rect x="5.7746%" y="308" width="0.1110%" height="15" fill="rgb(248,47,43)" fg:x="104" fg:w="2"/><text x="6.0246%" y="318.50"></text></g><g><title>_render (rich\table.py:747) (12 samples, 0.67%)</title><rect x="5.2748%" y="276" width="0.6663%" height="15" fill="rgb(221,10,30)" fg:x="95" fg:w="12"/><text x="5.5248%" y="286.50"></text></g><g><title>_get_cells (rich\table.py:679) (3 samples, 0.17%)</title><rect x="5.7746%" y="292" width="0.1666%" height="15" fill="rgb(210,229,1)" fg:x="104" fg:w="3"/><text x="6.0246%" y="302.50"></text></g><g><title>_render (rich\table.py:818) (3 samples, 0.17%)</title><rect x="5.9411%" y="276" width="0.1666%" height="15" fill="rgb(222,148,37)" fg:x="107" fg:w="3"/><text x="6.1911%" y="286.50"></text></g><g><title>render (rich\console.py:1287) (2 samples, 0.11%)</title><rect x="6.3853%" y="388" width="0.1110%" height="15" fill="rgb(234,67,33)" fg:x="115" fg:w="2"/><text x="6.6353%" y="398.50"></text></g><g><title>render_str (rich\console.py:1403) (2 samples, 0.11%)</title><rect x="6.3853%" y="404" width="0.1110%" height="15" fill="rgb(247,98,35)" fg:x="115" fg:w="2"/><text x="6.6353%" y="414.50"></text></g><g><title>wrap (rich\text.py:1156) (3 samples, 0.17%)</title><rect x="6.7185%" y="420" width="0.1666%" height="15" fill="rgb(247,138,52)" fg:x="121" fg:w="3"/><text x="6.9685%" y="430.50"></text></g><g><title>wrap (rich\text.py:1162) (2 samples, 0.11%)</title><rect x="6.9406%" y="420" width="0.1110%" height="15" fill="rgb(213,79,30)" fg:x="125" fg:w="2"/><text x="7.1906%" y="430.50"></text></g><g><title>__rich_console__ (rich\text.py:633) (11 samples, 0.61%)</title><rect x="6.6074%" y="404" width="0.6108%" height="15" fill="rgb(246,177,23)" fg:x="119" fg:w="11"/><text x="6.8574%" y="414.50"></text></g><g><title>join (rich\text.py:742) (2 samples, 0.11%)</title><rect x="7.3293%" y="420" width="0.1110%" height="15" fill="rgb(230,62,27)" fg:x="132" fg:w="2"/><text x="7.5793%" y="430.50"></text></g><g><title>__rich_console__ (rich\text.py:641) (6 samples, 0.33%)</title><rect x="7.2182%" y="404" width="0.3331%" height="15" fill="rgb(216,154,8)" fg:x="130" fg:w="6"/><text x="7.4682%" y="414.50"></text></g><g><title>join (rich\text.py:746) (2 samples, 0.11%)</title><rect x="7.4403%" y="420" width="0.1110%" height="15" fill="rgb(244,35,45)" fg:x="134" fg:w="2"/><text x="7.6903%" y="430.50"></text></g><g><title>&lt;genexpr&gt; (rich\text.py:746) (2 samples, 0.11%)</title><rect x="7.4403%" y="436" width="0.1110%" height="15" fill="rgb(251,115,12)" fg:x="134" fg:w="2"/><text x="7.6903%" y="446.50"></text></g><g><title>render (rich\console.py:1305) (26 samples, 1.44%)</title><rect x="6.4964%" y="388" width="1.4436%" height="15" fill="rgb(240,54,50)" fg:x="117" fg:w="26"/><text x="6.7464%" y="398.50"></text></g><g><title>__rich_console__ (rich\text.py:642) (7 samples, 0.39%)</title><rect x="7.5514%" y="404" width="0.3887%" height="15" fill="rgb(233,84,52)" fg:x="136" fg:w="7"/><text x="7.8014%" y="414.50"></text></g><g><title>render (rich\text.py:711) (2 samples, 0.11%)</title><rect x="7.8290%" y="420" width="0.1110%" height="15" fill="rgb(207,117,47)" fg:x="141" fg:w="2"/><text x="8.0790%" y="430.50"></text></g><g><title>get_current_style (rich\text.py:701) (2 samples, 0.11%)</title><rect x="7.8290%" y="436" width="0.1110%" height="15" fill="rgb(249,43,39)" fg:x="141" fg:w="2"/><text x="8.0790%" y="446.50"></text></g><g><title>combine (rich\style.py:609) (2 samples, 0.11%)</title><rect x="7.8290%" y="452" width="0.1110%" height="15" fill="rgb(209,38,44)" fg:x="141" fg:w="2"/><text x="8.0790%" y="462.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:292) (29 samples, 1.61%)</title><rect x="6.3853%" y="372" width="1.6102%" height="15" fill="rgb(236,212,23)" fg:x="115" fg:w="29"/><text x="6.6353%" y="382.50"></text></g><g><title>render (rich\console.py:1305) (34 samples, 1.89%)</title><rect x="6.2188%" y="324" width="1.8878%" height="15" fill="rgb(242,79,21)" fg:x="112" fg:w="34"/><text x="6.4688%" y="334.50">r..</text></g><g><title>__rich_console__ (rich\padding.py:97) (32 samples, 1.78%)</title><rect x="6.3298%" y="340" width="1.7768%" height="15" fill="rgb(211,96,35)" fg:x="114" fg:w="32"/><text x="6.5798%" y="350.50">_..</text></g><g><title>render_lines (rich\console.py:1345) (32 samples, 1.78%)</title><rect x="6.3298%" y="356" width="1.7768%" height="15" fill="rgb(253,215,40)" fg:x="114" fg:w="32"/><text x="6.5798%" y="366.50">r..</text></g><g><title>split_and_crop_lines (rich\segment.py:300) (2 samples, 0.11%)</title><rect x="7.9956%" y="372" width="0.1110%" height="15" fill="rgb(211,81,21)" fg:x="144" fg:w="2"/><text x="8.2456%" y="382.50"></text></g><g><title>adjust_line_length (rich\segment.py:331) (2 samples, 0.11%)</title><rect x="7.9956%" y="388" width="0.1110%" height="15" fill="rgb(208,190,38)" fg:x="144" fg:w="2"/><text x="8.2456%" y="398.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:292) (37 samples, 2.05%)</title><rect x="6.1632%" y="308" width="2.0544%" height="15" fill="rgb(235,213,38)" fg:x="111" fg:w="37"/><text x="6.4132%" y="318.50">s..</text></g><g><title>_render (rich\table.py:823) (41 samples, 2.28%)</title><rect x="6.1077%" y="276" width="2.2765%" height="15" fill="rgb(237,122,38)" fg:x="110" fg:w="41"/><text x="6.3577%" y="286.50">_..</text></g><g><title>render_lines (rich\console.py:1345) (40 samples, 2.22%)</title><rect x="6.1632%" y="292" width="2.2210%" height="15" fill="rgb(244,218,35)" fg:x="111" fg:w="40"/><text x="6.4132%" y="302.50">r..</text></g><g><title>split_and_crop_lines (rich\segment.py:300) (3 samples, 0.17%)</title><rect x="8.2177%" y="308" width="0.1666%" height="15" fill="rgb(240,68,47)" fg:x="148" fg:w="3"/><text x="8.4677%" y="318.50"></text></g><g><title>adjust_line_length (rich\segment.py:331) (3 samples, 0.17%)</title><rect x="8.2177%" y="324" width="0.1666%" height="15" fill="rgb(210,16,53)" fg:x="148" fg:w="3"/><text x="8.4677%" y="334.50"></text></g><g><title>&lt;genexpr&gt; (rich\segment.py:331) (3 samples, 0.17%)</title><rect x="8.2177%" y="340" width="0.1666%" height="15" fill="rgb(235,124,12)" fg:x="148" fg:w="3"/><text x="8.4677%" y="350.50"></text></g><g><title>_render (rich\table.py:845) (2 samples, 0.11%)</title><rect x="8.3842%" y="276" width="0.1110%" height="15" fill="rgb(224,169,11)" fg:x="151" fg:w="2"/><text x="8.6342%" y="286.50"></text></g><g><title>__rich_console__ (rich\table.py:505) (60 samples, 3.33%)</title><rect x="5.2748%" y="260" width="3.3315%" height="15" fill="rgb(250,166,2)" fg:x="95" fg:w="60"/><text x="5.5248%" y="270.50">__r..</text></g><g><title>_render (rich\table.py:888) (2 samples, 0.11%)</title><rect x="8.4953%" y="276" width="0.1110%" height="15" fill="rgb(242,216,29)" fg:x="153" fg:w="2"/><text x="8.7453%" y="286.50"></text></g><g><title>render (rich\console.py:1305) (101 samples, 5.61%)</title><rect x="3.0539%" y="244" width="5.6080%" height="15" fill="rgb(230,116,27)" fg:x="55" fg:w="101"/><text x="3.3039%" y="254.50">render ..</text></g><g><title>split_and_crop_lines (rich\segment.py:292) (111 samples, 6.16%)</title><rect x="2.6652%" y="212" width="6.1632%" height="15" fill="rgb(228,99,48)" fg:x="48" fg:w="111"/><text x="2.9152%" y="222.50">split_an..</text></g><g><title>render (rich\console.py:1309) (110 samples, 6.11%)</title><rect x="2.7207%" y="228" width="6.1077%" height="15" fill="rgb(253,11,6)" fg:x="49" fg:w="110"/><text x="2.9707%" y="238.50">render (..</text></g><g><title>render (rich\console.py:1307) (3 samples, 0.17%)</title><rect x="8.6619%" y="244" width="0.1666%" height="15" fill="rgb(247,143,39)" fg:x="156" fg:w="3"/><text x="8.9119%" y="254.50"></text></g><g><title>__rich_console__ (rich\live_render.py:88) (113 samples, 6.27%)</title><rect x="2.6097%" y="180" width="6.2743%" height="15" fill="rgb(236,97,10)" fg:x="47" fg:w="113"/><text x="2.8597%" y="190.50">__rich_c..</text></g><g><title>render_lines (rich\console.py:1345) (113 samples, 6.27%)</title><rect x="2.6097%" y="196" width="6.2743%" height="15" fill="rgb(233,208,19)" fg:x="47" fg:w="113"/><text x="2.8597%" y="206.50">render_l..</text></g><g><title>print (rich\console.py:1673) (118 samples, 6.55%)</title><rect x="2.3876%" y="148" width="6.5519%" height="15" fill="rgb(216,164,2)" fg:x="43" fg:w="118"/><text x="2.6376%" y="158.50">print (ri..</text></g><g><title>render (rich\console.py:1305) (117 samples, 6.50%)</title><rect x="2.4431%" y="164" width="6.4964%" height="15" fill="rgb(220,129,5)" fg:x="44" fg:w="117"/><text x="2.6931%" y="174.50">render (r..</text></g><g><title>run (rich\live.py:32) (166 samples, 9.22%)</title><rect x="0.0000%" y="116" width="9.2171%" height="15" fill="rgb(242,17,10)" fg:x="0" fg:w="166"/><text x="0.2500%" y="126.50">run (rich\liv..</text></g><g><title>refresh (rich\live.py:240) (126 samples, 7.00%)</title><rect x="2.2210%" y="132" width="6.9961%" height="15" fill="rgb(242,107,0)" fg:x="40" fg:w="126"/><text x="2.4710%" y="142.50">refresh (..</text></g><g><title>print (rich\console.py:1689) (5 samples, 0.28%)</title><rect x="8.9395%" y="148" width="0.2776%" height="15" fill="rgb(251,28,31)" fg:x="161" fg:w="5"/><text x="9.1895%" y="158.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:310) (5 samples, 0.28%)</title><rect x="8.9395%" y="164" width="0.2776%" height="15" fill="rgb(233,223,10)" fg:x="161" fg:w="5"/><text x="9.1895%" y="174.50"></text></g><g><title>adjust_line_length (rich\segment.py:331) (5 samples, 0.28%)</title><rect x="8.9395%" y="180" width="0.2776%" height="15" fill="rgb(215,21,27)" fg:x="161" fg:w="5"/><text x="9.1895%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (rich\segment.py:331) (5 samples, 0.28%)</title><rect x="8.9395%" y="196" width="0.2776%" height="15" fill="rgb(232,23,21)" fg:x="161" fg:w="5"/><text x="9.1895%" y="206.50"></text></g><g><title>__call__ (_pydev_bundle\pydev_monkey.py:1118) (167 samples, 9.27%)</title><rect x="0.0000%" y="68" width="9.2726%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="167"/><text x="0.2500%" y="78.50">__call__ (_py..</text></g><g><title>_bootstrap (threading.py:973) (167 samples, 9.27%)</title><rect x="0.0000%" y="84" width="9.2726%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="167"/><text x="0.2500%" y="94.50">_bootstrap (t..</text></g><g><title>_bootstrap_inner (threading.py:1016) (167 samples, 9.27%)</title><rect x="0.0000%" y="100" width="9.2726%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="167"/><text x="0.2500%" y="110.50">_bootstrap_in..</text></g><g><title>_bootstrap (threading.py:973) (2 samples, 0.11%)</title><rect x="9.2726%" y="68" width="0.1110%" height="15" fill="rgb(212,68,19)" fg:x="167" fg:w="2"/><text x="9.5226%" y="78.50"></text></g><g><title>_bootstrap_inner (threading.py:1016) (2 samples, 0.11%)</title><rect x="9.2726%" y="84" width="0.1110%" height="15" fill="rgb(240,187,13)" fg:x="167" fg:w="2"/><text x="9.5226%" y="94.50"></text></g><g><title>run (_pydevd_bundle\pydevd_daemon_thread.py:49) (2 samples, 0.11%)</title><rect x="9.2726%" y="100" width="0.1110%" height="15" fill="rgb(223,113,26)" fg:x="167" fg:w="2"/><text x="9.5226%" y="110.50"></text></g><g><title>_on_run (pydevd.py:211) (2 samples, 0.11%)</title><rect x="9.2726%" y="116" width="0.1110%" height="15" fill="rgb(206,192,2)" fg:x="167" fg:w="2"/><text x="9.5226%" y="126.50"></text></g><g><title>all (1,801 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="1801"/><text x="0.2500%" y="62.50"></text></g><g><title>_run_module_as_main (runpy.py:196) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="68" width="90.6163%" height="15" fill="rgb(247,173,49)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="78.50">_run_module_as_main (runpy.py:196)</text></g><g><title>_run_code (runpy.py:86) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="84" width="90.6163%" height="15" fill="rgb(224,114,35)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="94.50">_run_code (runpy.py:86)</text></g><g><title>&lt;module&gt; (debugpy\__main__.py:39) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="100" width="90.6163%" height="15" fill="rgb(245,159,27)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="110.50">&lt;module&gt; (debugpy\__main__.py:39)</text></g><g><title>main (debugpy\server\cli.py:430) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="116" width="90.6163%" height="15" fill="rgb(245,172,44)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="126.50">main (debugpy\server\cli.py:430)</text></g><g><title>run_file (debugpy\server\cli.py:284) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="132" width="90.6163%" height="15" fill="rgb(236,23,11)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="142.50">run_file (debugpy\server\cli.py:284)</text></g><g><title>run_path (_pydevd_bundle\pydevd_runpy.py:321) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="148" width="90.6163%" height="15" fill="rgb(205,117,38)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="158.50">run_path (_pydevd_bundle\pydevd_runpy.py:321)</text></g><g><title>_run_module_code (_pydevd_bundle\pydevd_runpy.py:135) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="164" width="90.6163%" height="15" fill="rgb(237,72,25)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="174.50">_run_module_code (_pydevd_bundle\pydevd_runpy.py:135)</text></g><g><title>_run_code (_pydevd_bundle\pydevd_runpy.py:124) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="180" width="90.6163%" height="15" fill="rgb(244,70,9)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="190.50">_run_code (_pydevd_bundle\pydevd_runpy.py:124)</text></g><g><title>&lt;module&gt; (cli.py:195) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="196" width="90.6163%" height="15" fill="rgb(217,125,39)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="206.50">&lt;module&gt; (cli.py:195)</text></g><g><title>learn (stable_baselines3\common\off_policy_algorithm.py:331) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="212" width="90.6163%" height="15" fill="rgb(235,36,10)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="222.50">learn (stable_baselines3\common\off_policy_algorithm.py:331)</text></g><g><title>train (cemrl.py:104) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="228" width="90.6163%" height="15" fill="rgb(251,123,47)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="238.50">train (cemrl.py:104)</text></g><g><title>reconstruction_training_step (cemrl.py:150) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="244" width="90.6163%" height="15" fill="rgb(221,13,13)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="254.50">reconstruction_training_step (cemrl.py:150)</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="260" width="90.6163%" height="15" fill="rgb(238,131,9)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="270.50">_call_impl (torch\nn\modules\module.py:1501)</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="276" width="90.6163%" height="15" fill="rgb(211,50,8)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="286.50">decorate_autocast (torch\amp\autocast_mode.py:14)</text></g><g><title>forward (networks.py:49) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="292" width="90.6163%" height="15" fill="rgb(245,182,24)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="302.50">forward (networks.py:49)</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="308" width="90.6163%" height="15" fill="rgb(242,14,37)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="318.50">_call_impl (torch\nn\modules\module.py:1501)</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="324" width="90.6163%" height="15" fill="rgb(246,228,12)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="334.50">decorate_autocast (torch\amp\autocast_mode.py:14)</text></g><g><title>forward (networks.py:91) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="340" width="90.6163%" height="15" fill="rgb(213,55,15)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="350.50">forward (networks.py:91)</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="356" width="90.6163%" height="15" fill="rgb(209,9,3)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="366.50">_call_impl (torch\nn\modules\module.py:1501)</text></g><g><title>forward (torch\nn\modules\container.py:217) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="372" width="90.6163%" height="15" fill="rgb(230,59,30)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="382.50">forward (torch\nn\modules\container.py:217)</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="388" width="90.6163%" height="15" fill="rgb(209,121,21)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="398.50">_call_impl (torch\nn\modules\module.py:1501)</text></g><g><title>forward (torch\nn\modules\linear.py:114) (1,632 samples, 90.62%)</title><rect x="9.3837%" y="404" width="90.6163%" height="15" fill="rgb(220,109,13)" fg:x="169" fg:w="1632"/><text x="9.6337%" y="414.50">forward (torch\nn\modules\linear.py:114)</text></g></svg></svg>