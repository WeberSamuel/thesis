<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="666" onload="init(evt)" viewBox="0 0 1200 666" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="666" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">C:\Users\samue\miniconda3\envs\thesis\Scripts\py-spy.exe record -o cheetah.svg --pid 9616</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="655.00"> </text><svg id="frames" x="10" width="1180" total_samples="483930"><g><title>replace (dataclasses.py:1423) (776 samples, 0.16%)</title><rect x="0.7164%" y="260" width="0.1604%" height="15" fill="rgb(227,0,7)" fg:x="3467" fg:w="776"/><text x="0.9664%" y="270.50"></text></g><g><title>replace (dataclasses.py:1446) (1,266 samples, 0.26%)</title><rect x="1.2843%" y="260" width="0.2616%" height="15" fill="rgb(217,0,24)" fg:x="6215" fg:w="1266"/><text x="1.5343%" y="270.50"></text></g><g><title>copy (rich\table.py:116) (5,747 samples, 1.19%)</title><rect x="0.6274%" y="244" width="1.1876%" height="15" fill="rgb(221,193,54)" fg:x="3036" fg:w="5747"/><text x="0.8774%" y="254.50"></text></g><g><title>replace (dataclasses.py:1453) (1,302 samples, 0.27%)</title><rect x="1.5459%" y="260" width="0.2690%" height="15" fill="rgb(248,212,6)" fg:x="7481" fg:w="1302"/><text x="1.7959%" y="270.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1556) (7,721 samples, 1.60%)</title><rect x="0.2961%" y="228" width="1.5955%" height="15" fill="rgb(208,68,35)" fg:x="1433" fg:w="7721"/><text x="0.5461%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1558) (1,430 samples, 0.30%)</title><rect x="1.8916%" y="228" width="0.2955%" height="15" fill="rgb(232,128,0)" fg:x="9154" fg:w="1430"/><text x="2.1416%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1560) (1,624 samples, 0.34%)</title><rect x="2.2371%" y="228" width="0.3356%" height="15" fill="rgb(207,160,47)" fg:x="10826" fg:w="1624"/><text x="2.4871%" y="238.50"></text></g><g><title>get_table_column (rich\progress.py:503) (1,387 samples, 0.29%)</title><rect x="2.2861%" y="244" width="0.2866%" height="15" fill="rgb(228,23,34)" fg:x="11063" fg:w="1387"/><text x="2.5361%" y="254.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1562) (624 samples, 0.13%)</title><rect x="2.5727%" y="228" width="0.1289%" height="15" fill="rgb(218,30,26)" fg:x="12450" fg:w="624"/><text x="2.8227%" y="238.50"></text></g><g><title>grid (rich\table.py:272) (539 samples, 0.11%)</title><rect x="2.7016%" y="228" width="0.1114%" height="15" fill="rgb(220,122,19)" fg:x="13074" fg:w="539"/><text x="2.9516%" y="238.50"></text></g><g><title>make_tasks_table (rich\progress.py:1564) (12,438 samples, 2.57%)</title><rect x="0.2443%" y="212" width="2.5702%" height="15" fill="rgb(250,228,42)" fg:x="1182" fg:w="12438"/><text x="0.4943%" y="222.50">ma..</text></g><g><title>__call__ (rich\progress.py:524) (737 samples, 0.15%)</title><rect x="2.8785%" y="244" width="0.1523%" height="15" fill="rgb(240,193,28)" fg:x="13930" fg:w="737"/><text x="3.1285%" y="254.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1569) (1,100 samples, 0.23%)</title><rect x="2.8182%" y="228" width="0.2273%" height="15" fill="rgb(216,20,37)" fg:x="13638" fg:w="1100"/><text x="3.0682%" y="238.50"></text></g><g><title>make_tasks_table (rich\progress.py:1568) (1,486 samples, 0.31%)</title><rect x="2.8159%" y="212" width="0.3071%" height="15" fill="rgb(206,188,39)" fg:x="13627" fg:w="1486"/><text x="3.0659%" y="222.50"></text></g><g><title>get_renderables (rich\progress.py:1544) (15,060 samples, 3.11%)</title><rect x="0.0651%" y="196" width="3.1120%" height="15" fill="rgb(217,207,13)" fg:x="315" fg:w="15060"/><text x="0.3151%" y="206.50">get..</text></g><g><title>get_renderable (rich\live.py:98) (15,152 samples, 3.13%)</title><rect x="0.0492%" y="164" width="3.1310%" height="15" fill="rgb(231,73,38)" fg:x="238" fg:w="15152"/><text x="0.2992%" y="174.50">get..</text></g><g><title>get_renderable (rich\progress.py:1539) (15,137 samples, 3.13%)</title><rect x="0.0523%" y="180" width="3.1279%" height="15" fill="rgb(225,20,46)" fg:x="253" fg:w="15137"/><text x="0.3023%" y="190.50">get..</text></g><g><title>renderable (rich\live.py:203) (15,202 samples, 3.14%)</title><rect x="0.0457%" y="148" width="3.1414%" height="15" fill="rgb(210,31,41)" fg:x="221" fg:w="15202"/><text x="0.2957%" y="158.50">ren..</text></g><g><title>refresh (rich\live.py:221) (15,249 samples, 3.15%)</title><rect x="0.0382%" y="132" width="3.1511%" height="15" fill="rgb(221,200,47)" fg:x="185" fg:w="15249"/><text x="0.2882%" y="142.50">ref..</text></g><g><title>write (wandb\sdk\lib\redirect.py:640) (615 samples, 0.13%)</title><rect x="3.2664%" y="196" width="0.1271%" height="15" fill="rgb(226,26,5)" fg:x="15807" fg:w="615"/><text x="3.5164%" y="206.50"></text></g><g><title>_sendall_with_error_handle (wandb\sdk\lib\sock_client.py:130) (818 samples, 0.17%)</title><rect x="3.6088%" y="356" width="0.1690%" height="15" fill="rgb(249,33,26)" fg:x="17464" fg:w="818"/><text x="3.8588%" y="366.50"></text></g><g><title>_send_message (wandb\sdk\lib\sock_client.py:152) (882 samples, 0.18%)</title><rect x="3.5976%" y="340" width="0.1823%" height="15" fill="rgb(235,183,28)" fg:x="17410" fg:w="882"/><text x="3.8476%" y="350.50"></text></g><g><title>_check_buffer (rich\console.py:2009) (2,499 samples, 0.52%)</title><rect x="3.2637%" y="180" width="0.5164%" height="15" fill="rgb(221,5,38)" fg:x="15794" fg:w="2499"/><text x="3.5137%" y="190.50"></text></g><g><title>write (wandb\sdk\lib\redirect.py:643) (1,863 samples, 0.38%)</title><rect x="3.3951%" y="196" width="0.3850%" height="15" fill="rgb(247,18,42)" fg:x="16430" fg:w="1863"/><text x="3.6451%" y="206.50"></text></g><g><title>&lt;lambda&gt; (wandb\sdk\wandb_run.py:2079) (1,858 samples, 0.38%)</title><rect x="3.3962%" y="212" width="0.3839%" height="15" fill="rgb(241,131,45)" fg:x="16435" fg:w="1858"/><text x="3.6462%" y="222.50"></text></g><g><title>wrapper_fn (wandb\sdk\wandb_run.py:342) (1,838 samples, 0.38%)</title><rect x="3.4003%" y="228" width="0.3798%" height="15" fill="rgb(249,31,29)" fg:x="16455" fg:w="1838"/><text x="3.6503%" y="238.50"></text></g><g><title>_console_raw_callback (wandb\sdk\wandb_run.py:1425) (1,814 samples, 0.37%)</title><rect x="3.4052%" y="244" width="0.3748%" height="15" fill="rgb(225,111,53)" fg:x="16479" fg:w="1814"/><text x="3.6552%" y="254.50"></text></g><g><title>publish_output_raw (wandb\sdk\interface\interface.py:658) (1,353 samples, 0.28%)</title><rect x="3.5005%" y="260" width="0.2796%" height="15" fill="rgb(238,160,17)" fg:x="16940" fg:w="1353"/><text x="3.7505%" y="270.50"></text></g><g><title>_publish_output_raw (wandb\sdk\interface\interface_shared.py:79) (1,230 samples, 0.25%)</title><rect x="3.5259%" y="276" width="0.2542%" height="15" fill="rgb(214,148,48)" fg:x="17063" fg:w="1230"/><text x="3.7759%" y="286.50"></text></g><g><title>_publish (wandb\sdk\interface\interface_sock.py:51) (1,174 samples, 0.24%)</title><rect x="3.5375%" y="292" width="0.2426%" height="15" fill="rgb(232,36,49)" fg:x="17119" fg:w="1174"/><text x="3.7875%" y="302.50"></text></g><g><title>send_record_publish (wandb\sdk\lib\sock_client.py:221) (1,051 samples, 0.22%)</title><rect x="3.5629%" y="308" width="0.2172%" height="15" fill="rgb(209,103,24)" fg:x="17242" fg:w="1051"/><text x="3.8129%" y="318.50"></text></g><g><title>send_server_request (wandb\sdk\lib\sock_client.py:155) (1,046 samples, 0.22%)</title><rect x="3.5639%" y="324" width="0.2161%" height="15" fill="rgb(229,88,8)" fg:x="17247" fg:w="1046"/><text x="3.8139%" y="334.50"></text></g><g><title>_exit_buffer (rich\console.py:806) (2,818 samples, 0.58%)</title><rect x="3.2052%" y="164" width="0.5823%" height="15" fill="rgb(213,181,19)" fg:x="15511" fg:w="2818"/><text x="3.4552%" y="174.50"></text></g><g><title>refresh (rich\live.py:239) (2,852 samples, 0.59%)</title><rect x="3.1984%" y="132" width="0.5893%" height="15" fill="rgb(254,191,54)" fg:x="15478" fg:w="2852"/><text x="3.4484%" y="142.50"></text></g><g><title>__exit__ (rich\console.py:848) (2,832 samples, 0.59%)</title><rect x="3.2025%" y="148" width="0.5852%" height="15" fill="rgb(241,83,37)" fg:x="15498" fg:w="2832"/><text x="3.4525%" y="158.50"></text></g><g><title>_measure_column (rich\table.py:722) (2,403 samples, 0.50%)</title><rect x="4.4515%" y="308" width="0.4966%" height="15" fill="rgb(233,36,39)" fg:x="21542" fg:w="2403"/><text x="4.7015%" y="318.50"></text></g><g><title>__rich_measure__ (rich\text.py:649) (520 samples, 0.11%)</title><rect x="5.1390%" y="372" width="0.1075%" height="15" fill="rgb(226,3,54)" fg:x="24869" fg:w="520"/><text x="5.3890%" y="382.50"></text></g><g><title>get (rich\measure.py:109) (1,176 samples, 0.24%)</title><rect x="5.1061%" y="356" width="0.2430%" height="15" fill="rgb(245,192,40)" fg:x="24710" fg:w="1176"/><text x="5.3561%" y="366.50"></text></g><g><title>render_str (rich\console.py:1403) (711 samples, 0.15%)</title><rect x="5.4500%" y="372" width="0.1469%" height="15" fill="rgb(238,167,29)" fg:x="26374" fg:w="711"/><text x="5.7000%" y="382.50"></text></g><g><title>__rich_measure__ (rich\padding.py:132) (2,712 samples, 0.56%)</title><rect x="5.0394%" y="340" width="0.5604%" height="15" fill="rgb(232,182,51)" fg:x="24387" fg:w="2712"/><text x="5.2894%" y="350.50"></text></g><g><title>get (rich\measure.py:99) (777 samples, 0.16%)</title><rect x="5.4392%" y="356" width="0.1606%" height="15" fill="rgb(231,60,39)" fg:x="26322" fg:w="777"/><text x="5.6892%" y="366.50"></text></g><g><title>get (rich\measure.py:109) (2,979 samples, 0.62%)</title><rect x="5.0232%" y="324" width="0.6156%" height="15" fill="rgb(208,69,12)" fg:x="24309" fg:w="2979"/><text x="5.2732%" y="334.50"></text></g><g><title>_measure_column (rich\table.py:723) (3,786 samples, 0.78%)</title><rect x="4.9480%" y="308" width="0.7823%" height="15" fill="rgb(235,93,37)" fg:x="23945" fg:w="3786"/><text x="5.1980%" y="318.50"></text></g><g><title>_calculate_column_widths (rich\table.py:519) (6,774 samples, 1.40%)</title><rect x="4.3897%" y="276" width="1.3998%" height="15" fill="rgb(213,116,39)" fg:x="21243" fg:w="6774"/><text x="4.6397%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (rich\table.py:520) (6,752 samples, 1.40%)</title><rect x="4.3942%" y="292" width="1.3952%" height="15" fill="rgb(222,207,29)" fg:x="21265" fg:w="6752"/><text x="4.6442%" y="302.50"></text></g><g><title>_measure_column (rich\table.py:722) (2,160 samples, 0.45%)</title><rect x="5.9033%" y="308" width="0.4463%" height="15" fill="rgb(206,96,30)" fg:x="28568" fg:w="2160"/><text x="6.1533%" y="318.50"></text></g><g><title>get (rich\measure.py:109) (1,046 samples, 0.22%)</title><rect x="6.4846%" y="356" width="0.2161%" height="15" fill="rgb(218,138,4)" fg:x="31381" fg:w="1046"/><text x="6.7346%" y="366.50"></text></g><g><title>render_str (rich\console.py:1403) (621 samples, 0.13%)</title><rect x="6.7973%" y="372" width="0.1283%" height="15" fill="rgb(250,191,14)" fg:x="32894" fg:w="621"/><text x="7.0473%" y="382.50"></text></g><g><title>__rich_measure__ (rich\padding.py:132) (2,421 samples, 0.50%)</title><rect x="6.4307%" y="340" width="0.5003%" height="15" fill="rgb(239,60,40)" fg:x="31120" fg:w="2421"/><text x="6.6807%" y="350.50"></text></g><g><title>get (rich\measure.py:99) (680 samples, 0.14%)</title><rect x="6.7904%" y="356" width="0.1405%" height="15" fill="rgb(206,27,48)" fg:x="32861" fg:w="680"/><text x="7.0404%" y="366.50"></text></g><g><title>get (rich\measure.py:109) (2,665 samples, 0.55%)</title><rect x="6.4142%" y="324" width="0.5507%" height="15" fill="rgb(225,35,8)" fg:x="31040" fg:w="2665"/><text x="6.6642%" y="334.50"></text></g><g><title>_measure_column (rich\table.py:723) (3,420 samples, 0.71%)</title><rect x="6.3497%" y="308" width="0.7067%" height="15" fill="rgb(250,213,24)" fg:x="30728" fg:w="3420"/><text x="6.5997%" y="318.50"></text></g><g><title>&lt;listcomp&gt; (rich\table.py:559) (6,242 samples, 1.29%)</title><rect x="5.8542%" y="292" width="1.2899%" height="15" fill="rgb(247,123,22)" fg:x="28330" fg:w="6242"/><text x="6.1042%" y="302.50"></text></g><g><title>_calculate_column_widths (rich\table.py:558) (6,263 samples, 1.29%)</title><rect x="5.8502%" y="276" width="1.2942%" height="15" fill="rgb(231,138,38)" fg:x="28311" fg:w="6263"/><text x="6.1002%" y="286.50"></text></g><g><title>__rich_console__ (rich\table.py:478) (13,393 samples, 2.77%)</title><rect x="4.3831%" y="260" width="2.7675%" height="15" fill="rgb(231,145,46)" fg:x="21211" fg:w="13393"/><text x="4.6331%" y="270.50">__..</text></g><g><title>_get_cells (rich\table.py:665) (588 samples, 0.12%)</title><rect x="7.4972%" y="292" width="0.1215%" height="15" fill="rgb(251,118,11)" fg:x="36281" fg:w="588"/><text x="7.7472%" y="302.50"></text></g><g><title>cells (rich\table.py:121) (554 samples, 0.11%)</title><rect x="7.5042%" y="308" width="0.1145%" height="15" fill="rgb(217,147,25)" fg:x="36315" fg:w="554"/><text x="7.7542%" y="318.50"></text></g><g><title>_get_cells (rich\table.py:676) (676 samples, 0.14%)</title><rect x="7.7026%" y="292" width="0.1397%" height="15" fill="rgb(247,81,37)" fg:x="37275" fg:w="676"/><text x="7.9526%" y="302.50"></text></g><g><title>_render (rich\table.py:747) (3,467 samples, 0.72%)</title><rect x="7.2725%" y="276" width="0.7164%" height="15" fill="rgb(209,12,38)" fg:x="35194" fg:w="3467"/><text x="7.5225%" y="286.50"></text></g><g><title>render_str (rich\console.py:1403) (598 samples, 0.12%)</title><rect x="8.9670%" y="404" width="0.1236%" height="15" fill="rgb(227,1,9)" fg:x="43394" fg:w="598"/><text x="9.2170%" y="414.50"></text></g><g><title>render (rich\console.py:1287) (671 samples, 0.14%)</title><rect x="8.9544%" y="388" width="0.1387%" height="15" fill="rgb(248,47,43)" fg:x="43333" fg:w="671"/><text x="9.2044%" y="398.50"></text></g><g><title>wrap (rich\text.py:1156) (606 samples, 0.13%)</title><rect x="9.3001%" y="420" width="0.1252%" height="15" fill="rgb(221,10,30)" fg:x="45006" fg:w="606"/><text x="9.5501%" y="430.50"></text></g><g><title>wrap (rich\text.py:1167) (514 samples, 0.11%)</title><rect x="9.6324%" y="420" width="0.1062%" height="15" fill="rgb(210,229,1)" fg:x="46614" fg:w="514"/><text x="9.8824%" y="430.50"></text></g><g><title>__rich_console__ (rich\text.py:633) (2,759 samples, 0.57%)</title><rect x="9.2443%" y="404" width="0.5701%" height="15" fill="rgb(222,148,37)" fg:x="44736" fg:w="2759"/><text x="9.4943%" y="414.50"></text></g><g><title>join (rich\text.py:742) (867 samples, 0.18%)</title><rect x="9.9330%" y="420" width="0.1792%" height="15" fill="rgb(234,67,33)" fg:x="48069" fg:w="867"/><text x="10.1830%" y="430.50"></text></g><g><title>__rich_console__ (rich\text.py:641) (1,830 samples, 0.38%)</title><rect x="9.8190%" y="404" width="0.3782%" height="15" fill="rgb(247,98,35)" fg:x="47517" fg:w="1830"/><text x="10.0690%" y="414.50"></text></g><g><title>render (rich\text.py:711) (697 samples, 0.14%)</title><rect x="10.5867%" y="420" width="0.1440%" height="15" fill="rgb(247,138,52)" fg:x="51232" fg:w="697"/><text x="10.8367%" y="430.50"></text></g><g><title>render (rich\console.py:1305) (7,941 samples, 1.64%)</title><rect x="9.1240%" y="388" width="1.6409%" height="15" fill="rgb(213,79,30)" fg:x="44154" fg:w="7941"/><text x="9.3740%" y="398.50"></text></g><g><title>__rich_console__ (rich\text.py:642) (2,748 samples, 0.57%)</title><rect x="10.1971%" y="404" width="0.5679%" height="15" fill="rgb(246,177,23)" fg:x="49347" fg:w="2748"/><text x="10.4471%" y="414.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:292) (9,549 samples, 1.97%)</title><rect x="8.8515%" y="372" width="1.9732%" height="15" fill="rgb(230,62,27)" fg:x="42835" fg:w="9549"/><text x="9.1015%" y="382.50">s..</text></g><g><title>adjust_line_length (rich\segment.py:331) (525 samples, 0.11%)</title><rect x="10.8514%" y="388" width="0.1085%" height="15" fill="rgb(216,154,8)" fg:x="52513" fg:w="525"/><text x="11.1014%" y="398.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:300) (565 samples, 0.12%)</title><rect x="10.8472%" y="372" width="0.1168%" height="15" fill="rgb(244,35,45)" fg:x="52493" fg:w="565"/><text x="11.0972%" y="382.50"></text></g><g><title>render_lines (rich\console.py:1345) (10,876 samples, 2.25%)</title><rect x="8.7887%" y="356" width="2.2474%" height="15" fill="rgb(251,115,12)" fg:x="42531" fg:w="10876"/><text x="9.0387%" y="366.50">r..</text></g><g><title>__rich_console__ (rich\padding.py:97) (11,101 samples, 2.29%)</title><rect x="8.7535%" y="340" width="2.2939%" height="15" fill="rgb(240,54,50)" fg:x="42361" fg:w="11101"/><text x="9.0035%" y="350.50">_..</text></g><g><title>render (rich\console.py:1305) (12,733 samples, 2.63%)</title><rect x="8.4184%" y="324" width="2.6312%" height="15" fill="rgb(233,84,52)" fg:x="40739" fg:w="12733"/><text x="8.6684%" y="334.50">re..</text></g><g><title>split_and_crop_lines (rich\segment.py:292) (13,980 samples, 2.89%)</title><rect x="8.2595%" y="308" width="2.8888%" height="15" fill="rgb(207,117,47)" fg:x="39970" fg:w="13980"/><text x="8.5095%" y="318.50">sp..</text></g><g><title>&lt;genexpr&gt; (rich\segment.py:331) (799 samples, 0.17%)</title><rect x="11.1859%" y="340" width="0.1651%" height="15" fill="rgb(249,43,39)" fg:x="54132" fg:w="799"/><text x="11.4359%" y="350.50"></text></g><g><title>adjust_line_length (rich\segment.py:331) (891 samples, 0.18%)</title><rect x="11.1684%" y="324" width="0.1841%" height="15" fill="rgb(209,38,44)" fg:x="54047" fg:w="891"/><text x="11.4184%" y="334.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:300) (937 samples, 0.19%)</title><rect x="11.1665%" y="308" width="0.1936%" height="15" fill="rgb(236,212,23)" fg:x="54038" fg:w="937"/><text x="11.4165%" y="318.50"></text></g><g><title>render_lines (rich\console.py:1345) (15,589 samples, 3.22%)</title><rect x="8.1873%" y="292" width="3.2213%" height="15" fill="rgb(242,79,21)" fg:x="39621" fg:w="15589"/><text x="8.4373%" y="302.50">ren..</text></g><g><title>_render (rich\table.py:823) (15,858 samples, 3.28%)</title><rect x="8.1460%" y="276" width="3.2769%" height="15" fill="rgb(211,96,35)" fg:x="39421" fg:w="15858"/><text x="8.3960%" y="286.50">_re..</text></g><g><title>&lt;genexpr&gt; (rich\segment.py:331) (666 samples, 0.14%)</title><rect x="11.5225%" y="356" width="0.1376%" height="15" fill="rgb(253,215,40)" fg:x="55761" fg:w="666"/><text x="11.7725%" y="366.50"></text></g><g><title>adjust_line_length (rich\segment.py:331) (722 samples, 0.15%)</title><rect x="11.5116%" y="340" width="0.1492%" height="15" fill="rgb(211,81,21)" fg:x="55708" fg:w="722"/><text x="11.7616%" y="350.50"></text></g><g><title>set_shape (rich\segment.py:413) (814 samples, 0.17%)</title><rect x="11.4977%" y="308" width="0.1682%" height="15" fill="rgb(208,190,38)" fg:x="55641" fg:w="814"/><text x="11.7477%" y="318.50"></text></g><g><title>&lt;listcomp&gt; (rich\segment.py:414) (766 samples, 0.16%)</title><rect x="11.5077%" y="324" width="0.1583%" height="15" fill="rgb(235,213,38)" fg:x="55689" fg:w="766"/><text x="11.7577%" y="334.50"></text></g><g><title>&lt;listcomp&gt; (rich\table.py:846) (935 samples, 0.19%)</title><rect x="11.4750%" y="292" width="0.1932%" height="15" fill="rgb(237,122,38)" fg:x="55531" fg:w="935"/><text x="11.7250%" y="302.50"></text></g><g><title>_render (rich\table.py:845) (1,267 samples, 0.26%)</title><rect x="11.4698%" y="276" width="0.2618%" height="15" fill="rgb(244,218,35)" fg:x="55506" fg:w="1267"/><text x="11.7198%" y="286.50"></text></g><g><title>_render (rich\table.py:888) (657 samples, 0.14%)</title><rect x="11.7362%" y="276" width="0.1358%" height="15" fill="rgb(240,68,47)" fg:x="56795" fg:w="657"/><text x="11.9862%" y="286.50"></text></g><g><title>__rich_console__ (rich\table.py:505) (22,969 samples, 4.75%)</title><rect x="7.1574%" y="260" width="4.7463%" height="15" fill="rgb(210,16,53)" fg:x="34637" fg:w="22969"/><text x="7.4074%" y="270.50">__rich..</text></g><g><title>render (rich\console.py:1305) (36,578 samples, 7.56%)</title><rect x="4.3469%" y="244" width="7.5585%" height="15" fill="rgb(235,124,12)" fg:x="21036" fg:w="36578"/><text x="4.5969%" y="254.50">render (ri..</text></g><g><title>split_and_crop_lines (rich\segment.py:292) (37,734 samples, 7.80%)</title><rect x="4.1851%" y="212" width="7.7974%" height="15" fill="rgb(224,169,11)" fg:x="20253" fg:w="37734"/><text x="4.4351%" y="222.50">split_and_c..</text></g><g><title>render (rich\console.py:1309) (37,518 samples, 7.75%)</title><rect x="4.2297%" y="228" width="7.7528%" height="15" fill="rgb(250,166,2)" fg:x="20469" fg:w="37518"/><text x="4.4797%" y="238.50">render (ric..</text></g><g><title>adjust_line_length (rich\segment.py:331) (814 samples, 0.17%)</title><rect x="11.9906%" y="228" width="0.1682%" height="15" fill="rgb(242,216,29)" fg:x="58026" fg:w="814"/><text x="12.2406%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (rich\segment.py:331) (791 samples, 0.16%)</title><rect x="11.9953%" y="244" width="0.1635%" height="15" fill="rgb(230,116,27)" fg:x="58049" fg:w="791"/><text x="12.2453%" y="254.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:300) (820 samples, 0.17%)</title><rect x="11.9904%" y="212" width="0.1694%" height="15" fill="rgb(228,99,48)" fg:x="58025" fg:w="820"/><text x="12.2404%" y="222.50"></text></g><g><title>render_lines (rich\console.py:1345) (38,713 samples, 8.00%)</title><rect x="4.1719%" y="196" width="7.9997%" height="15" fill="rgb(253,11,6)" fg:x="20189" fg:w="38713"/><text x="4.4219%" y="206.50">render_line..</text></g><g><title>__rich_console__ (rich\live_render.py:88) (38,779 samples, 8.01%)</title><rect x="4.1616%" y="180" width="8.0133%" height="15" fill="rgb(247,143,39)" fg:x="20139" fg:w="38779"/><text x="4.4116%" y="190.50">__rich_cons..</text></g><g><title>get_line_length (rich\segment.py:368) (497 samples, 0.10%)</title><rect x="12.1879%" y="228" width="0.1027%" height="15" fill="rgb(236,97,10)" fg:x="58981" fg:w="497"/><text x="12.4379%" y="238.50"></text></g><g><title>get_shape (rich\segment.py:381) (549 samples, 0.11%)</title><rect x="12.1776%" y="196" width="0.1134%" height="15" fill="rgb(233,208,19)" fg:x="58931" fg:w="549"/><text x="12.4276%" y="206.50"></text></g><g><title>&lt;genexpr&gt; (rich\segment.py:381) (543 samples, 0.11%)</title><rect x="12.1788%" y="212" width="0.1122%" height="15" fill="rgb(216,164,2)" fg:x="58937" fg:w="543"/><text x="12.4288%" y="222.50"></text></g><g><title>__rich_console__ (rich\live_render.py:89) (564 samples, 0.12%)</title><rect x="12.1749%" y="180" width="0.1165%" height="15" fill="rgb(220,129,5)" fg:x="58918" fg:w="564"/><text x="12.4249%" y="190.50"></text></g><g><title>render (rich\console.py:1305) (40,012 samples, 8.27%)</title><rect x="4.0237%" y="164" width="8.2681%" height="15" fill="rgb(242,17,10)" fg:x="19472" fg:w="40012"/><text x="4.2737%" y="174.50">render (rich..</text></g><g><title>print (rich\console.py:1673) (40,657 samples, 8.40%)</title><rect x="3.9367%" y="148" width="8.4014%" height="15" fill="rgb(242,107,0)" fg:x="19051" fg:w="40657"/><text x="4.1867%" y="158.50">print (rich\..</text></g><g><title>adjust_line_length (rich\segment.py:331) (538 samples, 0.11%)</title><rect x="12.3609%" y="180" width="0.1112%" height="15" fill="rgb(251,28,31)" fg:x="59818" fg:w="538"/><text x="12.6109%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (rich\segment.py:331) (521 samples, 0.11%)</title><rect x="12.3644%" y="196" width="0.1077%" height="15" fill="rgb(233,223,10)" fg:x="59835" fg:w="521"/><text x="12.6144%" y="206.50"></text></g><g><title>print (rich\console.py:1689) (642 samples, 0.13%)</title><rect x="12.3410%" y="148" width="0.1327%" height="15" fill="rgb(215,21,27)" fg:x="59722" fg:w="642"/><text x="12.5910%" y="158.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:310) (558 samples, 0.12%)</title><rect x="12.3584%" y="164" width="0.1153%" height="15" fill="rgb(232,23,21)" fg:x="59806" fg:w="558"/><text x="12.6084%" y="174.50"></text></g><g><title>refresh (rich\live.py:240) (42,309 samples, 8.74%)</title><rect x="3.7877%" y="132" width="8.7428%" height="15" fill="rgb(244,5,23)" fg:x="18330" fg:w="42309"/><text x="4.0377%" y="142.50">refresh (ric..</text></g><g><title>run (rich\live.py:32) (60,511 samples, 12.50%)</title><rect x="0.0269%" y="116" width="12.5041%" height="15" fill="rgb(226,81,46)" fg:x="130" fg:w="60511"/><text x="0.2769%" y="126.50">run (rich\live.py:3..</text></g><g><title>run (threading.py:953) (519 samples, 0.11%)</title><rect x="12.5402%" y="116" width="0.1072%" height="15" fill="rgb(247,70,30)" fg:x="60686" fg:w="519"/><text x="12.7902%" y="126.50"></text></g><g><title>__call__ (_pydev_bundle\pydev_monkey.py:1118) (61,310 samples, 12.67%)</title><rect x="0.0000%" y="68" width="12.6692%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="61310"/><text x="0.2500%" y="78.50">__call__ (_pydev_bu..</text></g><g><title>_bootstrap (threading.py:973) (61,310 samples, 12.67%)</title><rect x="0.0000%" y="84" width="12.6692%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="61310"/><text x="0.2500%" y="94.50">_bootstrap (threadi..</text></g><g><title>_bootstrap_inner (threading.py:1016) (61,310 samples, 12.67%)</title><rect x="0.0000%" y="100" width="12.6692%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="61310"/><text x="0.2500%" y="110.50">_bootstrap_inner (t..</text></g><g><title>_on_run (pydevd.py:211) (823 samples, 0.17%)</title><rect x="12.6901%" y="116" width="0.1701%" height="15" fill="rgb(206,192,2)" fg:x="61411" fg:w="823"/><text x="12.9401%" y="126.50"></text></g><g><title>_bootstrap (threading.py:973) (1,246 samples, 0.26%)</title><rect x="12.6692%" y="68" width="0.2575%" height="15" fill="rgb(241,108,4)" fg:x="61310" fg:w="1246"/><text x="12.9192%" y="78.50"></text></g><g><title>_bootstrap_inner (threading.py:1016) (1,246 samples, 0.26%)</title><rect x="12.6692%" y="84" width="0.2575%" height="15" fill="rgb(247,173,49)" fg:x="61310" fg:w="1246"/><text x="12.9192%" y="94.50"></text></g><g><title>run (_pydevd_bundle\pydevd_daemon_thread.py:49) (1,246 samples, 0.26%)</title><rect x="12.6692%" y="100" width="0.2575%" height="15" fill="rgb(224,114,35)" fg:x="61310" fg:w="1246"/><text x="12.9192%" y="110.50"></text></g><g><title>encode (networks.py:39) (1,501 samples, 0.31%)</title><rect x="13.0500%" y="484" width="0.3102%" height="15" fill="rgb(245,159,27)" fg:x="63153" fg:w="1501"/><text x="13.3000%" y="494.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,500 samples, 0.31%)</title><rect x="13.0502%" y="500" width="0.3100%" height="15" fill="rgb(245,172,44)" fg:x="63154" fg:w="1500"/><text x="13.3002%" y="510.50"></text></g><g><title>forward (torch\nn\modules\rnn.py:998) (1,487 samples, 0.31%)</title><rect x="13.0529%" y="516" width="0.3073%" height="15" fill="rgb(236,23,11)" fg:x="63167" fg:w="1487"/><text x="13.3029%" y="526.50"></text></g><g><title>forward (networks.py:30) (1,739 samples, 0.36%)</title><rect x="13.0455%" y="452" width="0.3593%" height="15" fill="rgb(205,117,38)" fg:x="63131" fg:w="1739"/><text x="13.2955%" y="462.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,734 samples, 0.36%)</title><rect x="13.0465%" y="468" width="0.3583%" height="15" fill="rgb(237,72,25)" fg:x="63136" fg:w="1734"/><text x="13.2965%" y="478.50"></text></g><g><title>_predict (policies.py:105) (1,788 samples, 0.37%)</title><rect x="13.0442%" y="404" width="0.3695%" height="15" fill="rgb(244,70,9)" fg:x="63125" fg:w="1788"/><text x="13.2942%" y="414.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,785 samples, 0.37%)</title><rect x="13.0449%" y="420" width="0.3689%" height="15" fill="rgb(217,125,39)" fg:x="63128" fg:w="1785"/><text x="13.2949%" y="430.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,782 samples, 0.37%)</title><rect x="13.0455%" y="436" width="0.3682%" height="15" fill="rgb(235,36,10)" fg:x="63131" fg:w="1782"/><text x="13.2955%" y="446.50"></text></g><g><title>sample (gymnasium\spaces\box.py:218) (576 samples, 0.12%)</title><rect x="13.4976%" y="468" width="0.1190%" height="15" fill="rgb(251,123,47)" fg:x="65319" fg:w="576"/><text x="13.7476%" y="478.50"></text></g><g><title>&lt;listcomp&gt; (policies.py:64) (1,045 samples, 0.22%)</title><rect x="13.4152%" y="452" width="0.2159%" height="15" fill="rgb(221,13,13)" fg:x="64920" fg:w="1045"/><text x="13.6652%" y="462.50"></text></g><g><title>_predict (policies.py:64) (1,060 samples, 0.22%)</title><rect x="13.4148%" y="436" width="0.2190%" height="15" fill="rgb(238,131,9)" fg:x="64918" fg:w="1060"/><text x="13.6648%" y="446.50"></text></g><g><title>forward (networks.py:91) (615 samples, 0.13%)</title><rect x="13.6435%" y="532" width="0.1271%" height="15" fill="rgb(211,50,8)" fg:x="66025" fg:w="615"/><text x="13.8935%" y="542.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (535 samples, 0.11%)</title><rect x="13.6600%" y="548" width="0.1106%" height="15" fill="rgb(245,182,24)" fg:x="66105" fg:w="535"/><text x="13.9100%" y="558.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (530 samples, 0.11%)</title><rect x="13.6611%" y="564" width="0.1095%" height="15" fill="rgb(242,14,37)" fg:x="66110" fg:w="530"/><text x="13.9111%" y="574.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (503 samples, 0.10%)</title><rect x="13.6666%" y="580" width="0.1039%" height="15" fill="rgb(246,228,12)" fg:x="66137" fg:w="503"/><text x="13.9166%" y="590.50"></text></g><g><title>forward (networks.py:49) (1,223 samples, 0.25%)</title><rect x="13.6406%" y="484" width="0.2527%" height="15" fill="rgb(213,55,15)" fg:x="66011" fg:w="1223"/><text x="13.8906%" y="494.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,222 samples, 0.25%)</title><rect x="13.6408%" y="500" width="0.2525%" height="15" fill="rgb(209,9,3)" fg:x="66012" fg:w="1222"/><text x="13.8908%" y="510.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,211 samples, 0.25%)</title><rect x="13.6431%" y="516" width="0.2502%" height="15" fill="rgb(230,59,30)" fg:x="66023" fg:w="1211"/><text x="13.8931%" y="526.50"></text></g><g><title>forward (networks.py:93) (594 samples, 0.12%)</title><rect x="13.7706%" y="532" width="0.1227%" height="15" fill="rgb(209,121,21)" fg:x="66640" fg:w="594"/><text x="14.0206%" y="542.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (493 samples, 0.10%)</title><rect x="13.7915%" y="548" width="0.1019%" height="15" fill="rgb(220,109,13)" fg:x="66741" fg:w="493"/><text x="14.0415%" y="558.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (489 samples, 0.10%)</title><rect x="13.7923%" y="564" width="0.1010%" height="15" fill="rgb(232,18,1)" fg:x="66745" fg:w="489"/><text x="14.0423%" y="574.50"></text></g><g><title>_predict (policies.py:81) (1,270 samples, 0.26%)</title><rect x="13.6377%" y="436" width="0.2624%" height="15" fill="rgb(215,41,42)" fg:x="65997" fg:w="1270"/><text x="13.8877%" y="446.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,267 samples, 0.26%)</title><rect x="13.6383%" y="452" width="0.2618%" height="15" fill="rgb(224,123,36)" fg:x="66000" fg:w="1267"/><text x="13.8883%" y="462.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,259 samples, 0.26%)</title><rect x="13.6400%" y="468" width="0.2602%" height="15" fill="rgb(240,125,3)" fg:x="66008" fg:w="1259"/><text x="13.8900%" y="478.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:349) (4,165 samples, 0.86%)</title><rect x="13.0436%" y="388" width="0.8607%" height="15" fill="rgb(205,98,50)" fg:x="63122" fg:w="4165"/><text x="13.2936%" y="398.50"></text></g><g><title>_predict (policies.py:107) (2,372 samples, 0.49%)</title><rect x="13.4141%" y="404" width="0.4902%" height="15" fill="rgb(205,185,37)" fg:x="64915" fg:w="2372"/><text x="13.6641%" y="414.50"></text></g><g><title>decorate_context (torch\utils\_contextlib.py:115) (2,370 samples, 0.49%)</title><rect x="13.4145%" y="420" width="0.4897%" height="15" fill="rgb(238,207,15)" fg:x="64917" fg:w="2370"/><text x="13.6645%" y="430.50"></text></g><g><title>_sample_action (stable_baselines3\common\off_policy_algorithm.py:373) (4,565 samples, 0.94%)</title><rect x="12.9647%" y="356" width="0.9433%" height="15" fill="rgb(213,199,42)" fg:x="62740" fg:w="4565"/><text x="13.2147%" y="366.50"></text></g><g><title>predict (stable_baselines3\common\base_class.py:555) (4,565 samples, 0.94%)</title><rect x="12.9647%" y="372" width="0.9433%" height="15" fill="rgb(235,201,11)" fg:x="62740" fg:w="4565"/><text x="13.2147%" y="382.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:541) (4,573 samples, 0.94%)</title><rect x="12.9647%" y="340" width="0.9450%" height="15" fill="rgb(207,46,11)" fg:x="62740" fg:w="4573"/><text x="13.2147%" y="350.50"></text></g><g><title>_step_mujoco_simulation (gymnasium\envs\mujoco\mujoco_env.py:371) (2,675 samples, 0.55%)</title><rect x="14.2091%" y="548" width="0.5528%" height="15" fill="rgb(241,35,35)" fg:x="68762" fg:w="2675"/><text x="14.4591%" y="558.50"></text></g><g><title>step (gymnasium\envs\mujoco\half_cheetah_v4.py:198) (3,227 samples, 0.67%)</title><rect x="14.1215%" y="516" width="0.6668%" height="15" fill="rgb(243,32,47)" fg:x="68338" fg:w="3227"/><text x="14.3715%" y="526.50"></text></g><g><title>do_simulation (gymnasium\envs\mujoco\mujoco_env.py:151) (2,984 samples, 0.62%)</title><rect x="14.1717%" y="532" width="0.6166%" height="15" fill="rgb(247,202,23)" fg:x="68581" fg:w="2984"/><text x="14.4217%" y="542.50"></text></g><g><title>sum (numpy\core\fromnumeric.py:2324) (642 samples, 0.13%)</title><rect x="15.0230%" y="564" width="0.1327%" height="15" fill="rgb(219,102,11)" fg:x="72701" fg:w="642"/><text x="15.2730%" y="574.50"></text></g><g><title>sum (&lt;__array_function__ internals&gt;:200) (763 samples, 0.16%)</title><rect x="14.9982%" y="548" width="0.1577%" height="15" fill="rgb(243,110,44)" fg:x="72581" fg:w="763"/><text x="15.2482%" y="558.50"></text></g><g><title>control_cost (gymnasium\envs\mujoco\half_cheetah_v4.py:193) (1,337 samples, 0.28%)</title><rect x="14.8815%" y="532" width="0.2763%" height="15" fill="rgb(222,74,54)" fg:x="72016" fg:w="1337"/><text x="15.1315%" y="542.50"></text></g><g><title>step (gymnasium\envs\mujoco\half_cheetah_v4.py:202) (1,370 samples, 0.28%)</title><rect x="14.8763%" y="516" width="0.2831%" height="15" fill="rgb(216,99,12)" fg:x="71991" fg:w="1370"/><text x="15.1263%" y="526.50"></text></g><g><title>step (gymnasium\envs\mujoco\half_cheetah_v4.py:206) (718 samples, 0.15%)</title><rect x="15.1615%" y="516" width="0.1484%" height="15" fill="rgb(226,22,26)" fg:x="73371" fg:w="718"/><text x="15.4115%" y="526.50"></text></g><g><title>step (half_cheetah_env.py:27) (6,124 samples, 1.27%)</title><rect x="14.0609%" y="500" width="1.2655%" height="15" fill="rgb(217,163,10)" fg:x="68045" fg:w="6124"/><text x="14.3109%" y="510.50"></text></g><g><title>__getattr__ (enum.py:432) (498 samples, 0.10%)</title><rect x="15.5064%" y="516" width="0.1029%" height="15" fill="rgb(213,25,53)" fg:x="75040" fg:w="498"/><text x="15.7564%" y="526.50"></text></g><g><title>step (half_cheetah_env.py:28) (1,448 samples, 0.30%)</title><rect x="15.3264%" y="500" width="0.2992%" height="15" fill="rgb(252,105,26)" fg:x="74169" fg:w="1448"/><text x="15.5764%" y="510.50"></text></g><g><title>__getattr__ (enum.py:432) (517 samples, 0.11%)</title><rect x="15.7568%" y="516" width="0.1068%" height="15" fill="rgb(220,39,43)" fg:x="76252" fg:w="517"/><text x="16.0068%" y="526.50"></text></g><g><title>step (half_cheetah_env.py:30) (1,240 samples, 0.26%)</title><rect x="15.6256%" y="500" width="0.2562%" height="15" fill="rgb(229,68,48)" fg:x="75617" fg:w="1240"/><text x="15.8756%" y="510.50"></text></g><g><title>step (half_cheetah_env.py:32) (1,157 samples, 0.24%)</title><rect x="15.8818%" y="500" width="0.2391%" height="15" fill="rgb(252,8,32)" fg:x="76857" fg:w="1157"/><text x="16.1318%" y="510.50"></text></g><g><title>step (non_stationary.py:57) (10,199 samples, 2.11%)</title><rect x="14.0429%" y="468" width="2.1075%" height="15" fill="rgb(223,20,43)" fg:x="67958" fg:w="10199"/><text x="14.2929%" y="478.50">s..</text></g><g><title>step (gymnasium\core.py:408) (10,166 samples, 2.10%)</title><rect x="14.0498%" y="484" width="2.1007%" height="15" fill="rgb(229,81,49)" fg:x="67991" fg:w="10166"/><text x="14.2998%" y="494.50">s..</text></g><g><title>change_goal (meta_env.py:18) (501 samples, 0.10%)</title><rect x="16.2945%" y="484" width="0.1035%" height="15" fill="rgb(236,28,36)" fg:x="78854" fg:w="501"/><text x="16.5445%" y="494.50"></text></g><g><title>step (non_stationary.py:70) (708 samples, 0.15%)</title><rect x="16.2889%" y="468" width="0.1463%" height="15" fill="rgb(249,185,26)" fg:x="78827" fg:w="708"/><text x="16.5389%" y="478.50"></text></g><g><title>step (success.py:10) (11,870 samples, 2.45%)</title><rect x="13.9855%" y="436" width="2.4528%" height="15" fill="rgb(249,174,33)" fg:x="67680" fg:w="11870"/><text x="14.2355%" y="446.50">st..</text></g><g><title>step (gymnasium\core.py:408) (11,759 samples, 2.43%)</title><rect x="14.0084%" y="452" width="2.4299%" height="15" fill="rgb(233,201,37)" fg:x="67791" fg:w="11759"/><text x="14.2584%" y="462.50">st..</text></g><g><title>step (gymnasium\core.py:469) (12,308 samples, 2.54%)</title><rect x="13.9700%" y="420" width="2.5433%" height="15" fill="rgb(221,78,26)" fg:x="67605" fg:w="12308"/><text x="14.2200%" y="430.50">st..</text></g><g><title>add_to_heatmap (heatmap.py:27) (709 samples, 0.15%)</title><rect x="16.5350%" y="452" width="0.1465%" height="15" fill="rgb(250,127,30)" fg:x="80018" fg:w="709"/><text x="16.7850%" y="462.50"></text></g><g><title>observation (heatmap.py:41) (1,272 samples, 0.26%)</title><rect x="16.5193%" y="436" width="0.2628%" height="15" fill="rgb(230,49,44)" fg:x="79942" fg:w="1272"/><text x="16.7693%" y="446.50"></text></g><g><title>step (gymnasium\wrappers\time_limit.py:57) (13,686 samples, 2.83%)</title><rect x="13.9549%" y="404" width="2.8281%" height="15" fill="rgb(229,67,23)" fg:x="67532" fg:w="13686"/><text x="14.2049%" y="414.50">st..</text></g><g><title>step (gymnasium\core.py:470) (1,305 samples, 0.27%)</title><rect x="16.5133%" y="420" width="0.2697%" height="15" fill="rgb(249,83,47)" fg:x="79913" fg:w="1305"/><text x="16.7633%" y="430.50"></text></g><g><title>step (wrappers\cemrl_wrapper.py:65) (13,807 samples, 2.85%)</title><rect x="13.9409%" y="388" width="2.8531%" height="15" fill="rgb(215,43,3)" fg:x="67464" fg:w="13807"/><text x="14.1909%" y="398.50">st..</text></g><g><title>observation (wrappers\cemrl_wrapper.py:96) (630 samples, 0.13%)</title><rect x="17.2114%" y="404" width="0.1302%" height="15" fill="rgb(238,154,13)" fg:x="83291" fg:w="630"/><text x="17.4614%" y="414.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:58) (16,967 samples, 3.51%)</title><rect x="13.9121%" y="372" width="3.5061%" height="15" fill="rgb(219,56,2)" fg:x="67325" fg:w="16967"/><text x="14.1621%" y="382.50">ste..</text></g><g><title>step (wrappers\cemrl_wrapper.py:66) (3,021 samples, 0.62%)</title><rect x="16.7940%" y="388" width="0.6243%" height="15" fill="rgb(233,0,4)" fg:x="81271" fg:w="3021"/><text x="17.0440%" y="398.50"></text></g><g><title>deepcopy (copy.py:134) (570 samples, 0.12%)</title><rect x="17.6567%" y="452" width="0.1178%" height="15" fill="rgb(235,30,7)" fg:x="85446" fg:w="570"/><text x="17.9067%" y="462.50"></text></g><g><title>deepcopy (copy.py:146) (490 samples, 0.10%)</title><rect x="17.9456%" y="452" width="0.1013%" height="15" fill="rgb(250,79,13)" fg:x="86844" fg:w="490"/><text x="18.1956%" y="462.50"></text></g><g><title>_deepcopy_dict (copy.py:231) (3,322 samples, 0.69%)</title><rect x="17.6038%" y="436" width="0.6865%" height="15" fill="rgb(211,146,34)" fg:x="85190" fg:w="3322"/><text x="17.8538%" y="446.50"></text></g><g><title>deepcopy (copy.py:146) (3,438 samples, 0.71%)</title><rect x="17.5808%" y="420" width="0.7104%" height="15" fill="rgb(228,22,38)" fg:x="85079" fg:w="3438"/><text x="17.8308%" y="430.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:544) (21,296 samples, 4.40%)</title><rect x="13.9097%" y="340" width="4.4006%" height="15" fill="rgb(235,168,5)" fg:x="67313" fg:w="21296"/><text x="14.1597%" y="350.50">colle..</text></g><g><title>step (stable_baselines3\common\vec_env\base_vec_env.py:180) (21,295 samples, 4.40%)</title><rect x="13.9099%" y="356" width="4.4004%" height="15" fill="rgb(221,155,16)" fg:x="67314" fg:w="21295"/><text x="14.1599%" y="366.50">step ..</text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:72) (3,694 samples, 0.76%)</title><rect x="17.5470%" y="372" width="0.7633%" height="15" fill="rgb(215,215,53)" fg:x="84915" fg:w="3694"/><text x="17.7970%" y="382.50"></text></g><g><title>deepcopy (copy.py:146) (3,655 samples, 0.76%)</title><rect x="17.5550%" y="388" width="0.7553%" height="15" fill="rgb(223,4,10)" fg:x="84954" fg:w="3655"/><text x="17.8050%" y="398.50"></text></g><g><title>_deepcopy_list (copy.py:206) (3,648 samples, 0.75%)</title><rect x="17.5565%" y="404" width="0.7538%" height="15" fill="rgb(234,103,6)" fg:x="84961" fg:w="3648"/><text x="17.8065%" y="414.50"></text></g><g><title>_store_transition (stable_baselines3\common\off_policy_algorithm.py:472) (670 samples, 0.14%)</title><rect x="18.3355%" y="356" width="0.1384%" height="15" fill="rgb(227,97,0)" fg:x="88731" fg:w="670"/><text x="18.5855%" y="366.50"></text></g><g><title>add (buffers.py:93) (542 samples, 0.11%)</title><rect x="18.3620%" y="372" width="0.1120%" height="15" fill="rgb(234,150,53)" fg:x="88859" fg:w="542"/><text x="18.6120%" y="382.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:559) (732 samples, 0.15%)</title><rect x="18.3229%" y="340" width="0.1513%" height="15" fill="rgb(228,201,54)" fg:x="88670" fg:w="732"/><text x="18.5729%" y="350.50"></text></g><g><title>learn (stable_baselines3\common\off_policy_algorithm.py:312) (26,865 samples, 5.55%)</title><rect x="12.9267%" y="324" width="5.5514%" height="15" fill="rgb(222,22,37)" fg:x="62556" fg:w="26865"/><text x="13.1767%" y="334.50">learn (..</text></g><g><title>take (pandas\core\internals\managers.py:979) (655 samples, 0.14%)</title><rect x="18.6767%" y="452" width="0.1354%" height="15" fill="rgb(237,53,32)" fg:x="90382" fg:w="655"/><text x="18.9267%" y="462.50"></text></g><g><title>_take (pandas\core\generic.py:3886) (1,120 samples, 0.23%)</title><rect x="18.6643%" y="436" width="0.2314%" height="15" fill="rgb(233,25,53)" fg:x="90322" fg:w="1120"/><text x="18.9143%" y="446.50"></text></g><g><title>_take_with_is_copy (pandas\core\generic.py:3902) (1,128 samples, 0.23%)</title><rect x="18.6639%" y="420" width="0.2331%" height="15" fill="rgb(210,40,34)" fg:x="90320" fg:w="1128"/><text x="18.9139%" y="430.50"></text></g><g><title>__getitem__ (pandas\core\frame.py:3796) (1,328 samples, 0.27%)</title><rect x="18.6240%" y="388" width="0.2744%" height="15" fill="rgb(241,220,44)" fg:x="90127" fg:w="1328"/><text x="18.8740%" y="398.50"></text></g><g><title>_getitem_bool_array (pandas\core\frame.py:3851) (1,136 samples, 0.23%)</title><rect x="18.6636%" y="404" width="0.2347%" height="15" fill="rgb(235,28,35)" fg:x="90319" fg:w="1136"/><text x="18.9136%" y="414.50"></text></g><g><title>_build_decoder_index (buffers.py:197) (1,495 samples, 0.31%)</title><rect x="18.6000%" y="372" width="0.3089%" height="15" fill="rgb(210,56,17)" fg:x="90011" fg:w="1495"/><text x="18.8500%" y="382.50"></text></g><g><title>factorize_array (pandas\core\algorithms.py:574) (527 samples, 0.11%)</title><rect x="18.9203%" y="484" width="0.1089%" height="15" fill="rgb(224,130,29)" fg:x="91561" fg:w="527"/><text x="19.1703%" y="494.50"></text></g><g><title>factorize (pandas\core\algorithms.py:818) (543 samples, 0.11%)</title><rect x="18.9174%" y="468" width="0.1122%" height="15" fill="rgb(235,212,8)" fg:x="91547" fg:w="543"/><text x="19.1674%" y="478.50"></text></g><g><title>codes (pandas\core\groupby\grouper.py:621) (738 samples, 0.15%)</title><rect x="18.9166%" y="436" width="0.1525%" height="15" fill="rgb(223,33,50)" fg:x="91543" fg:w="738"/><text x="19.1666%" y="446.50"></text></g><g><title>_codes_and_uniques (pandas\core\groupby\grouper.py:692) (737 samples, 0.15%)</title><rect x="18.9168%" y="452" width="0.1523%" height="15" fill="rgb(219,149,13)" fg:x="91544" fg:w="737"/><text x="19.1668%" y="462.50"></text></g><g><title>_reverse_indexer (pandas\core\arrays\categorical.py:2281) (579 samples, 0.12%)</title><rect x="19.0980%" y="452" width="0.1196%" height="15" fill="rgb(250,156,29)" fg:x="92421" fg:w="579"/><text x="19.3480%" y="462.50"></text></g><g><title>groupby (pandas\core\indexes\base.py:6376) (711 samples, 0.15%)</title><rect x="19.0978%" y="436" width="0.1469%" height="15" fill="rgb(216,193,19)" fg:x="92420" fg:w="711"/><text x="19.3478%" y="446.50"></text></g><g><title>take (pandas\core\algorithms.py:1573) (514 samples, 0.11%)</title><rect x="19.2672%" y="484" width="0.1062%" height="15" fill="rgb(216,135,14)" fg:x="93240" fg:w="514"/><text x="19.5172%" y="494.50"></text></g><g><title>take (pandas\core\indexes\base.py:1184) (548 samples, 0.11%)</title><rect x="19.2604%" y="468" width="0.1132%" height="15" fill="rgb(241,47,5)" fg:x="93207" fg:w="548"/><text x="19.5104%" y="478.50"></text></g><g><title>_build_decoder_index (buffers.py:199) (2,275 samples, 0.47%)</title><rect x="18.9162%" y="372" width="0.4701%" height="15" fill="rgb(233,42,35)" fg:x="91541" fg:w="2275"/><text x="19.1662%" y="382.50"></text></g><g><title>groups (pandas\core\groupby\groupby.py:666) (2,275 samples, 0.47%)</title><rect x="18.9162%" y="388" width="0.4701%" height="15" fill="rgb(231,13,6)" fg:x="91541" fg:w="2275"/><text x="19.1662%" y="398.50"></text></g><g><title>groups (pandas\core\groupby\ops.py:924) (2,275 samples, 0.47%)</title><rect x="18.9162%" y="404" width="0.4701%" height="15" fill="rgb(207,181,40)" fg:x="91541" fg:w="2275"/><text x="19.1662%" y="414.50"></text></g><g><title>groups (pandas\core\groupby\grouper.py:699) (2,275 samples, 0.47%)</title><rect x="18.9162%" y="420" width="0.4701%" height="15" fill="rgb(254,173,49)" fg:x="91541" fg:w="2275"/><text x="19.1662%" y="430.50"></text></g><g><title>groupby (pandas\core\indexes\base.py:6379) (685 samples, 0.14%)</title><rect x="19.2447%" y="436" width="0.1415%" height="15" fill="rgb(221,1,38)" fg:x="93131" fg:w="685"/><text x="19.4947%" y="446.50"></text></g><g><title>&lt;dictcomp&gt; (pandas\core\indexes\base.py:6379) (653 samples, 0.13%)</title><rect x="19.2513%" y="452" width="0.1349%" height="15" fill="rgb(206,124,46)" fg:x="93163" fg:w="653"/><text x="19.5013%" y="462.50"></text></g><g><title>get_decoder_targets (buffers.py:180) (4,620 samples, 0.95%)</title><rect x="18.5601%" y="356" width="0.9547%" height="15" fill="rgb(249,21,11)" fg:x="89818" fg:w="4620"/><text x="18.8101%" y="366.50"></text></g><g><title>get_decoder_targets (buffers.py:188) (867 samples, 0.18%)</title><rect x="19.5406%" y="356" width="0.1792%" height="15" fill="rgb(222,201,40)" fg:x="94563" fg:w="867"/><text x="19.7906%" y="366.50"></text></g><g><title>get_decoder_targets (buffers.py:189) (822 samples, 0.17%)</title><rect x="19.7198%" y="356" width="0.1699%" height="15" fill="rgb(235,61,29)" fg:x="95430" fg:w="822"/><text x="19.9698%" y="366.50"></text></g><g><title>get_decoder_targets (buffers.py:190) (534 samples, 0.11%)</title><rect x="19.8897%" y="356" width="0.1103%" height="15" fill="rgb(219,207,3)" fg:x="96252" fg:w="534"/><text x="20.1397%" y="366.50"></text></g><g><title>train (plan2explore.py:50) (7,286 samples, 1.51%)</title><rect x="18.5601%" y="340" width="1.5056%" height="15" fill="rgb(222,56,46)" fg:x="89818" fg:w="7286"/><text x="18.8101%" y="350.50"></text></g><g><title>train (plan2explore.py:51) (662 samples, 0.14%)</title><rect x="20.0657%" y="340" width="0.1368%" height="15" fill="rgb(239,76,54)" fg:x="97104" fg:w="662"/><text x="20.3157%" y="350.50"></text></g><g><title>forward (torch\nn\modules\rnn.py:998) (1,027 samples, 0.21%)</title><rect x="20.2097%" y="452" width="0.2122%" height="15" fill="rgb(231,124,27)" fg:x="97801" fg:w="1027"/><text x="20.4597%" y="462.50"></text></g><g><title>encode (networks.py:39) (1,043 samples, 0.22%)</title><rect x="20.2066%" y="420" width="0.2155%" height="15" fill="rgb(249,195,6)" fg:x="97786" fg:w="1043"/><text x="20.4566%" y="430.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,042 samples, 0.22%)</title><rect x="20.2068%" y="436" width="0.2153%" height="15" fill="rgb(237,174,47)" fg:x="97787" fg:w="1042"/><text x="20.4568%" y="446.50"></text></g><g><title>forward (networks.py:30) (1,234 samples, 0.25%)</title><rect x="20.2046%" y="388" width="0.2550%" height="15" fill="rgb(206,201,31)" fg:x="97776" fg:w="1234"/><text x="20.4546%" y="398.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,231 samples, 0.25%)</title><rect x="20.2052%" y="404" width="0.2544%" height="15" fill="rgb(231,57,52)" fg:x="97779" fg:w="1231"/><text x="20.4552%" y="414.50"></text></g><g><title>train (plan2explore.py:52) (1,277 samples, 0.26%)</title><rect x="20.2025%" y="340" width="0.2639%" height="15" fill="rgb(248,177,22)" fg:x="97766" fg:w="1277"/><text x="20.4525%" y="350.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,273 samples, 0.26%)</title><rect x="20.2033%" y="356" width="0.2631%" height="15" fill="rgb(215,211,37)" fg:x="97770" fg:w="1273"/><text x="20.4533%" y="366.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,269 samples, 0.26%)</title><rect x="20.2042%" y="372" width="0.2622%" height="15" fill="rgb(241,128,51)" fg:x="97774" fg:w="1269"/><text x="20.4542%" y="382.50"></text></g><g><title>forward (torch\nn\modules\activation.py:103) (1,040 samples, 0.21%)</title><rect x="20.5232%" y="500" width="0.2149%" height="15" fill="rgb(227,165,31)" fg:x="99318" fg:w="1040"/><text x="20.7732%" y="510.50"></text></g><g><title>relu (torch\nn\functional.py:1457) (1,029 samples, 0.21%)</title><rect x="20.5255%" y="516" width="0.2126%" height="15" fill="rgb(228,167,24)" fg:x="99329" fg:w="1029"/><text x="20.7755%" y="526.50"></text></g><g><title>forward (networks.py:91) (5,363 samples, 1.11%)</title><rect x="20.4744%" y="436" width="1.1082%" height="15" fill="rgb(228,143,12)" fg:x="99082" fg:w="5363"/><text x="20.7244%" y="446.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (5,174 samples, 1.07%)</title><rect x="20.5135%" y="452" width="1.0692%" height="15" fill="rgb(249,149,8)" fg:x="99271" fg:w="5174"/><text x="20.7635%" y="462.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (5,168 samples, 1.07%)</title><rect x="20.5147%" y="468" width="1.0679%" height="15" fill="rgb(243,35,44)" fg:x="99277" fg:w="5168"/><text x="20.7647%" y="478.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (5,131 samples, 1.06%)</title><rect x="20.5224%" y="484" width="1.0603%" height="15" fill="rgb(246,89,9)" fg:x="99314" fg:w="5131"/><text x="20.7724%" y="494.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (4,087 samples, 0.84%)</title><rect x="20.7381%" y="500" width="0.8445%" height="15" fill="rgb(233,213,13)" fg:x="100358" fg:w="4087"/><text x="20.9881%" y="510.50"></text></g><g><title>forward (torch\nn\modules\activation.py:103) (1,126 samples, 0.23%)</title><rect x="21.6688%" y="500" width="0.2327%" height="15" fill="rgb(233,141,41)" fg:x="104862" fg:w="1126"/><text x="21.9188%" y="510.50"></text></g><g><title>relu (torch\nn\functional.py:1457) (1,106 samples, 0.23%)</title><rect x="21.6730%" y="516" width="0.2285%" height="15" fill="rgb(239,167,4)" fg:x="104882" fg:w="1106"/><text x="21.9230%" y="526.50"></text></g><g><title>forward (networks.py:49) (10,921 samples, 2.26%)</title><rect x="20.4722%" y="388" width="2.2567%" height="15" fill="rgb(209,217,16)" fg:x="99071" fg:w="10921"/><text x="20.7222%" y="398.50">f..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (10,917 samples, 2.26%)</title><rect x="20.4730%" y="404" width="2.2559%" height="15" fill="rgb(219,88,35)" fg:x="99075" fg:w="10917"/><text x="20.7230%" y="414.50">_..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (10,910 samples, 2.25%)</title><rect x="20.4744%" y="420" width="2.2545%" height="15" fill="rgb(220,193,23)" fg:x="99082" fg:w="10910"/><text x="20.7244%" y="430.50">d..</text></g><g><title>forward (networks.py:93) (5,547 samples, 1.15%)</title><rect x="21.5827%" y="436" width="1.1462%" height="15" fill="rgb(230,90,52)" fg:x="104445" fg:w="5547"/><text x="21.8327%" y="446.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (5,190 samples, 1.07%)</title><rect x="21.6564%" y="452" width="1.0725%" height="15" fill="rgb(252,106,19)" fg:x="104802" fg:w="5190"/><text x="21.9064%" y="462.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (5,184 samples, 1.07%)</title><rect x="21.6577%" y="468" width="1.0712%" height="15" fill="rgb(206,74,20)" fg:x="104808" fg:w="5184"/><text x="21.9077%" y="478.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (5,136 samples, 1.06%)</title><rect x="21.6676%" y="484" width="1.0613%" height="15" fill="rgb(230,138,44)" fg:x="104856" fg:w="5136"/><text x="21.9176%" y="494.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (4,004 samples, 0.83%)</title><rect x="21.9015%" y="500" width="0.8274%" height="15" fill="rgb(235,182,43)" fg:x="105988" fg:w="4004"/><text x="22.1515%" y="510.50"></text></g><g><title>train (plan2explore.py:79) (10,987 samples, 2.27%)</title><rect x="20.4697%" y="340" width="2.2704%" height="15" fill="rgb(242,16,51)" fg:x="99059" fg:w="10987"/><text x="20.7197%" y="350.50">t..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (10,984 samples, 2.27%)</title><rect x="20.4703%" y="356" width="2.2697%" height="15" fill="rgb(248,9,4)" fg:x="99062" fg:w="10984"/><text x="20.7203%" y="366.50">_..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (10,981 samples, 2.27%)</title><rect x="20.4709%" y="372" width="2.2691%" height="15" fill="rgb(210,31,22)" fg:x="99065" fg:w="10981"/><text x="20.7209%" y="382.50">d..</text></g><g><title>_use_grad (torch\optim\optimizer.py:33) (773 samples, 0.16%)</title><rect x="22.7992%" y="404" width="0.1597%" height="15" fill="rgb(239,54,39)" fg:x="110332" fg:w="773"/><text x="23.0492%" y="414.50"></text></g><g><title>step (torch\optim\adam.py:141) (733 samples, 0.15%)</title><rect x="22.8074%" y="420" width="0.1515%" height="15" fill="rgb(230,99,41)" fg:x="110372" fg:w="733"/><text x="23.0574%" y="430.50"></text></g><g><title>adam (torch\optim\adam.py:281) (695 samples, 0.14%)</title><rect x="22.8153%" y="436" width="0.1436%" height="15" fill="rgb(253,106,12)" fg:x="110410" fg:w="695"/><text x="23.0653%" y="446.50"></text></g><g><title>wrapper (torch\optim\optimizer.py:280) (775 samples, 0.16%)</title><rect x="22.7992%" y="388" width="0.1601%" height="15" fill="rgb(213,46,41)" fg:x="110332" fg:w="775"/><text x="23.0492%" y="398.50"></text></g><g><title>train (plan2explore.py:90) (888 samples, 0.18%)</title><rect x="22.7760%" y="340" width="0.1835%" height="15" fill="rgb(215,133,35)" fg:x="110220" fg:w="888"/><text x="23.0260%" y="350.50"></text></g><g><title>step (torch\cuda\amp\grad_scaler.py:370) (803 samples, 0.17%)</title><rect x="22.7936%" y="356" width="0.1659%" height="15" fill="rgb(213,28,5)" fg:x="110305" fg:w="803"/><text x="23.0436%" y="366.50"></text></g><g><title>_maybe_opt_step (torch\cuda\amp\grad_scaler.py:290) (795 samples, 0.16%)</title><rect x="22.7952%" y="372" width="0.1643%" height="15" fill="rgb(215,77,49)" fg:x="110313" fg:w="795"/><text x="23.0452%" y="382.50"></text></g><g><title>_on_training_start (callbacks\exploration_callback.py:76) (48,560 samples, 10.03%)</title><rect x="12.9267%" y="308" width="10.0345%" height="15" fill="rgb(248,100,22)" fg:x="62556" fg:w="48560"/><text x="13.1767%" y="318.50">_on_training_st..</text></g><g><title>learn (stable_baselines3\common\off_policy_algorithm.py:331) (21,694 samples, 4.48%)</title><rect x="18.4783%" y="324" width="4.4829%" height="15" fill="rgb(208,67,9)" fg:x="89422" fg:w="21694"/><text x="18.7283%" y="334.50">learn..</text></g><g><title>_on_training_start (stable_baselines3\common\callbacks.py:198) (48,687 samples, 10.06%)</title><rect x="12.9267%" y="276" width="10.0608%" height="15" fill="rgb(219,133,21)" fg:x="62556" fg:w="48687"/><text x="13.1767%" y="286.50">_on_training_st..</text></g><g><title>on_training_start (stable_baselines3\common\callbacks.py:74) (48,687 samples, 10.06%)</title><rect x="12.9267%" y="292" width="10.0608%" height="15" fill="rgb(246,46,29)" fg:x="62556" fg:w="48687"/><text x="13.1767%" y="302.50">on_training_sta..</text></g><g><title>learn (stable_baselines3\common\off_policy_algorithm.py:309) (48,691 samples, 10.06%)</title><rect x="12.9267%" y="212" width="10.0616%" height="15" fill="rgb(246,185,52)" fg:x="62556" fg:w="48691"/><text x="13.1767%" y="222.50">learn (stable_b..</text></g><g><title>on_training_start (stable_baselines3\common\callbacks.py:74) (48,691 samples, 10.06%)</title><rect x="12.9267%" y="228" width="10.0616%" height="15" fill="rgb(252,136,11)" fg:x="62556" fg:w="48691"/><text x="13.1767%" y="238.50">on_training_sta..</text></g><g><title>_on_training_start (stable_baselines3\common\callbacks.py:198) (48,691 samples, 10.06%)</title><rect x="12.9267%" y="244" width="10.0616%" height="15" fill="rgb(219,138,53)" fg:x="62556" fg:w="48691"/><text x="13.1767%" y="254.50">_on_training_st..</text></g><g><title>on_training_start (stable_baselines3\common\callbacks.py:74) (48,691 samples, 10.06%)</title><rect x="12.9267%" y="260" width="10.0616%" height="15" fill="rgb(211,51,23)" fg:x="62556" fg:w="48691"/><text x="13.1767%" y="270.50">on_training_sta..</text></g><g><title>predict (stable_baselines3\common\policies.py:349) (507 samples, 0.10%)</title><rect x="23.0101%" y="388" width="0.1048%" height="15" fill="rgb(247,221,28)" fg:x="111353" fg:w="507"/><text x="23.2601%" y="398.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:541) (571 samples, 0.12%)</title><rect x="22.9982%" y="340" width="0.1180%" height="15" fill="rgb(251,222,45)" fg:x="111295" fg:w="571"/><text x="23.2482%" y="350.50"></text></g><g><title>_sample_action (stable_baselines3\common\off_policy_algorithm.py:373) (571 samples, 0.12%)</title><rect x="22.9982%" y="356" width="0.1180%" height="15" fill="rgb(217,162,53)" fg:x="111295" fg:w="571"/><text x="23.2482%" y="366.50"></text></g><g><title>predict (stable_baselines3\common\base_class.py:555) (571 samples, 0.12%)</title><rect x="22.9982%" y="372" width="0.1180%" height="15" fill="rgb(229,93,14)" fg:x="111295" fg:w="571"/><text x="23.2482%" y="382.50"></text></g><g><title>step (half_cheetah_env.py:27) (855 samples, 0.18%)</title><rect x="23.1372%" y="500" width="0.1767%" height="15" fill="rgb(209,67,49)" fg:x="111968" fg:w="855"/><text x="23.3872%" y="510.50"></text></g><g><title>step (non_stationary.py:57) (1,437 samples, 0.30%)</title><rect x="23.1327%" y="468" width="0.2969%" height="15" fill="rgb(213,87,29)" fg:x="111946" fg:w="1437"/><text x="23.3827%" y="478.50"></text></g><g><title>step (gymnasium\core.py:408) (1,427 samples, 0.29%)</title><rect x="23.1348%" y="484" width="0.2949%" height="15" fill="rgb(205,151,52)" fg:x="111956" fg:w="1427"/><text x="23.3848%" y="494.50"></text></g><g><title>step (success.py:10) (1,658 samples, 0.34%)</title><rect x="23.1248%" y="436" width="0.3426%" height="15" fill="rgb(253,215,39)" fg:x="111908" fg:w="1658"/><text x="23.3748%" y="446.50"></text></g><g><title>step (gymnasium\core.py:408) (1,642 samples, 0.34%)</title><rect x="23.1281%" y="452" width="0.3393%" height="15" fill="rgb(221,220,41)" fg:x="111924" fg:w="1642"/><text x="23.3781%" y="462.50"></text></g><g><title>step (gymnasium\core.py:469) (1,710 samples, 0.35%)</title><rect x="23.1228%" y="420" width="0.3534%" height="15" fill="rgb(218,133,21)" fg:x="111898" fg:w="1710"/><text x="23.3728%" y="430.50"></text></g><g><title>step (gymnasium\wrappers\time_limit.py:57) (1,912 samples, 0.40%)</title><rect x="23.1213%" y="404" width="0.3951%" height="15" fill="rgb(221,193,43)" fg:x="111891" fg:w="1912"/><text x="23.3713%" y="414.50"></text></g><g><title>step (wrappers\cemrl_wrapper.py:65) (1,922 samples, 0.40%)</title><rect x="23.1199%" y="388" width="0.3972%" height="15" fill="rgb(240,128,52)" fg:x="111884" fg:w="1922"/><text x="23.3699%" y="398.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:58) (2,359 samples, 0.49%)</title><rect x="23.1168%" y="372" width="0.4875%" height="15" fill="rgb(253,114,12)" fg:x="111869" fg:w="2359"/><text x="23.3668%" y="382.50"></text></g><g><title>deepcopy (copy.py:146) (507 samples, 0.10%)</title><rect x="23.6239%" y="420" width="0.1048%" height="15" fill="rgb(215,223,47)" fg:x="114323" fg:w="507"/><text x="23.8739%" y="430.50"></text></g><g><title>_deepcopy_dict (copy.py:231) (495 samples, 0.10%)</title><rect x="23.6264%" y="436" width="0.1023%" height="15" fill="rgb(248,225,23)" fg:x="114335" fg:w="495"/><text x="23.8764%" y="446.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:544) (2,974 samples, 0.61%)</title><rect x="23.1162%" y="340" width="0.6146%" height="15" fill="rgb(250,108,0)" fg:x="111866" fg:w="2974"/><text x="23.3662%" y="350.50"></text></g><g><title>step (stable_baselines3\common\vec_env\base_vec_env.py:180) (2,974 samples, 0.61%)</title><rect x="23.1162%" y="356" width="0.6146%" height="15" fill="rgb(228,208,7)" fg:x="111866" fg:w="2974"/><text x="23.3662%" y="366.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:72) (540 samples, 0.11%)</title><rect x="23.6191%" y="372" width="0.1116%" height="15" fill="rgb(244,45,10)" fg:x="114300" fg:w="540"/><text x="23.8691%" y="382.50"></text></g><g><title>deepcopy (copy.py:146) (531 samples, 0.11%)</title><rect x="23.6210%" y="388" width="0.1097%" height="15" fill="rgb(207,125,25)" fg:x="114309" fg:w="531"/><text x="23.8710%" y="398.50"></text></g><g><title>_deepcopy_list (copy.py:206) (529 samples, 0.11%)</title><rect x="23.6214%" y="404" width="0.1093%" height="15" fill="rgb(210,195,18)" fg:x="114311" fg:w="529"/><text x="23.8714%" y="414.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:533) (3,668 samples, 0.76%)</title><rect x="22.9940%" y="228" width="0.7580%" height="15" fill="rgb(249,80,12)" fg:x="111275" fg:w="3668"/><text x="23.2440%" y="238.50"></text></g><g><title>on_rollout_start (stable_baselines3\common\callbacks.py:80) (3,668 samples, 0.76%)</title><rect x="22.9940%" y="244" width="0.7580%" height="15" fill="rgb(221,65,9)" fg:x="111275" fg:w="3668"/><text x="23.2440%" y="254.50"></text></g><g><title>_on_rollout_start (stable_baselines3\common\callbacks.py:202) (3,668 samples, 0.76%)</title><rect x="22.9940%" y="260" width="0.7580%" height="15" fill="rgb(235,49,36)" fg:x="111275" fg:w="3668"/><text x="23.2440%" y="270.50"></text></g><g><title>on_rollout_start (stable_baselines3\common\callbacks.py:80) (3,668 samples, 0.76%)</title><rect x="22.9940%" y="276" width="0.7580%" height="15" fill="rgb(225,32,20)" fg:x="111275" fg:w="3668"/><text x="23.2440%" y="286.50"></text></g><g><title>_on_rollout_start (stable_baselines3\common\callbacks.py:202) (3,668 samples, 0.76%)</title><rect x="22.9940%" y="292" width="0.7580%" height="15" fill="rgb(215,141,46)" fg:x="111275" fg:w="3668"/><text x="23.2440%" y="302.50"></text></g><g><title>on_rollout_start (stable_baselines3\common\callbacks.py:80) (3,668 samples, 0.76%)</title><rect x="22.9940%" y="308" width="0.7580%" height="15" fill="rgb(250,160,47)" fg:x="111275" fg:w="3668"/><text x="23.2440%" y="318.50"></text></g><g><title>_on_rollout_start (callbacks\exploration_callback.py:94) (3,666 samples, 0.76%)</title><rect x="22.9944%" y="324" width="0.7575%" height="15" fill="rgb(216,222,40)" fg:x="111277" fg:w="3666"/><text x="23.2444%" y="334.50"></text></g><g><title>step (half_cheetah_env.py:27) (760 samples, 0.16%)</title><rect x="23.8359%" y="388" width="0.1570%" height="15" fill="rgb(234,217,39)" fg:x="115349" fg:w="760"/><text x="24.0859%" y="398.50"></text></g><g><title>step (non_stationary.py:57) (1,335 samples, 0.28%)</title><rect x="23.8315%" y="356" width="0.2759%" height="15" fill="rgb(207,178,40)" fg:x="115328" fg:w="1335"/><text x="24.0815%" y="366.50"></text></g><g><title>step (gymnasium\core.py:408) (1,323 samples, 0.27%)</title><rect x="23.8340%" y="372" width="0.2734%" height="15" fill="rgb(221,136,13)" fg:x="115340" fg:w="1323"/><text x="24.0840%" y="382.50"></text></g><g><title>step (success.py:10) (1,545 samples, 0.32%)</title><rect x="23.8256%" y="324" width="0.3193%" height="15" fill="rgb(249,199,10)" fg:x="115299" fg:w="1545"/><text x="24.0756%" y="334.50"></text></g><g><title>step (gymnasium\core.py:408) (1,529 samples, 0.32%)</title><rect x="23.8289%" y="340" width="0.3160%" height="15" fill="rgb(249,222,13)" fg:x="115315" fg:w="1529"/><text x="24.0789%" y="350.50"></text></g><g><title>step (gymnasium\core.py:469) (1,588 samples, 0.33%)</title><rect x="23.8231%" y="308" width="0.3281%" height="15" fill="rgb(244,185,38)" fg:x="115287" fg:w="1588"/><text x="24.0731%" y="318.50"></text></g><g><title>step (gymnasium\wrappers\time_limit.py:57) (1,778 samples, 0.37%)</title><rect x="23.8200%" y="292" width="0.3674%" height="15" fill="rgb(236,202,9)" fg:x="115272" fg:w="1778"/><text x="24.0700%" y="302.50"></text></g><g><title>step (wrappers\cemrl_wrapper.py:65) (1,796 samples, 0.37%)</title><rect x="23.8187%" y="276" width="0.3711%" height="15" fill="rgb(250,229,37)" fg:x="115266" fg:w="1796"/><text x="24.0687%" y="286.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:58) (2,210 samples, 0.46%)</title><rect x="23.8160%" y="260" width="0.4567%" height="15" fill="rgb(206,174,23)" fg:x="115253" fg:w="2210"/><text x="24.0660%" y="270.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:544) (2,763 samples, 0.57%)</title><rect x="23.8158%" y="228" width="0.5710%" height="15" fill="rgb(211,33,43)" fg:x="115252" fg:w="2763"/><text x="24.0658%" y="238.50"></text></g><g><title>step (stable_baselines3\common\vec_env\base_vec_env.py:180) (2,763 samples, 0.57%)</title><rect x="23.8158%" y="244" width="0.5710%" height="15" fill="rgb(245,58,50)" fg:x="115252" fg:w="2763"/><text x="24.0658%" y="254.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:72) (489 samples, 0.10%)</title><rect x="24.2857%" y="260" width="0.1010%" height="15" fill="rgb(244,68,36)" fg:x="117526" fg:w="489"/><text x="24.5357%" y="270.50"></text></g><g><title>deepcopy (copy.py:146) (488 samples, 0.10%)</title><rect x="24.2860%" y="276" width="0.1008%" height="15" fill="rgb(232,229,15)" fg:x="117527" fg:w="488"/><text x="24.5360%" y="286.50"></text></g><g><title>_deepcopy_list (copy.py:206) (487 samples, 0.10%)</title><rect x="24.2862%" y="292" width="0.1006%" height="15" fill="rgb(254,30,23)" fg:x="117528" fg:w="487"/><text x="24.5362%" y="302.50"></text></g><g><title>train (torch\nn\modules\module.py:2287) (649 samples, 0.13%)</title><rect x="24.5376%" y="500" width="0.1341%" height="15" fill="rgb(235,160,14)" fg:x="118745" fg:w="649"/><text x="24.7876%" y="510.50"></text></g><g><title>train (torch\nn\modules\module.py:2287) (541 samples, 0.11%)</title><rect x="24.7581%" y="516" width="0.1118%" height="15" fill="rgb(212,155,44)" fg:x="119812" fg:w="541"/><text x="25.0081%" y="526.50"></text></g><g><title>children (torch\nn\modules\module.py:2173) (523 samples, 0.11%)</title><rect x="24.7618%" y="532" width="0.1081%" height="15" fill="rgb(226,2,50)" fg:x="119830" fg:w="523"/><text x="25.0118%" y="542.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (1,694 samples, 0.35%)</title><rect x="24.5207%" y="484" width="0.3501%" height="15" fill="rgb(234,177,6)" fg:x="118663" fg:w="1694"/><text x="24.7707%" y="494.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (963 samples, 0.20%)</title><rect x="24.6718%" y="500" width="0.1990%" height="15" fill="rgb(217,24,9)" fg:x="119394" fg:w="963"/><text x="24.9218%" y="510.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:344) (2,273 samples, 0.47%)</title><rect x="24.4013%" y="404" width="0.4697%" height="15" fill="rgb(220,13,46)" fg:x="118085" fg:w="2273"/><text x="24.6513%" y="414.50"></text></g><g><title>set_training_mode (stable_baselines3\common\policies.py:209) (2,272 samples, 0.47%)</title><rect x="24.4015%" y="420" width="0.4695%" height="15" fill="rgb(239,221,27)" fg:x="118086" fg:w="2272"/><text x="24.6515%" y="430.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (2,219 samples, 0.46%)</title><rect x="24.4124%" y="436" width="0.4585%" height="15" fill="rgb(222,198,25)" fg:x="118139" fg:w="2219"/><text x="24.6624%" y="446.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (2,137 samples, 0.44%)</title><rect x="24.4294%" y="452" width="0.4416%" height="15" fill="rgb(211,99,13)" fg:x="118221" fg:w="2137"/><text x="24.6794%" y="462.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (1,961 samples, 0.41%)</title><rect x="24.4657%" y="468" width="0.4052%" height="15" fill="rgb(232,111,31)" fg:x="118397" fg:w="1961"/><text x="24.7157%" y="478.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:346) (560 samples, 0.12%)</title><rect x="24.8710%" y="404" width="0.1157%" height="15" fill="rgb(245,82,37)" fg:x="120358" fg:w="560"/><text x="25.1210%" y="414.50"></text></g><g><title>encode (networks.py:39) (8,528 samples, 1.76%)</title><rect x="25.0371%" y="516" width="1.7622%" height="15" fill="rgb(227,149,46)" fg:x="121162" fg:w="8528"/><text x="25.2871%" y="526.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (8,513 samples, 1.76%)</title><rect x="25.0402%" y="532" width="1.7591%" height="15" fill="rgb(218,36,50)" fg:x="121177" fg:w="8513"/><text x="25.2902%" y="542.50"></text></g><g><title>forward (torch\nn\modules\rnn.py:998) (8,334 samples, 1.72%)</title><rect x="25.0772%" y="548" width="1.7221%" height="15" fill="rgb(226,80,48)" fg:x="121356" fg:w="8334"/><text x="25.3272%" y="558.50"></text></g><g><title>encode (networks.py:41) (504 samples, 0.10%)</title><rect x="26.8055%" y="516" width="0.1041%" height="15" fill="rgb(238,224,15)" fg:x="129720" fg:w="504"/><text x="27.0555%" y="526.50"></text></g><g><title>encode (networks.py:46) (673 samples, 0.14%)</title><rect x="27.0190%" y="516" width="0.1391%" height="15" fill="rgb(241,136,10)" fg:x="130753" fg:w="673"/><text x="27.2690%" y="526.50"></text></g><g><title>__init__ (torch\distributions\categorical.py:66) (549 samples, 0.11%)</title><rect x="27.0446%" y="532" width="0.1134%" height="15" fill="rgb(208,32,45)" fg:x="130877" fg:w="549"/><text x="27.2946%" y="542.50"></text></g><g><title>&lt;listcomp&gt; (networks.py:47) (485 samples, 0.10%)</title><rect x="27.1591%" y="532" width="0.1002%" height="15" fill="rgb(207,135,9)" fg:x="131431" fg:w="485"/><text x="27.4091%" y="542.50"></text></g><g><title>forward (networks.py:30) (10,917 samples, 2.26%)</title><rect x="25.0088%" y="484" width="2.2559%" height="15" fill="rgb(206,86,44)" fg:x="121025" fg:w="10917"/><text x="25.2588%" y="494.50">f..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (10,895 samples, 2.25%)</title><rect x="25.0133%" y="500" width="2.2514%" height="15" fill="rgb(245,177,15)" fg:x="121047" fg:w="10895"/><text x="25.2633%" y="510.50">d..</text></g><g><title>encode (networks.py:47) (516 samples, 0.11%)</title><rect x="27.1581%" y="516" width="0.1066%" height="15" fill="rgb(206,64,50)" fg:x="131426" fg:w="516"/><text x="27.4081%" y="526.50"></text></g><g><title>_predict (policies.py:68) (11,423 samples, 2.36%)</title><rect x="25.0003%" y="436" width="2.3605%" height="15" fill="rgb(234,36,40)" fg:x="120984" fg:w="11423"/><text x="25.2503%" y="446.50">_p..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (11,411 samples, 2.36%)</title><rect x="25.0028%" y="452" width="2.3580%" height="15" fill="rgb(213,64,8)" fg:x="120996" fg:w="11411"/><text x="25.2528%" y="462.50">_..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (11,387 samples, 2.35%)</title><rect x="25.0077%" y="468" width="2.3530%" height="15" fill="rgb(210,75,36)" fg:x="121020" fg:w="11387"/><text x="25.2577%" y="478.50">d..</text></g><g><title>forward (stable_baselines3\sac\policies.py:168) (1,042 samples, 0.22%)</title><rect x="27.3740%" y="484" width="0.2153%" height="15" fill="rgb(229,88,21)" fg:x="132471" fg:w="1042"/><text x="27.6240%" y="494.50"></text></g><g><title>actions_from_params (stable_baselines3\common\distributions.py:190) (582 samples, 0.12%)</title><rect x="27.5897%" y="500" width="0.1203%" height="15" fill="rgb(252,204,47)" fg:x="133515" fg:w="582"/><text x="27.8397%" y="510.50"></text></g><g><title>proba_distribution (stable_baselines3\common\distributions.py:224) (576 samples, 0.12%)</title><rect x="27.5910%" y="516" width="0.1190%" height="15" fill="rgb(208,77,27)" fg:x="133521" fg:w="576"/><text x="27.8410%" y="526.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:349) (13,216 samples, 2.73%)</title><rect x="24.9925%" y="404" width="2.7310%" height="15" fill="rgb(221,76,26)" fg:x="120946" fg:w="13216"/><text x="25.2425%" y="414.50">pr..</text></g><g><title>decorate_context (torch\utils\_contextlib.py:115) (13,203 samples, 2.73%)</title><rect x="24.9951%" y="420" width="2.7283%" height="15" fill="rgb(225,139,18)" fg:x="120959" fg:w="13203"/><text x="25.2451%" y="430.50">de..</text></g><g><title>_predict (policies.py:73) (1,719 samples, 0.36%)</title><rect x="27.3682%" y="436" width="0.3552%" height="15" fill="rgb(230,137,11)" fg:x="132443" fg:w="1719"/><text x="27.6182%" y="446.50"></text></g><g><title>_predict (stable_baselines3\sac\policies.py:353) (1,717 samples, 0.35%)</title><rect x="27.3686%" y="452" width="0.3548%" height="15" fill="rgb(212,28,1)" fg:x="132445" fg:w="1717"/><text x="27.6186%" y="462.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,693 samples, 0.35%)</title><rect x="27.3736%" y="468" width="0.3498%" height="15" fill="rgb(248,164,17)" fg:x="132469" fg:w="1693"/><text x="27.6236%" y="478.50"></text></g><g><title>forward (stable_baselines3\sac\policies.py:170) (649 samples, 0.13%)</title><rect x="27.5893%" y="484" width="0.1341%" height="15" fill="rgb(222,171,42)" fg:x="133513" fg:w="649"/><text x="27.8393%" y="494.50"></text></g><g><title>evaluate_policy (stable_baselines3\common\evaluation.py:88) (16,281 samples, 3.36%)</title><rect x="24.3961%" y="372" width="3.3643%" height="15" fill="rgb(243,84,45)" fg:x="118060" fg:w="16281"/><text x="24.6461%" y="382.50">eva..</text></g><g><title>predict (stable_baselines3\common\base_class.py:555) (16,276 samples, 3.36%)</title><rect x="24.3971%" y="388" width="3.3633%" height="15" fill="rgb(252,49,23)" fg:x="118065" fg:w="16276"/><text x="24.6471%" y="398.50">pre..</text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:58) (532 samples, 0.11%)</title><rect x="27.7627%" y="404" width="0.1099%" height="15" fill="rgb(215,19,7)" fg:x="134352" fg:w="532"/><text x="28.0127%" y="414.50"></text></g><g><title>evaluate_policy (stable_baselines3\common\evaluation.py:94) (728 samples, 0.15%)</title><rect x="27.7604%" y="372" width="0.1504%" height="15" fill="rgb(238,81,41)" fg:x="134341" fg:w="728"/><text x="28.0104%" y="382.50"></text></g><g><title>step (stable_baselines3\common\vec_env\base_vec_env.py:180) (720 samples, 0.15%)</title><rect x="27.7621%" y="388" width="0.1488%" height="15" fill="rgb(210,199,37)" fg:x="134349" fg:w="720"/><text x="28.0121%" y="398.50"></text></g><g><title>_on_step (stable_baselines3\common\callbacks.py:460) (17,067 samples, 3.53%)</title><rect x="24.3874%" y="356" width="3.5267%" height="15" fill="rgb(244,192,49)" fg:x="118018" fg:w="17067"/><text x="24.6374%" y="366.50">_on..</text></g><g><title>_on_step (callbacks\record_video.py:30) (501 samples, 0.10%)</title><rect x="27.9156%" y="388" width="0.1035%" height="15" fill="rgb(226,211,11)" fg:x="135092" fg:w="501"/><text x="28.1656%" y="398.50"></text></g><g><title>_on_step (callbacks\eval_in_log_folder_callback.py:34) (17,610 samples, 3.64%)</title><rect x="24.3874%" y="324" width="3.6390%" height="15" fill="rgb(236,162,54)" fg:x="118018" fg:w="17610"/><text x="24.6374%" y="334.50">_on_..</text></g><g><title>step_wrapper (callbacks\eval_in_log_folder_callback.py:28) (17,610 samples, 3.64%)</title><rect x="24.3874%" y="340" width="3.6390%" height="15" fill="rgb(220,229,9)" fg:x="118018" fg:w="17610"/><text x="24.6374%" y="350.50">step..</text></g><g><title>_on_step (stable_baselines3\common\callbacks.py:511) (536 samples, 0.11%)</title><rect x="27.9156%" y="356" width="0.1108%" height="15" fill="rgb(250,87,22)" fg:x="135092" fg:w="536"/><text x="28.1656%" y="366.50"></text></g><g><title>on_step (stable_baselines3\common\callbacks.py:104) (536 samples, 0.11%)</title><rect x="27.9156%" y="372" width="0.1108%" height="15" fill="rgb(239,43,17)" fg:x="135092" fg:w="536"/><text x="28.1656%" y="382.50"></text></g><g><title>_on_step (callbacks\record_video.py:30) (541 samples, 0.11%)</title><rect x="28.0863%" y="388" width="0.1118%" height="15" fill="rgb(231,177,25)" fg:x="135918" fg:w="541"/><text x="28.3363%" y="398.50"></text></g><g><title>_eval_step (callbacks\plan2explore_eval_callback.py:139) (562 samples, 0.12%)</title><rect x="28.0863%" y="356" width="0.1161%" height="15" fill="rgb(219,179,1)" fg:x="135918" fg:w="562"/><text x="28.3363%" y="366.50"></text></g><g><title>on_step (stable_baselines3\common\callbacks.py:104) (562 samples, 0.12%)</title><rect x="28.0863%" y="372" width="0.1161%" height="15" fill="rgb(238,219,53)" fg:x="135918" fg:w="562"/><text x="28.3363%" y="382.50"></text></g><g><title>children (torch\nn\modules\module.py:2173) (490 samples, 0.10%)</title><rect x="28.3700%" y="516" width="0.1013%" height="15" fill="rgb(232,167,36)" fg:x="137291" fg:w="490"/><text x="28.6200%" y="526.50"></text></g><g><title>train (torch\nn\modules\module.py:2287) (650 samples, 0.13%)</title><rect x="28.3684%" y="500" width="0.1343%" height="15" fill="rgb(244,19,51)" fg:x="137283" fg:w="650"/><text x="28.6184%" y="510.50"></text></g><g><title>train (torch\nn\modules\module.py:2287) (583 samples, 0.12%)</title><rect x="28.5967%" y="516" width="0.1205%" height="15" fill="rgb(224,6,22)" fg:x="138388" fg:w="583"/><text x="28.8467%" y="526.50"></text></g><g><title>children (torch\nn\modules\module.py:2173) (556 samples, 0.11%)</title><rect x="28.6023%" y="532" width="0.1149%" height="15" fill="rgb(224,145,5)" fg:x="138415" fg:w="556"/><text x="28.8523%" y="542.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (1,047 samples, 0.22%)</title><rect x="28.5027%" y="500" width="0.2164%" height="15" fill="rgb(234,130,49)" fg:x="137933" fg:w="1047"/><text x="28.7527%" y="510.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:344) (2,433 samples, 0.50%)</title><rect x="28.2167%" y="404" width="0.5028%" height="15" fill="rgb(254,6,2)" fg:x="136549" fg:w="2433"/><text x="28.4667%" y="414.50"></text></g><g><title>set_training_mode (stable_baselines3\common\policies.py:209) (2,432 samples, 0.50%)</title><rect x="28.2169%" y="420" width="0.5026%" height="15" fill="rgb(208,96,46)" fg:x="136550" fg:w="2432"/><text x="28.4669%" y="430.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (2,359 samples, 0.49%)</title><rect x="28.2320%" y="436" width="0.4875%" height="15" fill="rgb(239,3,39)" fg:x="136623" fg:w="2359"/><text x="28.4820%" y="446.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (2,279 samples, 0.47%)</title><rect x="28.2485%" y="452" width="0.4709%" height="15" fill="rgb(233,210,1)" fg:x="136703" fg:w="2279"/><text x="28.4985%" y="462.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (2,091 samples, 0.43%)</title><rect x="28.2874%" y="468" width="0.4321%" height="15" fill="rgb(244,137,37)" fg:x="136891" fg:w="2091"/><text x="28.5374%" y="478.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (1,802 samples, 0.37%)</title><rect x="28.3471%" y="484" width="0.3724%" height="15" fill="rgb(240,136,2)" fg:x="137180" fg:w="1802"/><text x="28.5971%" y="494.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:346) (1,523 samples, 0.31%)</title><rect x="28.7194%" y="404" width="0.3147%" height="15" fill="rgb(239,18,37)" fg:x="138982" fg:w="1523"/><text x="28.9694%" y="414.50"></text></g><g><title>obs_to_tensor (stable_baselines3\common\policies.py:268) (1,345 samples, 0.28%)</title><rect x="28.7562%" y="420" width="0.2779%" height="15" fill="rgb(218,185,22)" fg:x="139160" fg:w="1345"/><text x="29.0062%" y="430.50"></text></g><g><title>obs_as_tensor (stable_baselines3\common\utils.py:485) (1,101 samples, 0.23%)</title><rect x="28.8066%" y="436" width="0.2275%" height="15" fill="rgb(225,218,4)" fg:x="139404" fg:w="1101"/><text x="29.0566%" y="446.50"></text></g><g><title>&lt;dictcomp&gt; (stable_baselines3\common\utils.py:485) (1,099 samples, 0.23%)</title><rect x="28.8071%" y="452" width="0.2271%" height="15" fill="rgb(230,182,32)" fg:x="139406" fg:w="1099"/><text x="29.0571%" y="462.50"></text></g><g><title>encode (networks.py:39) (27,697 samples, 5.72%)</title><rect x="29.0796%" y="500" width="5.7233%" height="15" fill="rgb(242,56,43)" fg:x="140725" fg:w="27697"/><text x="29.3296%" y="510.50">encode ..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (27,685 samples, 5.72%)</title><rect x="29.0821%" y="516" width="5.7209%" height="15" fill="rgb(233,99,24)" fg:x="140737" fg:w="27685"/><text x="29.3321%" y="526.50">_call_i..</text></g><g><title>forward (torch\nn\modules\rnn.py:998) (27,515 samples, 5.69%)</title><rect x="29.1172%" y="532" width="5.6857%" height="15" fill="rgb(234,209,42)" fg:x="140907" fg:w="27515"/><text x="29.3672%" y="542.50">forward..</text></g><g><title>encode (networks.py:41) (717 samples, 0.15%)</title><rect x="34.8069%" y="500" width="0.1482%" height="15" fill="rgb(227,7,12)" fg:x="168441" fg:w="717"/><text x="35.0569%" y="510.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (690 samples, 0.14%)</title><rect x="34.8125%" y="516" width="0.1426%" height="15" fill="rgb(245,203,43)" fg:x="168468" fg:w="690"/><text x="35.0625%" y="526.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (678 samples, 0.14%)</title><rect x="34.8150%" y="532" width="0.1401%" height="15" fill="rgb(238,205,33)" fg:x="168480" fg:w="678"/><text x="35.0650%" y="542.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (657 samples, 0.14%)</title><rect x="34.8193%" y="548" width="0.1358%" height="15" fill="rgb(231,56,7)" fg:x="168501" fg:w="657"/><text x="35.0693%" y="558.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (552 samples, 0.11%)</title><rect x="34.8410%" y="564" width="0.1141%" height="15" fill="rgb(244,186,29)" fg:x="168606" fg:w="552"/><text x="35.0910%" y="574.50"></text></g><g><title>__init__ (torch\distributions\distribution.py:60) (512 samples, 0.11%)</title><rect x="35.1251%" y="532" width="0.1058%" height="15" fill="rgb(234,111,31)" fg:x="169981" fg:w="512"/><text x="35.3751%" y="542.50"></text></g><g><title>check (torch\distributions\constraints.py:406) (512 samples, 0.11%)</title><rect x="35.1251%" y="548" width="0.1058%" height="15" fill="rgb(241,149,10)" fg:x="169981" fg:w="512"/><text x="35.3751%" y="558.50"></text></g><g><title>encode (networks.py:46) (828 samples, 0.17%)</title><rect x="35.0821%" y="500" width="0.1711%" height="15" fill="rgb(249,206,44)" fg:x="169773" fg:w="828"/><text x="35.3321%" y="510.50"></text></g><g><title>__init__ (torch\distributions\categorical.py:66) (650 samples, 0.13%)</title><rect x="35.1189%" y="516" width="0.1343%" height="15" fill="rgb(251,153,30)" fg:x="169951" fg:w="650"/><text x="35.3689%" y="526.50"></text></g><g><title>&lt;listcomp&gt; (networks.py:47) (562 samples, 0.12%)</title><rect x="35.2539%" y="516" width="0.1161%" height="15" fill="rgb(239,152,38)" fg:x="170604" fg:w="562"/><text x="35.5039%" y="526.50"></text></g><g><title>forward (networks.py:30) (30,610 samples, 6.33%)</title><rect x="29.0505%" y="468" width="6.3253%" height="15" fill="rgb(249,139,47)" fg:x="140584" fg:w="30610"/><text x="29.3005%" y="478.50">forward ..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (30,592 samples, 6.32%)</title><rect x="29.0542%" y="484" width="6.3216%" height="15" fill="rgb(244,64,35)" fg:x="140602" fg:w="30592"/><text x="29.3042%" y="494.50">decorate..</text></g><g><title>encode (networks.py:47) (593 samples, 0.12%)</title><rect x="35.2532%" y="500" width="0.1225%" height="15" fill="rgb(216,46,15)" fg:x="170601" fg:w="593"/><text x="35.5032%" y="510.50"></text></g><g><title>_predict (policies.py:105) (31,145 samples, 6.44%)</title><rect x="29.0424%" y="420" width="6.4358%" height="15" fill="rgb(250,74,19)" fg:x="140545" fg:w="31145"/><text x="29.2924%" y="430.50">_predict..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (31,129 samples, 6.43%)</title><rect x="29.0457%" y="436" width="6.4325%" height="15" fill="rgb(249,42,33)" fg:x="140561" fg:w="31129"/><text x="29.2957%" y="446.50">_call_im..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (31,111 samples, 6.43%)</title><rect x="29.0494%" y="452" width="6.4288%" height="15" fill="rgb(242,149,17)" fg:x="140579" fg:w="31111"/><text x="29.2994%" y="462.50">decorate..</text></g><g><title>_predict (policies.py:64) (492 samples, 0.10%)</title><rect x="35.4969%" y="452" width="0.1017%" height="15" fill="rgb(244,29,21)" fg:x="171780" fg:w="492"/><text x="35.7469%" y="462.50"></text></g><g><title>_predict (policies.py:66) (684 samples, 0.14%)</title><rect x="35.6054%" y="452" width="0.1413%" height="15" fill="rgb(220,130,37)" fg:x="172305" fg:w="684"/><text x="35.8554%" y="462.50"></text></g><g><title>_predict (policies.py:69) (762 samples, 0.16%)</title><rect x="35.7469%" y="452" width="0.1575%" height="15" fill="rgb(211,67,2)" fg:x="172990" fg:w="762"/><text x="35.9969%" y="462.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:13) (639 samples, 0.13%)</title><rect x="35.9783%" y="484" width="0.1320%" height="15" fill="rgb(235,68,52)" fg:x="174110" fg:w="639"/><text x="36.2283%" y="494.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:13) (654 samples, 0.14%)</title><rect x="36.2397%" y="532" width="0.1351%" height="15" fill="rgb(246,142,3)" fg:x="175375" fg:w="654"/><text x="36.4897%" y="542.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1495) (961 samples, 0.20%)</title><rect x="38.9583%" y="596" width="0.1986%" height="15" fill="rgb(241,25,7)" fg:x="188531" fg:w="961"/><text x="39.2083%" y="606.50"></text></g><g><title>relu (torch\nn\functional.py:1457) (7,771 samples, 1.61%)</title><rect x="39.2889%" y="628" width="1.6058%" height="15" fill="rgb(242,119,39)" fg:x="190131" fg:w="7771"/><text x="39.5389%" y="638.50"></text></g><g><title>forward (torch\nn\modules\activation.py:103) (8,042 samples, 1.66%)</title><rect x="39.2389%" y="612" width="1.6618%" height="15" fill="rgb(241,98,45)" fg:x="189889" fg:w="8042"/><text x="39.4889%" y="622.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (72,949 samples, 15.07%)</title><rect x="38.8186%" y="580" width="15.0743%" height="15" fill="rgb(254,28,30)" fg:x="187855" fg:w="72949"/><text x="39.0686%" y="590.50">forward (torch\nn\modul..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (71,093 samples, 14.69%)</title><rect x="39.2022%" y="596" width="14.6908%" height="15" fill="rgb(241,142,54)" fg:x="189711" fg:w="71093"/><text x="39.4522%" y="606.50">_call_impl (torch\nn\m..</text></g><g><title>forward (torch\nn\modules\linear.py:114) (62,873 samples, 12.99%)</title><rect x="40.9008%" y="612" width="12.9922%" height="15" fill="rgb(222,85,15)" fg:x="197931" fg:w="62873"/><text x="41.1508%" y="622.50">forward (torch\nn\mo..</text></g><g><title>forward (networks.py:91) (84,661 samples, 17.49%)</title><rect x="36.3997%" y="548" width="17.4945%" height="15" fill="rgb(210,85,47)" fg:x="176149" fg:w="84661"/><text x="36.6497%" y="558.50">forward (networks.py:91)</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (73,272 samples, 15.14%)</title><rect x="38.7531%" y="564" width="15.1410%" height="15" fill="rgb(224,206,25)" fg:x="187538" fg:w="73272"/><text x="39.0031%" y="574.50">_call_impl (torch\nn\mo..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1495) (930 samples, 0.19%)</title><rect x="56.7171%" y="596" width="0.1922%" height="15" fill="rgb(243,201,19)" fg:x="274471" fg:w="930"/><text x="56.9671%" y="606.50"></text></g><g><title>relu (torch\nn\functional.py:1457) (7,764 samples, 1.60%)</title><rect x="57.0324%" y="628" width="1.6044%" height="15" fill="rgb(236,59,4)" fg:x="275997" fg:w="7764"/><text x="57.2824%" y="638.50"></text></g><g><title>forward (torch\nn\modules\activation.py:103) (8,025 samples, 1.66%)</title><rect x="56.9824%" y="612" width="1.6583%" height="15" fill="rgb(254,179,45)" fg:x="275755" fg:w="8025"/><text x="57.2324%" y="622.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (75,038 samples, 15.51%)</title><rect x="56.5832%" y="580" width="15.5060%" height="15" fill="rgb(226,14,10)" fg:x="273823" fg:w="75038"/><text x="56.8332%" y="590.50">forward (torch\nn\module..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (73,249 samples, 15.14%)</title><rect x="56.9529%" y="596" width="15.1363%" height="15" fill="rgb(244,27,41)" fg:x="275612" fg:w="73249"/><text x="57.2029%" y="606.50">_call_impl (torch\nn\mo..</text></g><g><title>forward (torch\nn\modules\linear.py:114) (65,081 samples, 13.45%)</title><rect x="58.6407%" y="612" width="13.4484%" height="15" fill="rgb(235,35,32)" fg:x="283780" fg:w="65081"/><text x="58.8907%" y="622.50">forward (torch\nn\mo..</text></g><g><title>forward (networks.py:93) (88,043 samples, 18.19%)</title><rect x="53.8971%" y="548" width="18.1933%" height="15" fill="rgb(218,68,31)" fg:x="260824" fg:w="88043"/><text x="54.1471%" y="558.50">forward (networks.py:93)</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (75,338 samples, 15.57%)</title><rect x="56.5224%" y="564" width="15.5680%" height="15" fill="rgb(207,120,37)" fg:x="273529" fg:w="75338"/><text x="56.7724%" y="574.50">_call_impl (torch\nn\mod..</text></g><g><title>forward (networks.py:49) (173,893 samples, 35.93%)</title><rect x="36.1596%" y="500" width="35.9335%" height="15" fill="rgb(227,98,0)" fg:x="174987" fg:w="173893"/><text x="36.4096%" y="510.50">forward (networks.py:49)</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (173,550 samples, 35.86%)</title><rect x="36.2304%" y="516" width="35.8626%" height="15" fill="rgb(207,7,3)" fg:x="175330" fg:w="173550"/><text x="36.4804%" y="526.50">_call_impl (torch\nn\modules\module.py:1501)</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (172,851 samples, 35.72%)</title><rect x="36.3749%" y="532" width="35.7182%" height="15" fill="rgb(206,98,19)" fg:x="176029" fg:w="172851"/><text x="36.6249%" y="542.50">decorate_autocast (torch\amp\autocast_mode.py:14)</text></g><g><title>collate (torch\utils\data\_utils\collate.py:119) (2,218 samples, 0.46%)</title><rect x="72.2489%" y="564" width="0.4583%" height="15" fill="rgb(217,5,26)" fg:x="349634" fg:w="2218"/><text x="72.4989%" y="574.50"></text></g><g><title>collate_tensor_fn (torch\utils\data\_utils\collate.py:162) (2,135 samples, 0.44%)</title><rect x="72.2660%" y="580" width="0.4412%" height="15" fill="rgb(235,190,38)" fg:x="349717" fg:w="2135"/><text x="72.5160%" y="590.50"></text></g><g><title>forward (networks.py:50) (2,973 samples, 0.61%)</title><rect x="72.0931%" y="500" width="0.6143%" height="15" fill="rgb(247,86,24)" fg:x="348880" fg:w="2973"/><text x="72.3431%" y="510.50"></text></g><g><title>default_collate (torch\utils\data\_utils\collate.py:264) (2,963 samples, 0.61%)</title><rect x="72.0951%" y="516" width="0.6123%" height="15" fill="rgb(205,101,16)" fg:x="348890" fg:w="2963"/><text x="72.3451%" y="526.50"></text></g><g><title>collate (torch\utils\data\_utils\collate.py:142) (2,331 samples, 0.48%)</title><rect x="72.2257%" y="532" width="0.4817%" height="15" fill="rgb(246,168,33)" fg:x="349522" fg:w="2331"/><text x="72.4757%" y="542.50"></text></g><g><title>&lt;listcomp&gt; (torch\utils\data\_utils\collate.py:142) (2,321 samples, 0.48%)</title><rect x="72.2278%" y="548" width="0.4796%" height="15" fill="rgb(231,114,1)" fg:x="349532" fg:w="2321"/><text x="72.4778%" y="558.50"></text></g><g><title>_predict (policies.py:81) (180,022 samples, 37.20%)</title><rect x="35.9254%" y="452" width="37.2000%" height="15" fill="rgb(207,184,53)" fg:x="173854" fg:w="180022"/><text x="36.1754%" y="462.50">_predict (policies.py:81)</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (179,788 samples, 37.15%)</title><rect x="35.9738%" y="468" width="37.1517%" height="15" fill="rgb(224,95,51)" fg:x="174088" fg:w="179788"/><text x="36.2238%" y="478.50">_call_impl (torch\nn\modules\module.py:1501)</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (179,127 samples, 37.02%)</title><rect x="36.1104%" y="484" width="37.0151%" height="15" fill="rgb(212,188,45)" fg:x="174749" fg:w="179127"/><text x="36.3604%" y="494.50">decorate_autocast (torch\amp\autocast_mode.py:14)</text></g><g><title>forward (networks.py:55) (2,023 samples, 0.42%)</title><rect x="72.7074%" y="500" width="0.4180%" height="15" fill="rgb(223,154,38)" fg:x="351853" fg:w="2023"/><text x="72.9574%" y="510.50"></text></g><g><title>apply_function_to_type (utils.py:31) (1,966 samples, 0.41%)</title><rect x="72.7192%" y="516" width="0.4063%" height="15" fill="rgb(251,22,52)" fg:x="351910" fg:w="1966"/><text x="72.9692%" y="526.50"></text></g><g><title>&lt;listcomp&gt; (utils.py:31) (1,959 samples, 0.40%)</title><rect x="72.7206%" y="532" width="0.4048%" height="15" fill="rgb(229,209,22)" fg:x="351917" fg:w="1959"/><text x="72.9706%" y="542.50"></text></g><g><title>apply_function_to_type (utils.py:22) (1,912 samples, 0.40%)</title><rect x="72.7304%" y="548" width="0.3951%" height="15" fill="rgb(234,138,34)" fg:x="351964" fg:w="1912"/><text x="72.9804%" y="558.50"></text></g><g><title>&lt;lambda&gt; (networks.py:55) (1,910 samples, 0.39%)</title><rect x="72.7308%" y="564" width="0.3947%" height="15" fill="rgb(212,95,11)" fg:x="351966" fg:w="1910"/><text x="72.9808%" y="574.50"></text></g><g><title>_predict (policies.py:83) (1,170 samples, 0.24%)</title><rect x="73.1279%" y="452" width="0.2418%" height="15" fill="rgb(240,179,47)" fg:x="353888" fg:w="1170"/><text x="73.3779%" y="462.50"></text></g><g><title>_predict (policies.py:84) (592 samples, 0.12%)</title><rect x="73.3697%" y="452" width="0.1223%" height="15" fill="rgb(240,163,11)" fg:x="355058" fg:w="592"/><text x="73.6197%" y="462.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:349) (215,517 samples, 44.53%)</title><rect x="29.0379%" y="404" width="44.5347%" height="15" fill="rgb(236,37,12)" fg:x="140523" fg:w="215517"/><text x="29.2879%" y="414.50">predict (stable_baselines3\common\policies.py:349)</text></g><g><title>_predict (policies.py:107) (184,334 samples, 38.09%)</title><rect x="35.4816%" y="420" width="38.0910%" height="15" fill="rgb(232,164,16)" fg:x="171706" fg:w="184334"/><text x="35.7316%" y="430.50">_predict (policies.py:107)</text></g><g><title>decorate_context (torch\utils\_contextlib.py:115) (184,306 samples, 38.09%)</title><rect x="35.4874%" y="436" width="38.0853%" height="15" fill="rgb(244,205,15)" fg:x="171734" fg:w="184306"/><text x="35.7374%" y="446.50">decorate_context (torch\utils\_contextlib.py:115)</text></g><g><title>evaluate_policy (stable_baselines3\common\evaluation.py:88) (219,701 samples, 45.40%)</title><rect x="28.2117%" y="372" width="45.3993%" height="15" fill="rgb(223,117,47)" fg:x="136525" fg:w="219701"/><text x="28.4617%" y="382.50">evaluate_policy (stable_baselines3\common\evaluation.py:88)</text></g><g><title>predict (stable_baselines3\common\base_class.py:555) (219,699 samples, 45.40%)</title><rect x="28.2121%" y="388" width="45.3989%" height="15" fill="rgb(244,107,35)" fg:x="136527" fg:w="219699"/><text x="28.4621%" y="398.50">predict (stable_baselines3\common\base_class.py:555)</text></g><g><title>step (gymnasium\wrappers\time_limit.py:57) (492 samples, 0.10%)</title><rect x="73.6162%" y="436" width="0.1017%" height="15" fill="rgb(205,140,8)" fg:x="356251" fg:w="492"/><text x="73.8662%" y="446.50"></text></g><g><title>step (wrappers\cemrl_wrapper.py:65) (496 samples, 0.10%)</title><rect x="73.6156%" y="420" width="0.1025%" height="15" fill="rgb(228,84,46)" fg:x="356248" fg:w="496"/><text x="73.8656%" y="430.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:58) (614 samples, 0.13%)</title><rect x="73.6140%" y="404" width="0.1269%" height="15" fill="rgb(254,188,9)" fg:x="356240" fg:w="614"/><text x="73.8640%" y="414.50"></text></g><g><title>evaluate_policy (stable_baselines3\common\evaluation.py:94) (827 samples, 0.17%)</title><rect x="73.6111%" y="372" width="0.1709%" height="15" fill="rgb(206,112,54)" fg:x="356226" fg:w="827"/><text x="73.8611%" y="382.50"></text></g><g><title>step (stable_baselines3\common\vec_env\base_vec_env.py:180) (817 samples, 0.17%)</title><rect x="73.6131%" y="388" width="0.1688%" height="15" fill="rgb(216,84,49)" fg:x="356236" fg:w="817"/><text x="73.8631%" y="398.50"></text></g><g><title>_on_step (callbacks\plan2explore_eval_callback.py:146) (221,449 samples, 45.76%)</title><rect x="28.0264%" y="324" width="45.7605%" height="15" fill="rgb(214,194,35)" fg:x="135628" fg:w="221449"/><text x="28.2764%" y="334.50">_on_step (callbacks\plan2explore_eval_callback.py:146)</text></g><g><title>step_wrapper (callbacks\eval_in_log_folder_callback.py:28) (221,449 samples, 45.76%)</title><rect x="28.0264%" y="340" width="45.7605%" height="15" fill="rgb(249,28,3)" fg:x="135628" fg:w="221449"/><text x="28.2764%" y="350.50">step_wrapper (callbacks\eval_in_log_folder_callback.py:28)</text></g><g><title>_eval_step (callbacks\plan2explore_eval_callback.py:88) (220,597 samples, 45.58%)</title><rect x="28.2024%" y="356" width="45.5845%" height="15" fill="rgb(222,56,52)" fg:x="136480" fg:w="220597"/><text x="28.4524%" y="366.50">_eval_step (callbacks\plan2explore_eval_callback.py:88)</text></g><g><title>_on_step (stable_baselines3\common\callbacks.py:208) (239,244 samples, 49.44%)</title><rect x="24.3874%" y="292" width="49.4377%" height="15" fill="rgb(245,217,50)" fg:x="118018" fg:w="239244"/><text x="24.6374%" y="302.50">_on_step (stable_baselines3\common\callbacks.py:208)</text></g><g><title>on_step (stable_baselines3\common\callbacks.py:104) (239,244 samples, 49.44%)</title><rect x="24.3874%" y="308" width="49.4377%" height="15" fill="rgb(213,201,24)" fg:x="118018" fg:w="239244"/><text x="24.6374%" y="318.50">on_step (stable_baselines3\common\callbacks.py:104)</text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:552) (239,247 samples, 49.44%)</title><rect x="24.3874%" y="228" width="49.4383%" height="15" fill="rgb(248,116,28)" fg:x="118018" fg:w="239247"/><text x="24.6374%" y="238.50">collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:552)</text></g><g><title>on_step (stable_baselines3\common\callbacks.py:104) (239,247 samples, 49.44%)</title><rect x="24.3874%" y="244" width="49.4383%" height="15" fill="rgb(219,72,43)" fg:x="118018" fg:w="239247"/><text x="24.6374%" y="254.50">on_step (stable_baselines3\common\callbacks.py:104)</text></g><g><title>_on_step (stable_baselines3\common\callbacks.py:208) (239,247 samples, 49.44%)</title><rect x="24.3874%" y="260" width="49.4383%" height="15" fill="rgb(209,138,14)" fg:x="118018" fg:w="239247"/><text x="24.6374%" y="270.50">_on_step (stable_baselines3\common\callbacks.py:208)</text></g><g><title>on_step (stable_baselines3\common\callbacks.py:104) (239,247 samples, 49.44%)</title><rect x="24.3874%" y="276" width="49.4383%" height="15" fill="rgb(222,18,33)" fg:x="118018" fg:w="239247"/><text x="24.6374%" y="286.50">on_step (stable_baselines3\common\callbacks.py:104)</text></g><g><title>learn (stable_baselines3\common\off_policy_algorithm.py:312) (246,110 samples, 50.86%)</title><rect x="22.9882%" y="212" width="50.8565%" height="15" fill="rgb(213,199,7)" fg:x="111247" fg:w="246110"/><text x="23.2382%" y="222.50">learn (stable_baselines3\common\off_policy_algorithm.py:312)</text></g><g><title>train (torch\nn\modules\module.py:2288) (905 samples, 0.19%)</title><rect x="73.9064%" y="308" width="0.1870%" height="15" fill="rgb(250,110,10)" fg:x="357655" fg:w="905"/><text x="74.1564%" y="318.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (789 samples, 0.16%)</title><rect x="73.9303%" y="324" width="0.1630%" height="15" fill="rgb(248,123,6)" fg:x="357771" fg:w="789"/><text x="74.1803%" y="334.50"></text></g><g><title>reconstruction_training_step (cemrl.py:120) (1,053 samples, 0.22%)</title><rect x="73.8762%" y="244" width="0.2176%" height="15" fill="rgb(206,91,31)" fg:x="357509" fg:w="1053"/><text x="74.1262%" y="254.50"></text></g><g><title>set_training_mode (stable_baselines3\common\policies.py:209) (1,051 samples, 0.22%)</title><rect x="73.8766%" y="260" width="0.2172%" height="15" fill="rgb(211,154,13)" fg:x="357511" fg:w="1051"/><text x="74.1266%" y="270.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (1,021 samples, 0.21%)</title><rect x="73.8828%" y="276" width="0.2110%" height="15" fill="rgb(225,148,7)" fg:x="357541" fg:w="1021"/><text x="74.1328%" y="286.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (986 samples, 0.20%)</title><rect x="73.8900%" y="292" width="0.2037%" height="15" fill="rgb(220,160,43)" fg:x="357576" fg:w="986"/><text x="74.1400%" y="302.50"></text></g><g><title>reconstruction_training_step (cemrl.py:121) (1,072 samples, 0.22%)</title><rect x="74.0938%" y="244" width="0.2215%" height="15" fill="rgb(213,52,39)" fg:x="358562" fg:w="1072"/><text x="74.3438%" y="254.50"></text></g><g><title>get_encoder_context (buffers.py:143) (496 samples, 0.10%)</title><rect x="74.3434%" y="260" width="0.1025%" height="15" fill="rgb(243,137,7)" fg:x="359770" fg:w="496"/><text x="74.5934%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:144) (485 samples, 0.10%)</title><rect x="74.4459%" y="260" width="0.1002%" height="15" fill="rgb(230,79,13)" fg:x="360266" fg:w="485"/><text x="74.6959%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:154) (747 samples, 0.15%)</title><rect x="74.6982%" y="260" width="0.1544%" height="15" fill="rgb(247,105,23)" fg:x="361487" fg:w="747"/><text x="74.9482%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:155) (706 samples, 0.15%)</title><rect x="74.8526%" y="260" width="0.1459%" height="15" fill="rgb(223,179,41)" fg:x="362234" fg:w="706"/><text x="75.1026%" y="270.50"></text></g><g><title>reconstruction_training_step (cemrl.py:123) (3,666 samples, 0.76%)</title><rect x="74.3153%" y="244" width="0.7575%" height="15" fill="rgb(218,9,34)" fg:x="359634" fg:w="3666"/><text x="74.5653%" y="254.50"></text></g><g><title>get_decoder_targets (buffers.py:180) (762 samples, 0.16%)</title><rect x="75.0782%" y="260" width="0.1575%" height="15" fill="rgb(222,106,8)" fg:x="363326" fg:w="762"/><text x="75.3282%" y="270.50"></text></g><g><title>get_decoder_targets (buffers.py:184) (560 samples, 0.12%)</title><rect x="75.2396%" y="260" width="0.1157%" height="15" fill="rgb(211,220,0)" fg:x="364107" fg:w="560"/><text x="75.4896%" y="270.50"></text></g><g><title>get_decoder_targets (buffers.py:185) (647 samples, 0.13%)</title><rect x="75.3553%" y="260" width="0.1337%" height="15" fill="rgb(229,52,16)" fg:x="364667" fg:w="647"/><text x="75.6053%" y="270.50"></text></g><g><title>get_decoder_targets (buffers.py:188) (6,049 samples, 1.25%)</title><rect x="75.4903%" y="260" width="1.2500%" height="15" fill="rgb(212,155,18)" fg:x="365320" fg:w="6049"/><text x="75.7403%" y="270.50"></text></g><g><title>to_torch (stable_baselines3\common\buffers.py:135) (1,499 samples, 0.31%)</title><rect x="76.4305%" y="276" width="0.3098%" height="15" fill="rgb(242,21,14)" fg:x="369870" fg:w="1499"/><text x="76.6805%" y="286.50"></text></g><g><title>get_decoder_targets (buffers.py:189) (6,142 samples, 1.27%)</title><rect x="76.7402%" y="260" width="1.2692%" height="15" fill="rgb(222,19,48)" fg:x="371369" fg:w="6142"/><text x="76.9902%" y="270.50"></text></g><g><title>to_torch (stable_baselines3\common\buffers.py:135) (1,560 samples, 0.32%)</title><rect x="77.6871%" y="276" width="0.3224%" height="15" fill="rgb(232,45,27)" fg:x="375951" fg:w="1560"/><text x="77.9371%" y="286.50"></text></g><g><title>get_decoder_targets (buffers.py:190) (4,137 samples, 0.85%)</title><rect x="78.0094%" y="260" width="0.8549%" height="15" fill="rgb(249,103,42)" fg:x="377511" fg:w="4137"/><text x="78.2594%" y="270.50"></text></g><g><title>to_torch (stable_baselines3\common\buffers.py:135) (600 samples, 0.12%)</title><rect x="78.7403%" y="276" width="0.1240%" height="15" fill="rgb(246,81,33)" fg:x="381048" fg:w="600"/><text x="78.9903%" y="286.50"></text></g><g><title>get_decoder_targets (buffers.py:191) (1,044 samples, 0.22%)</title><rect x="78.8643%" y="260" width="0.2157%" height="15" fill="rgb(252,33,42)" fg:x="381648" fg:w="1044"/><text x="79.1143%" y="270.50"></text></g><g><title>reconstruction_training_step (cemrl.py:126) (20,304 samples, 4.20%)</title><rect x="75.0766%" y="244" width="4.1956%" height="15" fill="rgb(209,212,41)" fg:x="363318" fg:w="20304"/><text x="75.3266%" y="254.50">recon..</text></g><g><title>get_decoder_targets (buffers.py:192) (930 samples, 0.19%)</title><rect x="79.0800%" y="260" width="0.1922%" height="15" fill="rgb(207,154,6)" fg:x="382692" fg:w="930"/><text x="79.3300%" y="270.50"></text></g><g><title>encode (networks.py:39) (6,096 samples, 1.26%)</title><rect x="79.3036%" y="276" width="1.2597%" height="15" fill="rgb(223,64,47)" fg:x="383774" fg:w="6096"/><text x="79.5536%" y="286.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (6,082 samples, 1.26%)</title><rect x="79.3065%" y="292" width="1.2568%" height="15" fill="rgb(211,161,38)" fg:x="383788" fg:w="6082"/><text x="79.5565%" y="302.50"></text></g><g><title>forward (torch\nn\modules\rnn.py:998) (5,982 samples, 1.24%)</title><rect x="79.3272%" y="308" width="1.2361%" height="15" fill="rgb(219,138,40)" fg:x="383888" fg:w="5982"/><text x="79.5772%" y="318.50"></text></g><g><title>reconstruction_training_step (cemrl.py:131) (7,255 samples, 1.50%)</title><rect x="79.2875%" y="244" width="1.4992%" height="15" fill="rgb(241,228,46)" fg:x="383696" fg:w="7255"/><text x="79.5375%" y="254.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (7,238 samples, 1.50%)</title><rect x="79.2910%" y="260" width="1.4957%" height="15" fill="rgb(223,209,38)" fg:x="383713" fg:w="7238"/><text x="79.5410%" y="270.50"></text></g><g><title>forward (torch\nn\modules\activation.py:103) (6,686 samples, 1.38%)</title><rect x="81.1952%" y="404" width="1.3816%" height="15" fill="rgb(236,164,45)" fg:x="392928" fg:w="6686"/><text x="81.4452%" y="414.50"></text></g><g><title>relu (torch\nn\functional.py:1457) (6,621 samples, 1.37%)</title><rect x="81.2086%" y="420" width="1.3682%" height="15" fill="rgb(231,15,5)" fg:x="392993" fg:w="6621"/><text x="81.4586%" y="430.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (37,674 samples, 7.79%)</title><rect x="81.1239%" y="372" width="7.7850%" height="15" fill="rgb(252,35,15)" fg:x="392583" fg:w="37674"/><text x="81.3739%" y="382.50">forward (to..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (37,355 samples, 7.72%)</title><rect x="81.1898%" y="388" width="7.7191%" height="15" fill="rgb(248,181,18)" fg:x="392902" fg:w="37355"/><text x="81.4398%" y="398.50">_call_impl ..</text></g><g><title>forward (torch\nn\modules\linear.py:114) (30,643 samples, 6.33%)</title><rect x="82.5768%" y="404" width="6.3321%" height="15" fill="rgb(233,39,42)" fg:x="399614" fg:w="30643"/><text x="82.8268%" y="414.50">forward ..</text></g><g><title>forward (networks.py:91) (38,669 samples, 7.99%)</title><rect x="80.9185%" y="340" width="7.9906%" height="15" fill="rgb(238,110,33)" fg:x="391589" fg:w="38669"/><text x="81.1685%" y="350.50">forward (ne..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (37,699 samples, 7.79%)</title><rect x="81.1190%" y="356" width="7.7902%" height="15" fill="rgb(233,195,10)" fg:x="392559" fg:w="37699"/><text x="81.3690%" y="366.50">_call_impl ..</text></g><g><title>relu (torch\nn\functional.py:1457) (6,614 samples, 1.37%)</title><rect x="89.3340%" y="420" width="1.3667%" height="15" fill="rgb(254,105,3)" fg:x="432314" fg:w="6614"/><text x="89.5840%" y="430.50"></text></g><g><title>forward (torch\nn\modules\activation.py:103) (6,676 samples, 1.38%)</title><rect x="89.3214%" y="404" width="1.3795%" height="15" fill="rgb(221,225,9)" fg:x="432253" fg:w="6676"/><text x="89.5714%" y="414.50"></text></g><g><title>forward (networks.py:93) (39,437 samples, 8.15%)</title><rect x="88.9091%" y="340" width="8.1493%" height="15" fill="rgb(224,227,45)" fg:x="430258" fg:w="39437"/><text x="89.1591%" y="350.50">forward (ne..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (37,827 samples, 7.82%)</title><rect x="89.2418%" y="356" width="7.8166%" height="15" fill="rgb(229,198,43)" fg:x="431868" fg:w="37827"/><text x="89.4918%" y="366.50">_call_impl ..</text></g><g><title>forward (torch\nn\modules\container.py:217) (37,785 samples, 7.81%)</title><rect x="89.2505%" y="372" width="7.8079%" height="15" fill="rgb(206,209,35)" fg:x="431910" fg:w="37785"/><text x="89.5005%" y="382.50">forward (to..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (37,465 samples, 7.74%)</title><rect x="89.3166%" y="388" width="7.7418%" height="15" fill="rgb(245,195,53)" fg:x="432230" fg:w="37465"/><text x="89.5666%" y="398.50">_call_impl ..</text></g><g><title>forward (torch\nn\modules\linear.py:114) (30,766 samples, 6.36%)</title><rect x="90.7009%" y="404" width="6.3575%" height="15" fill="rgb(240,92,26)" fg:x="438929" fg:w="30766"/><text x="90.9509%" y="414.50">forward ..</text></g><g><title>forward (networks.py:49) (78,228 samples, 16.17%)</title><rect x="80.8935%" y="292" width="16.1651%" height="15" fill="rgb(207,40,23)" fg:x="391468" fg:w="78228"/><text x="81.1435%" y="302.50">forward (networks.py:49)</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (78,193 samples, 16.16%)</title><rect x="80.9008%" y="308" width="16.1579%" height="15" fill="rgb(223,111,35)" fg:x="391503" fg:w="78193"/><text x="81.1508%" y="318.50">_call_impl (torch\nn\modu..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (78,116 samples, 16.14%)</title><rect x="80.9167%" y="324" width="16.1420%" height="15" fill="rgb(229,147,28)" fg:x="391580" fg:w="78116"/><text x="81.1667%" y="334.50">decorate_autocast (torch\..</text></g><g><title>reconstruction_training_step (cemrl.py:150) (78,580 samples, 16.24%)</title><rect x="80.8828%" y="244" width="16.2379%" height="15" fill="rgb(211,29,28)" fg:x="391416" fg:w="78580"/><text x="81.1328%" y="254.50">reconstruction_training_s..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (78,569 samples, 16.24%)</title><rect x="80.8850%" y="260" width="16.2356%" height="15" fill="rgb(228,72,33)" fg:x="391427" fg:w="78569"/><text x="81.1350%" y="270.50">_call_impl (torch\nn\modu..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (78,559 samples, 16.23%)</title><rect x="80.8871%" y="276" width="16.2335%" height="15" fill="rgb(205,214,31)" fg:x="391437" fg:w="78559"/><text x="81.1371%" y="286.50">decorate_autocast (torch\..</text></g><g><title>step (torch\cuda\amp\grad_scaler.py:366) (591 samples, 0.12%)</title><rect x="97.7524%" y="260" width="0.1221%" height="15" fill="rgb(224,111,15)" fg:x="473053" fg:w="591"/><text x="98.0024%" y="270.50"></text></g><g><title>adamw (torch\optim\adamw.py:321) (3,912 samples, 0.81%)</title><rect x="98.0173%" y="340" width="0.8084%" height="15" fill="rgb(253,21,26)" fg:x="474335" fg:w="3912"/><text x="98.2673%" y="350.50"></text></g><g><title>_multi_tensor_adamw (torch\optim\adamw.py:568) (525 samples, 0.11%)</title><rect x="98.7172%" y="356" width="0.1085%" height="15" fill="rgb(245,139,43)" fg:x="477722" fg:w="525"/><text x="98.9672%" y="366.50"></text></g><g><title>step (torch\optim\adamw.py:171) (4,237 samples, 0.88%)</title><rect x="97.9503%" y="324" width="0.8755%" height="15" fill="rgb(252,170,7)" fg:x="474011" fg:w="4237"/><text x="98.2003%" y="334.50"></text></g><g><title>_use_grad (torch\optim\optimizer.py:33) (4,444 samples, 0.92%)</title><rect x="97.9080%" y="308" width="0.9183%" height="15" fill="rgb(231,118,14)" fg:x="473806" fg:w="4444"/><text x="98.1580%" y="318.50"></text></g><g><title>wrapper (torch\optim\optimizer.py:280) (4,453 samples, 0.92%)</title><rect x="97.9073%" y="292" width="0.9202%" height="15" fill="rgb(238,83,0)" fg:x="473803" fg:w="4453"/><text x="98.1573%" y="302.50"></text></g><g><title>step (torch\cuda\amp\grad_scaler.py:370) (4,613 samples, 0.95%)</title><rect x="97.8751%" y="260" width="0.9532%" height="15" fill="rgb(221,39,39)" fg:x="473647" fg:w="4613"/><text x="98.1251%" y="270.50"></text></g><g><title>_maybe_opt_step (torch\cuda\amp\grad_scaler.py:290) (4,535 samples, 0.94%)</title><rect x="97.8912%" y="276" width="0.9371%" height="15" fill="rgb(222,119,46)" fg:x="473725" fg:w="4535"/><text x="98.1412%" y="286.50"></text></g><g><title>reconstruction_training_step (cemrl.py:193) (5,227 samples, 1.08%)</title><rect x="97.7486%" y="244" width="1.0801%" height="15" fill="rgb(222,165,49)" fg:x="473035" fg:w="5227"/><text x="97.9986%" y="254.50"></text></g><g><title>train (cemrl.py:104) (121,125 samples, 25.03%)</title><rect x="73.8448%" y="228" width="25.0294%" height="15" fill="rgb(219,113,52)" fg:x="357357" fg:w="121125"/><text x="74.0948%" y="238.50">train (cemrl.py:104)</text></g><g><title>sample (buffers.py:114) (867 samples, 0.18%)</title><rect x="98.9412%" y="260" width="0.1792%" height="15" fill="rgb(214,7,15)" fg:x="478806" fg:w="867"/><text x="99.1912%" y="270.50"></text></g><g><title>encode (networks.py:39) (1,450 samples, 0.30%)</title><rect x="99.1255%" y="340" width="0.2996%" height="15" fill="rgb(235,32,4)" fg:x="479698" fg:w="1450"/><text x="99.3755%" y="350.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,447 samples, 0.30%)</title><rect x="99.1261%" y="356" width="0.2990%" height="15" fill="rgb(238,90,54)" fg:x="479701" fg:w="1447"/><text x="99.3761%" y="366.50"></text></g><g><title>forward (torch\nn\modules\rnn.py:998) (1,432 samples, 0.30%)</title><rect x="99.1292%" y="372" width="0.2959%" height="15" fill="rgb(213,208,19)" fg:x="479716" fg:w="1432"/><text x="99.3792%" y="382.50"></text></g><g><title>forward (networks.py:30) (1,699 samples, 0.35%)</title><rect x="99.1230%" y="308" width="0.3511%" height="15" fill="rgb(233,156,4)" fg:x="479686" fg:w="1699"/><text x="99.3730%" y="318.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,694 samples, 0.35%)</title><rect x="99.1240%" y="324" width="0.3501%" height="15" fill="rgb(207,194,5)" fg:x="479691" fg:w="1694"/><text x="99.3740%" y="334.50"></text></g><g><title>sample (buffers.py:116) (1,782 samples, 0.37%)</title><rect x="99.1218%" y="260" width="0.3682%" height="15" fill="rgb(206,111,30)" fg:x="479680" fg:w="1782"/><text x="99.3718%" y="270.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,780 samples, 0.37%)</title><rect x="99.1222%" y="276" width="0.3678%" height="15" fill="rgb(243,70,54)" fg:x="479682" fg:w="1780"/><text x="99.3722%" y="286.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,777 samples, 0.37%)</title><rect x="99.1228%" y="292" width="0.3672%" height="15" fill="rgb(242,28,8)" fg:x="479685" fg:w="1777"/><text x="99.3728%" y="302.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:215) (3,027 samples, 0.63%)</title><rect x="98.8771%" y="244" width="0.6255%" height="15" fill="rgb(219,106,18)" fg:x="478496" fg:w="3027"/><text x="99.1271%" y="254.50"></text></g><g><title>all (483,930 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(244,222,10)" fg:x="0" fg:w="483930"/><text x="0.2500%" y="62.50"></text></g><g><title>_run_module_as_main (runpy.py:196) (421,374 samples, 87.07%)</title><rect x="12.9267%" y="68" width="87.0733%" height="15" fill="rgb(236,179,52)" fg:x="62556" fg:w="421374"/><text x="13.1767%" y="78.50">_run_module_as_main (runpy.py:196)</text></g><g><title>_run_code (runpy.py:86) (421,374 samples, 87.07%)</title><rect x="12.9267%" y="84" width="87.0733%" height="15" fill="rgb(213,23,39)" fg:x="62556" fg:w="421374"/><text x="13.1767%" y="94.50">_run_code (runpy.py:86)</text></g><g><title>&lt;module&gt; (debugpy\__main__.py:39) (421,374 samples, 87.07%)</title><rect x="12.9267%" y="100" width="87.0733%" height="15" fill="rgb(238,48,10)" fg:x="62556" fg:w="421374"/><text x="13.1767%" y="110.50">&lt;module&gt; (debugpy\__main__.py:39)</text></g><g><title>main (debugpy\server\cli.py:430) (421,374 samples, 87.07%)</title><rect x="12.9267%" y="116" width="87.0733%" height="15" fill="rgb(251,196,23)" fg:x="62556" fg:w="421374"/><text x="13.1767%" y="126.50">main (debugpy\server\cli.py:430)</text></g><g><title>run_file (debugpy\server\cli.py:284) (421,374 samples, 87.07%)</title><rect x="12.9267%" y="132" width="87.0733%" height="15" fill="rgb(250,152,24)" fg:x="62556" fg:w="421374"/><text x="13.1767%" y="142.50">run_file (debugpy\server\cli.py:284)</text></g><g><title>run_path (_pydevd_bundle\pydevd_runpy.py:321) (421,374 samples, 87.07%)</title><rect x="12.9267%" y="148" width="87.0733%" height="15" fill="rgb(209,150,17)" fg:x="62556" fg:w="421374"/><text x="13.1767%" y="158.50">run_path (_pydevd_bundle\pydevd_runpy.py:321)</text></g><g><title>_run_module_code (_pydevd_bundle\pydevd_runpy.py:135) (421,374 samples, 87.07%)</title><rect x="12.9267%" y="164" width="87.0733%" height="15" fill="rgb(234,202,34)" fg:x="62556" fg:w="421374"/><text x="13.1767%" y="174.50">_run_module_code (_pydevd_bundle\pydevd_runpy.py:135)</text></g><g><title>_run_code (_pydevd_bundle\pydevd_runpy.py:124) (421,374 samples, 87.07%)</title><rect x="12.9267%" y="180" width="87.0733%" height="15" fill="rgb(253,148,53)" fg:x="62556" fg:w="421374"/><text x="13.1767%" y="190.50">_run_code (_pydevd_bundle\pydevd_runpy.py:124)</text></g><g><title>&lt;module&gt; (cli.py:195) (421,374 samples, 87.07%)</title><rect x="12.9267%" y="196" width="87.0733%" height="15" fill="rgb(218,129,16)" fg:x="62556" fg:w="421374"/><text x="13.1767%" y="206.50">&lt;module&gt; (cli.py:195)</text></g><g><title>learn (stable_baselines3\common\off_policy_algorithm.py:331) (126,573 samples, 26.16%)</title><rect x="73.8448%" y="212" width="26.1552%" height="15" fill="rgb(216,85,19)" fg:x="357357" fg:w="126573"/><text x="74.0948%" y="222.50">learn (stable_baselines3\common\off_policy..</text></g><g><title>train (cemrl.py:105) (5,448 samples, 1.13%)</title><rect x="98.8742%" y="228" width="1.1258%" height="15" fill="rgb(235,228,7)" fg:x="478482" fg:w="5448"/><text x="99.1242%" y="238.50"></text></g></svg></svg>