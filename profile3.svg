<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="634" onload="init(evt)" viewBox="0 0 1200 634" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="634" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">C:\Users\samue\miniconda3\envs\thesis\Scripts\py-spy.exe record -o profile3.svg --pid 11812</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="623.00"> </text><svg id="frames" x="10" width="1180" total_samples="59997"><g><title>replace (dataclasses.py:1423) (70 samples, 0.12%)</title><rect x="0.5367%" y="260" width="0.1167%" height="15" fill="rgb(227,0,7)" fg:x="322" fg:w="70"/><text x="0.7867%" y="270.50"></text></g><g><title>replace (dataclasses.py:1446) (131 samples, 0.22%)</title><rect x="0.9684%" y="260" width="0.2183%" height="15" fill="rgb(217,0,24)" fg:x="581" fg:w="131"/><text x="1.2184%" y="270.50"></text></g><g><title>copy (rich\table.py:116) (503 samples, 0.84%)</title><rect x="0.4717%" y="244" width="0.8384%" height="15" fill="rgb(221,193,54)" fg:x="283" fg:w="503"/><text x="0.7217%" y="254.50"></text></g><g><title>replace (dataclasses.py:1453) (74 samples, 0.12%)</title><rect x="1.1867%" y="260" width="0.1233%" height="15" fill="rgb(248,212,6)" fg:x="712" fg:w="74"/><text x="1.4367%" y="270.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1556) (675 samples, 1.13%)</title><rect x="0.2383%" y="228" width="1.1251%" height="15" fill="rgb(208,68,35)" fg:x="143" fg:w="675"/><text x="0.4883%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1558) (113 samples, 0.19%)</title><rect x="1.3634%" y="228" width="0.1883%" height="15" fill="rgb(232,128,0)" fg:x="818" fg:w="113"/><text x="1.6134%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1560) (108 samples, 0.18%)</title><rect x="1.5934%" y="228" width="0.1800%" height="15" fill="rgb(207,160,47)" fg:x="956" fg:w="108"/><text x="1.8434%" y="238.50"></text></g><g><title>get_table_column (rich\progress.py:503) (88 samples, 0.15%)</title><rect x="1.6267%" y="244" width="0.1467%" height="15" fill="rgb(228,23,34)" fg:x="976" fg:w="88"/><text x="1.8767%" y="254.50"></text></g><g><title>make_tasks_table (rich\progress.py:1564) (1,018 samples, 1.70%)</title><rect x="0.2067%" y="212" width="1.6968%" height="15" fill="rgb(218,30,26)" fg:x="124" fg:w="1018"/><text x="0.4567%" y="222.50"></text></g><g><title>make_tasks_table (rich\progress.py:1568) (82 samples, 0.14%)</title><rect x="1.9034%" y="212" width="0.1367%" height="15" fill="rgb(220,122,19)" fg:x="1142" fg:w="82"/><text x="2.1534%" y="222.50"></text></g><g><title>renderable (rich\live.py:203) (1,206 samples, 2.01%)</title><rect x="0.0533%" y="148" width="2.0101%" height="15" fill="rgb(250,228,42)" fg:x="32" fg:w="1206"/><text x="0.3033%" y="158.50">r..</text></g><g><title>get_renderable (rich\live.py:98) (1,204 samples, 2.01%)</title><rect x="0.0567%" y="164" width="2.0068%" height="15" fill="rgb(240,193,28)" fg:x="34" fg:w="1204"/><text x="0.3067%" y="174.50">g..</text></g><g><title>get_renderable (rich\progress.py:1539) (1,197 samples, 2.00%)</title><rect x="0.0683%" y="180" width="1.9951%" height="15" fill="rgb(216,20,37)" fg:x="41" fg:w="1197"/><text x="0.3183%" y="190.50">g..</text></g><g><title>get_renderables (rich\progress.py:1544) (1,190 samples, 1.98%)</title><rect x="0.0800%" y="196" width="1.9834%" height="15" fill="rgb(206,188,39)" fg:x="48" fg:w="1190"/><text x="0.3300%" y="206.50">g..</text></g><g><title>refresh (rich\live.py:221) (1,213 samples, 2.02%)</title><rect x="0.0467%" y="132" width="2.0218%" height="15" fill="rgb(217,207,13)" fg:x="28" fg:w="1213"/><text x="0.2967%" y="142.50">r..</text></g><g><title>write (wandb\sdk\lib\redirect.py:640) (60 samples, 0.10%)</title><rect x="2.1251%" y="196" width="0.1000%" height="15" fill="rgb(231,73,38)" fg:x="1275" fg:w="60"/><text x="2.3751%" y="206.50"></text></g><g><title>_sendall_with_error_handle (wandb\sdk\lib\sock_client.py:130) (83 samples, 0.14%)</title><rect x="2.3785%" y="356" width="0.1383%" height="15" fill="rgb(225,20,46)" fg:x="1427" fg:w="83"/><text x="2.6285%" y="366.50"></text></g><g><title>_check_buffer (rich\console.py:2009) (238 samples, 0.40%)</title><rect x="2.1218%" y="180" width="0.3967%" height="15" fill="rgb(210,31,41)" fg:x="1273" fg:w="238"/><text x="2.3718%" y="190.50"></text></g><g><title>write (wandb\sdk\lib\redirect.py:643) (176 samples, 0.29%)</title><rect x="2.2251%" y="196" width="0.2933%" height="15" fill="rgb(221,200,47)" fg:x="1335" fg:w="176"/><text x="2.4751%" y="206.50"></text></g><g><title>&lt;lambda&gt; (wandb\sdk\wandb_run.py:2079) (176 samples, 0.29%)</title><rect x="2.2251%" y="212" width="0.2933%" height="15" fill="rgb(226,26,5)" fg:x="1335" fg:w="176"/><text x="2.4751%" y="222.50"></text></g><g><title>wrapper_fn (wandb\sdk\wandb_run.py:342) (175 samples, 0.29%)</title><rect x="2.2268%" y="228" width="0.2917%" height="15" fill="rgb(249,33,26)" fg:x="1336" fg:w="175"/><text x="2.4768%" y="238.50"></text></g><g><title>_console_raw_callback (wandb\sdk\wandb_run.py:1425) (174 samples, 0.29%)</title><rect x="2.2284%" y="244" width="0.2900%" height="15" fill="rgb(235,183,28)" fg:x="1337" fg:w="174"/><text x="2.4784%" y="254.50"></text></g><g><title>publish_output_raw (wandb\sdk\interface\interface.py:658) (128 samples, 0.21%)</title><rect x="2.3051%" y="260" width="0.2133%" height="15" fill="rgb(221,5,38)" fg:x="1383" fg:w="128"/><text x="2.5551%" y="270.50"></text></g><g><title>_publish_output_raw (wandb\sdk\interface\interface_shared.py:79) (116 samples, 0.19%)</title><rect x="2.3251%" y="276" width="0.1933%" height="15" fill="rgb(247,18,42)" fg:x="1395" fg:w="116"/><text x="2.5751%" y="286.50"></text></g><g><title>_publish (wandb\sdk\interface\interface_sock.py:51) (112 samples, 0.19%)</title><rect x="2.3318%" y="292" width="0.1867%" height="15" fill="rgb(241,131,45)" fg:x="1399" fg:w="112"/><text x="2.5818%" y="302.50"></text></g><g><title>send_record_publish (wandb\sdk\lib\sock_client.py:221) (101 samples, 0.17%)</title><rect x="2.3501%" y="308" width="0.1683%" height="15" fill="rgb(249,31,29)" fg:x="1410" fg:w="101"/><text x="2.6001%" y="318.50"></text></g><g><title>send_server_request (wandb\sdk\lib\sock_client.py:155) (101 samples, 0.17%)</title><rect x="2.3501%" y="324" width="0.1683%" height="15" fill="rgb(225,111,53)" fg:x="1410" fg:w="101"/><text x="2.6001%" y="334.50"></text></g><g><title>_send_message (wandb\sdk\lib\sock_client.py:152) (86 samples, 0.14%)</title><rect x="2.3751%" y="340" width="0.1433%" height="15" fill="rgb(238,160,17)" fg:x="1425" fg:w="86"/><text x="2.6251%" y="350.50"></text></g><g><title>refresh (rich\live.py:239) (271 samples, 0.45%)</title><rect x="2.0718%" y="132" width="0.4517%" height="15" fill="rgb(214,148,48)" fg:x="1243" fg:w="271"/><text x="2.3218%" y="142.50"></text></g><g><title>__exit__ (rich\console.py:848) (270 samples, 0.45%)</title><rect x="2.0734%" y="148" width="0.4500%" height="15" fill="rgb(232,36,49)" fg:x="1244" fg:w="270"/><text x="2.3234%" y="158.50"></text></g><g><title>_exit_buffer (rich\console.py:806) (269 samples, 0.45%)</title><rect x="2.0751%" y="164" width="0.4484%" height="15" fill="rgb(209,103,24)" fg:x="1245" fg:w="269"/><text x="2.3251%" y="174.50"></text></g><g><title>_get_cells (rich\table.py:675) (63 samples, 0.11%)</title><rect x="3.3168%" y="324" width="0.1050%" height="15" fill="rgb(229,88,8)" fg:x="1990" fg:w="63"/><text x="3.5668%" y="334.50"></text></g><g><title>_measure_column (rich\table.py:722) (315 samples, 0.53%)</title><rect x="3.0318%" y="308" width="0.5250%" height="15" fill="rgb(213,181,19)" fg:x="1819" fg:w="315"/><text x="3.2818%" y="318.50"></text></g><g><title>__rich_measure__ (rich\text.py:649) (78 samples, 0.13%)</title><rect x="3.7735%" y="372" width="0.1300%" height="15" fill="rgb(254,191,54)" fg:x="2264" fg:w="78"/><text x="4.0235%" y="382.50"></text></g><g><title>&lt;genexpr&gt; (rich\text.py:649) (71 samples, 0.12%)</title><rect x="3.7852%" y="388" width="0.1183%" height="15" fill="rgb(241,83,37)" fg:x="2271" fg:w="71"/><text x="4.0352%" y="398.50"></text></g><g><title>__rich_measure__ (rich\text.py:652) (63 samples, 0.11%)</title><rect x="3.9052%" y="372" width="0.1050%" height="15" fill="rgb(233,36,39)" fg:x="2343" fg:w="63"/><text x="4.1552%" y="382.50"></text></g><g><title>&lt;genexpr&gt; (rich\text.py:652) (60 samples, 0.10%)</title><rect x="3.9102%" y="388" width="0.1000%" height="15" fill="rgb(226,3,54)" fg:x="2346" fg:w="60"/><text x="4.1602%" y="398.50"></text></g><g><title>get (rich\measure.py:109) (170 samples, 0.28%)</title><rect x="3.7385%" y="356" width="0.2833%" height="15" fill="rgb(245,192,40)" fg:x="2243" fg:w="170"/><text x="3.9885%" y="366.50"></text></g><g><title>render_str (rich\console.py:1403) (117 samples, 0.20%)</title><rect x="4.1552%" y="372" width="0.1950%" height="15" fill="rgb(238,167,29)" fg:x="2493" fg:w="117"/><text x="4.4052%" y="382.50"></text></g><g><title>__rich_measure__ (rich\padding.py:132) (417 samples, 0.70%)</title><rect x="3.6618%" y="340" width="0.6950%" height="15" fill="rgb(232,182,51)" fg:x="2197" fg:w="417"/><text x="3.9118%" y="350.50"></text></g><g><title>get (rich\measure.py:99) (133 samples, 0.22%)</title><rect x="4.1352%" y="356" width="0.2217%" height="15" fill="rgb(231,60,39)" fg:x="2481" fg:w="133"/><text x="4.3852%" y="366.50"></text></g><g><title>get (rich\measure.py:109) (452 samples, 0.75%)</title><rect x="3.6368%" y="324" width="0.7534%" height="15" fill="rgb(208,69,12)" fg:x="2182" fg:w="452"/><text x="3.8868%" y="334.50"></text></g><g><title>_measure_column (rich\table.py:723) (550 samples, 0.92%)</title><rect x="3.5568%" y="308" width="0.9167%" height="15" fill="rgb(235,93,37)" fg:x="2134" fg:w="550"/><text x="3.8068%" y="318.50"></text></g><g><title>_calculate_column_widths (rich\table.py:519) (927 samples, 1.55%)</title><rect x="2.9935%" y="276" width="1.5451%" height="15" fill="rgb(213,116,39)" fg:x="1796" fg:w="927"/><text x="3.2435%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (rich\table.py:520) (925 samples, 1.54%)</title><rect x="2.9968%" y="292" width="1.5417%" height="15" fill="rgb(222,207,29)" fg:x="1798" fg:w="925"/><text x="3.2468%" y="302.50"></text></g><g><title>_get_cells (rich\table.py:675) (70 samples, 0.12%)</title><rect x="4.8402%" y="324" width="0.1167%" height="15" fill="rgb(206,96,30)" fg:x="2904" fg:w="70"/><text x="5.0902%" y="334.50"></text></g><g><title>_measure_column (rich\table.py:722) (282 samples, 0.47%)</title><rect x="4.6369%" y="308" width="0.4700%" height="15" fill="rgb(218,138,4)" fg:x="2782" fg:w="282"/><text x="4.8869%" y="318.50"></text></g><g><title>get (rich\measure.py:109) (134 samples, 0.22%)</title><rect x="5.2219%" y="356" width="0.2233%" height="15" fill="rgb(250,191,14)" fg:x="3133" fg:w="134"/><text x="5.4719%" y="366.50"></text></g><g><title>render_str (rich\console.py:1403) (76 samples, 0.13%)</title><rect x="5.5369%" y="372" width="0.1267%" height="15" fill="rgb(239,60,40)" fg:x="3322" fg:w="76"/><text x="5.7869%" y="382.50"></text></g><g><title>__rich_measure__ (rich\padding.py:132) (302 samples, 0.50%)</title><rect x="5.1669%" y="340" width="0.5034%" height="15" fill="rgb(206,27,48)" fg:x="3100" fg:w="302"/><text x="5.4169%" y="350.50"></text></g><g><title>get (rich\measure.py:99) (82 samples, 0.14%)</title><rect x="5.5336%" y="356" width="0.1367%" height="15" fill="rgb(225,35,8)" fg:x="3320" fg:w="82"/><text x="5.7836%" y="366.50"></text></g><g><title>get (rich\measure.py:109) (332 samples, 0.55%)</title><rect x="5.1519%" y="324" width="0.5534%" height="15" fill="rgb(250,213,24)" fg:x="3091" fg:w="332"/><text x="5.4019%" y="334.50"></text></g><g><title>_measure_column (rich\table.py:723) (413 samples, 0.69%)</title><rect x="5.1069%" y="308" width="0.6884%" height="15" fill="rgb(247,123,22)" fg:x="3064" fg:w="413"/><text x="5.3569%" y="318.50"></text></g><g><title>_calculate_column_widths (rich\table.py:558) (784 samples, 1.31%)</title><rect x="4.5952%" y="276" width="1.3067%" height="15" fill="rgb(231,138,38)" fg:x="2757" fg:w="784"/><text x="4.8452%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (rich\table.py:559) (783 samples, 1.31%)</title><rect x="4.5969%" y="292" width="1.3051%" height="15" fill="rgb(231,145,46)" fg:x="2758" fg:w="783"/><text x="4.8469%" y="302.50"></text></g><g><title>__rich_console__ (rich\table.py:478) (1,755 samples, 2.93%)</title><rect x="2.9868%" y="260" width="2.9251%" height="15" fill="rgb(251,118,11)" fg:x="1792" fg:w="1755"/><text x="3.2368%" y="270.50">__..</text></g><g><title>_get_cells (rich\table.py:665) (67 samples, 0.11%)</title><rect x="6.2003%" y="292" width="0.1117%" height="15" fill="rgb(217,147,25)" fg:x="3720" fg:w="67"/><text x="6.4503%" y="302.50"></text></g><g><title>cells (rich\table.py:121) (64 samples, 0.11%)</title><rect x="6.2053%" y="308" width="0.1067%" height="15" fill="rgb(247,81,37)" fg:x="3723" fg:w="64"/><text x="6.4553%" y="318.50"></text></g><g><title>_get_cells (rich\table.py:676) (110 samples, 0.18%)</title><rect x="6.3987%" y="292" width="0.1833%" height="15" fill="rgb(209,12,38)" fg:x="3839" fg:w="110"/><text x="6.6487%" y="302.50"></text></g><g><title>_render (rich\table.py:747) (429 samples, 0.72%)</title><rect x="5.9886%" y="276" width="0.7150%" height="15" fill="rgb(227,1,9)" fg:x="3593" fg:w="429"/><text x="6.2386%" y="286.50"></text></g><g><title>render_str (rich\console.py:1403) (71 samples, 0.12%)</title><rect x="7.5387%" y="404" width="0.1183%" height="15" fill="rgb(248,47,43)" fg:x="4523" fg:w="71"/><text x="7.7887%" y="414.50"></text></g><g><title>render (rich\console.py:1287) (83 samples, 0.14%)</title><rect x="7.5237%" y="388" width="0.1383%" height="15" fill="rgb(221,10,30)" fg:x="4514" fg:w="83"/><text x="7.7737%" y="398.50"></text></g><g><title>wrap (rich\text.py:1156) (69 samples, 0.12%)</title><rect x="7.8254%" y="420" width="0.1150%" height="15" fill="rgb(210,229,1)" fg:x="4695" fg:w="69"/><text x="8.0754%" y="430.50"></text></g><g><title>__rich_console__ (rich\text.py:633) (322 samples, 0.54%)</title><rect x="7.7921%" y="404" width="0.5367%" height="15" fill="rgb(222,148,37)" fg:x="4675" fg:w="322"/><text x="8.0421%" y="414.50"></text></g><g><title>iter_text (rich\text.py:729) (60 samples, 0.10%)</title><rect x="8.5171%" y="436" width="0.1000%" height="15" fill="rgb(234,67,33)" fg:x="5110" fg:w="60"/><text x="8.7671%" y="446.50"></text></g><g><title>join (rich\text.py:742) (119 samples, 0.20%)</title><rect x="8.4621%" y="420" width="0.1983%" height="15" fill="rgb(247,98,35)" fg:x="5077" fg:w="119"/><text x="8.7121%" y="430.50"></text></g><g><title>__rich_console__ (rich\text.py:641) (251 samples, 0.42%)</title><rect x="8.3321%" y="404" width="0.4184%" height="15" fill="rgb(247,138,52)" fg:x="4999" fg:w="251"/><text x="8.5821%" y="414.50"></text></g><g><title>render (rich\text.py:711) (87 samples, 0.15%)</title><rect x="9.1405%" y="420" width="0.1450%" height="15" fill="rgb(213,79,30)" fg:x="5484" fg:w="87"/><text x="9.3905%" y="430.50"></text></g><g><title>render (rich\console.py:1305) (981 samples, 1.64%)</title><rect x="7.6887%" y="388" width="1.6351%" height="15" fill="rgb(246,177,23)" fg:x="4613" fg:w="981"/><text x="7.9387%" y="398.50"></text></g><g><title>__rich_console__ (rich\text.py:642) (344 samples, 0.57%)</title><rect x="8.7504%" y="404" width="0.5734%" height="15" fill="rgb(230,62,27)" fg:x="5250" fg:w="344"/><text x="9.0004%" y="414.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:292) (1,171 samples, 1.95%)</title><rect x="7.4420%" y="372" width="1.9518%" height="15" fill="rgb(216,154,8)" fg:x="4465" fg:w="1171"/><text x="7.6920%" y="382.50">s..</text></g><g><title>render_lines (rich\console.py:1345) (1,310 samples, 2.18%)</title><rect x="7.3937%" y="356" width="2.1834%" height="15" fill="rgb(244,35,45)" fg:x="4436" fg:w="1310"/><text x="7.6437%" y="366.50">r..</text></g><g><title>__rich_console__ (rich\padding.py:97) (1,334 samples, 2.22%)</title><rect x="7.3687%" y="340" width="2.2234%" height="15" fill="rgb(251,115,12)" fg:x="4421" fg:w="1334"/><text x="7.6187%" y="350.50">_..</text></g><g><title>render (rich\console.py:1305) (1,497 samples, 2.50%)</title><rect x="7.1020%" y="324" width="2.4951%" height="15" fill="rgb(240,54,50)" fg:x="4261" fg:w="1497"/><text x="7.3520%" y="334.50">re..</text></g><g><title>split_and_crop_lines (rich\segment.py:292) (1,622 samples, 2.70%)</title><rect x="6.9787%" y="308" width="2.7035%" height="15" fill="rgb(233,84,52)" fg:x="4187" fg:w="1622"/><text x="7.2287%" y="318.50">sp..</text></g><g><title>&lt;genexpr&gt; (rich\segment.py:331) (95 samples, 0.16%)</title><rect x="9.7205%" y="340" width="0.1583%" height="15" fill="rgb(207,117,47)" fg:x="5832" fg:w="95"/><text x="9.9705%" y="350.50"></text></g><g><title>adjust_line_length (rich\segment.py:331) (105 samples, 0.18%)</title><rect x="9.7055%" y="324" width="0.1750%" height="15" fill="rgb(249,43,39)" fg:x="5823" fg:w="105"/><text x="9.9555%" y="334.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:300) (112 samples, 0.19%)</title><rect x="9.7038%" y="308" width="0.1867%" height="15" fill="rgb(209,38,44)" fg:x="5822" fg:w="112"/><text x="9.9538%" y="318.50"></text></g><g><title>render_lines (rich\console.py:1345) (1,831 samples, 3.05%)</title><rect x="6.8953%" y="292" width="3.0518%" height="15" fill="rgb(236,212,23)" fg:x="4137" fg:w="1831"/><text x="7.1453%" y="302.50">ren..</text></g><g><title>_render (rich\table.py:823) (1,867 samples, 3.11%)</title><rect x="6.8470%" y="276" width="3.1118%" height="15" fill="rgb(242,79,21)" fg:x="4108" fg:w="1867"/><text x="7.0970%" y="286.50">_re..</text></g><g><title>adjust_line_length (rich\segment.py:331) (101 samples, 0.17%)</title><rect x="10.0555%" y="340" width="0.1683%" height="15" fill="rgb(211,96,35)" fg:x="6033" fg:w="101"/><text x="10.3055%" y="350.50"></text></g><g><title>&lt;genexpr&gt; (rich\segment.py:331) (94 samples, 0.16%)</title><rect x="10.0672%" y="356" width="0.1567%" height="15" fill="rgb(253,215,40)" fg:x="6040" fg:w="94"/><text x="10.3172%" y="366.50"></text></g><g><title>set_shape (rich\segment.py:413) (110 samples, 0.18%)</title><rect x="10.0505%" y="308" width="0.1833%" height="15" fill="rgb(211,81,21)" fg:x="6030" fg:w="110"/><text x="10.3005%" y="318.50"></text></g><g><title>&lt;listcomp&gt; (rich\segment.py:414) (107 samples, 0.18%)</title><rect x="10.0555%" y="324" width="0.1783%" height="15" fill="rgb(208,190,38)" fg:x="6033" fg:w="107"/><text x="10.3055%" y="334.50"></text></g><g><title>&lt;listcomp&gt; (rich\table.py:846) (132 samples, 0.22%)</title><rect x="10.0188%" y="292" width="0.2200%" height="15" fill="rgb(235,213,38)" fg:x="6011" fg:w="132"/><text x="10.2688%" y="302.50"></text></g><g><title>_render (rich\table.py:845) (179 samples, 0.30%)</title><rect x="10.0105%" y="276" width="0.2983%" height="15" fill="rgb(237,122,38)" fg:x="6006" fg:w="179"/><text x="10.2605%" y="286.50"></text></g><g><title>_render (rich\table.py:888) (72 samples, 0.12%)</title><rect x="10.3122%" y="276" width="0.1200%" height="15" fill="rgb(244,218,35)" fg:x="6187" fg:w="72"/><text x="10.5622%" y="286.50"></text></g><g><title>render (rich\console.py:1305) (4,508 samples, 7.51%)</title><rect x="2.9468%" y="244" width="7.5137%" height="15" fill="rgb(240,68,47)" fg:x="1768" fg:w="4508"/><text x="3.1968%" y="254.50">render (ri..</text></g><g><title>__rich_console__ (rich\table.py:505) (2,725 samples, 4.54%)</title><rect x="5.9186%" y="260" width="4.5419%" height="15" fill="rgb(210,16,53)" fg:x="3551" fg:w="2725"/><text x="6.1686%" y="270.50">__ric..</text></g><g><title>split_and_crop_lines (rich\segment.py:292) (4,626 samples, 7.71%)</title><rect x="2.8268%" y="212" width="7.7104%" height="15" fill="rgb(235,124,12)" fg:x="1696" fg:w="4626"/><text x="3.0768%" y="222.50">split_and_c..</text></g><g><title>render (rich\console.py:1309) (4,614 samples, 7.69%)</title><rect x="2.8468%" y="228" width="7.6904%" height="15" fill="rgb(224,169,11)" fg:x="1708" fg:w="4614"/><text x="3.0968%" y="238.50">render (ric..</text></g><g><title>adjust_line_length (rich\segment.py:331) (85 samples, 0.14%)</title><rect x="10.5505%" y="228" width="0.1417%" height="15" fill="rgb(250,166,2)" fg:x="6330" fg:w="85"/><text x="10.8005%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (rich\segment.py:331) (82 samples, 0.14%)</title><rect x="10.5555%" y="244" width="0.1367%" height="15" fill="rgb(242,216,29)" fg:x="6333" fg:w="82"/><text x="10.8055%" y="254.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:300) (87 samples, 0.15%)</title><rect x="10.5489%" y="212" width="0.1450%" height="15" fill="rgb(230,116,27)" fg:x="6329" fg:w="87"/><text x="10.7989%" y="222.50"></text></g><g><title>render_lines (rich\console.py:1345) (4,732 samples, 7.89%)</title><rect x="2.8151%" y="196" width="7.8871%" height="15" fill="rgb(228,99,48)" fg:x="1689" fg:w="4732"/><text x="3.0651%" y="206.50">render_line..</text></g><g><title>__rich_console__ (rich\live_render.py:88) (4,740 samples, 7.90%)</title><rect x="2.8051%" y="180" width="7.9004%" height="15" fill="rgb(253,11,6)" fg:x="1683" fg:w="4740"/><text x="3.0551%" y="190.50">__rich_cons..</text></g><g><title>get_shape (rich\segment.py:381) (76 samples, 0.13%)</title><rect x="10.7072%" y="196" width="0.1267%" height="15" fill="rgb(247,143,39)" fg:x="6424" fg:w="76"/><text x="10.9572%" y="206.50"></text></g><g><title>&lt;genexpr&gt; (rich\segment.py:381) (76 samples, 0.13%)</title><rect x="10.7072%" y="212" width="0.1267%" height="15" fill="rgb(236,97,10)" fg:x="6424" fg:w="76"/><text x="10.9572%" y="222.50"></text></g><g><title>get_line_length (rich\segment.py:368) (73 samples, 0.12%)</title><rect x="10.7122%" y="228" width="0.1217%" height="15" fill="rgb(233,208,19)" fg:x="6427" fg:w="73"/><text x="10.9622%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (rich\segment.py:368) (70 samples, 0.12%)</title><rect x="10.7172%" y="244" width="0.1167%" height="15" fill="rgb(216,164,2)" fg:x="6430" fg:w="70"/><text x="10.9672%" y="254.50"></text></g><g><title>render (rich\console.py:1305) (4,914 samples, 8.19%)</title><rect x="2.6451%" y="164" width="8.1904%" height="15" fill="rgb(220,129,5)" fg:x="1587" fg:w="4914"/><text x="2.8951%" y="174.50">render (ric..</text></g><g><title>__rich_console__ (rich\live_render.py:89) (78 samples, 0.13%)</title><rect x="10.7055%" y="180" width="0.1300%" height="15" fill="rgb(242,17,10)" fg:x="6423" fg:w="78"/><text x="10.9555%" y="190.50"></text></g><g><title>print (rich\console.py:1673) (4,979 samples, 8.30%)</title><rect x="2.5985%" y="148" width="8.2987%" height="15" fill="rgb(242,107,0)" fg:x="1559" fg:w="4979"/><text x="2.8485%" y="158.50">print (rich\..</text></g><g><title>print (rich\console.py:1689) (67 samples, 0.11%)</title><rect x="10.8989%" y="148" width="0.1117%" height="15" fill="rgb(251,28,31)" fg:x="6539" fg:w="67"/><text x="11.1489%" y="158.50"></text></g><g><title>run (rich\live.py:32) (6,623 samples, 11.04%)</title><rect x="0.0317%" y="116" width="11.0389%" height="15" fill="rgb(233,223,10)" fg:x="19" fg:w="6623"/><text x="0.2817%" y="126.50">run (rich\live.p..</text></g><g><title>refresh (rich\live.py:240) (5,128 samples, 8.55%)</title><rect x="2.5235%" y="132" width="8.5471%" height="15" fill="rgb(215,21,27)" fg:x="1514" fg:w="5128"/><text x="2.7735%" y="142.50">refresh (ric..</text></g><g><title>run (threading.py:953) (62 samples, 0.10%)</title><rect x="11.0706%" y="116" width="0.1033%" height="15" fill="rgb(232,23,21)" fg:x="6642" fg:w="62"/><text x="11.3206%" y="126.50"></text></g><g><title>__call__ (_pydev_bundle\pydev_monkey.py:1118) (6,712 samples, 11.19%)</title><rect x="0.0000%" y="68" width="11.1872%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="6712"/><text x="0.2500%" y="78.50">__call__ (_pydev..</text></g><g><title>_bootstrap (threading.py:973) (6,712 samples, 11.19%)</title><rect x="0.0000%" y="84" width="11.1872%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="6712"/><text x="0.2500%" y="94.50">_bootstrap (thre..</text></g><g><title>_bootstrap_inner (threading.py:1016) (6,712 samples, 11.19%)</title><rect x="0.0000%" y="100" width="11.1872%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="6712"/><text x="0.2500%" y="110.50">_bootstrap_inner..</text></g><g><title>_on_run (pydevd.py:211) (67 samples, 0.11%)</title><rect x="11.2139%" y="116" width="0.1117%" height="15" fill="rgb(212,68,19)" fg:x="6728" fg:w="67"/><text x="11.4639%" y="126.50"></text></g><g><title>_bootstrap (threading.py:973) (108 samples, 0.18%)</title><rect x="11.1872%" y="68" width="0.1800%" height="15" fill="rgb(240,187,13)" fg:x="6712" fg:w="108"/><text x="11.4372%" y="78.50"></text></g><g><title>_bootstrap_inner (threading.py:1016) (108 samples, 0.18%)</title><rect x="11.1872%" y="84" width="0.1800%" height="15" fill="rgb(223,113,26)" fg:x="6712" fg:w="108"/><text x="11.4372%" y="94.50"></text></g><g><title>run (_pydevd_bundle\pydevd_daemon_thread.py:49) (108 samples, 0.18%)</title><rect x="11.1872%" y="100" width="0.1800%" height="15" fill="rgb(206,192,2)" fg:x="6712" fg:w="108"/><text x="11.4372%" y="110.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:344) (120 samples, 0.20%)</title><rect x="11.4022%" y="388" width="0.2000%" height="15" fill="rgb(241,108,4)" fg:x="6841" fg:w="120"/><text x="11.6522%" y="398.50"></text></g><g><title>set_training_mode (stable_baselines3\common\policies.py:209) (120 samples, 0.20%)</title><rect x="11.4022%" y="404" width="0.2000%" height="15" fill="rgb(247,173,49)" fg:x="6841" fg:w="120"/><text x="11.6522%" y="414.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (116 samples, 0.19%)</title><rect x="11.4089%" y="420" width="0.1933%" height="15" fill="rgb(224,114,35)" fg:x="6845" fg:w="116"/><text x="11.6589%" y="430.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (112 samples, 0.19%)</title><rect x="11.4156%" y="436" width="0.1867%" height="15" fill="rgb(245,159,27)" fg:x="6849" fg:w="112"/><text x="11.6656%" y="446.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (100 samples, 0.17%)</title><rect x="11.4356%" y="452" width="0.1667%" height="15" fill="rgb(245,172,44)" fg:x="6861" fg:w="100"/><text x="11.6856%" y="462.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (88 samples, 0.15%)</title><rect x="11.4556%" y="468" width="0.1467%" height="15" fill="rgb(236,23,11)" fg:x="6873" fg:w="88"/><text x="11.7056%" y="478.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:346) (71 samples, 0.12%)</title><rect x="11.6022%" y="388" width="0.1183%" height="15" fill="rgb(205,117,38)" fg:x="6961" fg:w="71"/><text x="11.8522%" y="398.50"></text></g><g><title>encode (networks.py:39) (393 samples, 0.66%)</title><rect x="11.7539%" y="484" width="0.6550%" height="15" fill="rgb(237,72,25)" fg:x="7052" fg:w="393"/><text x="12.0039%" y="494.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (391 samples, 0.65%)</title><rect x="11.7573%" y="500" width="0.6517%" height="15" fill="rgb(244,70,9)" fg:x="7054" fg:w="391"/><text x="12.0073%" y="510.50"></text></g><g><title>forward (torch\nn\modules\rnn.py:998) (382 samples, 0.64%)</title><rect x="11.7723%" y="516" width="0.6367%" height="15" fill="rgb(217,125,39)" fg:x="7063" fg:w="382"/><text x="12.0223%" y="526.50"></text></g><g><title>forward (networks.py:30) (532 samples, 0.89%)</title><rect x="11.7323%" y="452" width="0.8867%" height="15" fill="rgb(235,36,10)" fg:x="7039" fg:w="532"/><text x="11.9823%" y="462.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (529 samples, 0.88%)</title><rect x="11.7373%" y="468" width="0.8817%" height="15" fill="rgb(251,123,47)" fg:x="7042" fg:w="529"/><text x="11.9873%" y="478.50"></text></g><g><title>_predict (policies.py:105) (557 samples, 0.93%)</title><rect x="11.7273%" y="404" width="0.9284%" height="15" fill="rgb(221,13,13)" fg:x="7036" fg:w="557"/><text x="11.9773%" y="414.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (556 samples, 0.93%)</title><rect x="11.7289%" y="420" width="0.9267%" height="15" fill="rgb(238,131,9)" fg:x="7037" fg:w="556"/><text x="11.9789%" y="430.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (555 samples, 0.93%)</title><rect x="11.7306%" y="436" width="0.9250%" height="15" fill="rgb(211,50,8)" fg:x="7038" fg:w="555"/><text x="11.9806%" y="446.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;:200) (62 samples, 0.10%)</title><rect x="13.2923%" y="484" width="0.1033%" height="15" fill="rgb(245,182,24)" fg:x="7975" fg:w="62"/><text x="13.5423%" y="494.50"></text></g><g><title>any (&lt;__array_function__ internals&gt;:200) (68 samples, 0.11%)</title><rect x="13.4157%" y="484" width="0.1133%" height="15" fill="rgb(242,14,37)" fg:x="8049" fg:w="68"/><text x="13.6657%" y="494.50"></text></g><g><title>sample (gymnasium\spaces\box.py:218) (291 samples, 0.49%)</title><rect x="13.0507%" y="468" width="0.4850%" height="15" fill="rgb(246,228,12)" fg:x="7830" fg:w="291"/><text x="13.3007%" y="478.50"></text></g><g><title>&lt;listcomp&gt; (policies.py:64) (566 samples, 0.94%)</title><rect x="12.6556%" y="452" width="0.9434%" height="15" fill="rgb(213,55,15)" fg:x="7593" fg:w="566"/><text x="12.9056%" y="462.50"></text></g><g><title>_predict (policies.py:64) (570 samples, 0.95%)</title><rect x="12.6556%" y="436" width="0.9500%" height="15" fill="rgb(209,9,3)" fg:x="7593" fg:w="570"/><text x="12.9056%" y="446.50"></text></g><g><title>forward (networks.py:91) (324 samples, 0.54%)</title><rect x="13.6373%" y="532" width="0.5400%" height="15" fill="rgb(230,59,30)" fg:x="8182" fg:w="324"/><text x="13.8873%" y="542.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (282 samples, 0.47%)</title><rect x="13.7074%" y="548" width="0.4700%" height="15" fill="rgb(209,121,21)" fg:x="8224" fg:w="282"/><text x="13.9574%" y="558.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (282 samples, 0.47%)</title><rect x="13.7074%" y="564" width="0.4700%" height="15" fill="rgb(220,109,13)" fg:x="8224" fg:w="282"/><text x="13.9574%" y="574.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (275 samples, 0.46%)</title><rect x="13.7190%" y="580" width="0.4584%" height="15" fill="rgb(232,18,1)" fg:x="8231" fg:w="275"/><text x="13.9690%" y="590.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (233 samples, 0.39%)</title><rect x="13.7890%" y="596" width="0.3884%" height="15" fill="rgb(215,41,42)" fg:x="8273" fg:w="233"/><text x="14.0390%" y="606.50"></text></g><g><title>forward (networks.py:49) (642 samples, 1.07%)</title><rect x="13.6240%" y="484" width="1.0701%" height="15" fill="rgb(224,123,36)" fg:x="8174" fg:w="642"/><text x="13.8740%" y="494.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (640 samples, 1.07%)</title><rect x="13.6273%" y="500" width="1.0667%" height="15" fill="rgb(240,125,3)" fg:x="8176" fg:w="640"/><text x="13.8773%" y="510.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (634 samples, 1.06%)</title><rect x="13.6373%" y="516" width="1.0567%" height="15" fill="rgb(205,98,50)" fg:x="8182" fg:w="634"/><text x="13.8873%" y="526.50"></text></g><g><title>forward (networks.py:93) (309 samples, 0.52%)</title><rect x="14.1790%" y="532" width="0.5150%" height="15" fill="rgb(205,185,37)" fg:x="8507" fg:w="309"/><text x="14.4290%" y="542.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (249 samples, 0.42%)</title><rect x="14.2790%" y="548" width="0.4150%" height="15" fill="rgb(238,207,15)" fg:x="8567" fg:w="249"/><text x="14.5290%" y="558.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (248 samples, 0.41%)</title><rect x="14.2807%" y="564" width="0.4134%" height="15" fill="rgb(213,199,42)" fg:x="8568" fg:w="248"/><text x="14.5307%" y="574.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (234 samples, 0.39%)</title><rect x="14.3040%" y="580" width="0.3900%" height="15" fill="rgb(235,201,11)" fg:x="8582" fg:w="234"/><text x="14.5540%" y="590.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (193 samples, 0.32%)</title><rect x="14.3724%" y="596" width="0.3217%" height="15" fill="rgb(207,46,11)" fg:x="8623" fg:w="193"/><text x="14.6224%" y="606.50"></text></g><g><title>_predict (policies.py:81) (663 samples, 1.11%)</title><rect x="13.6223%" y="436" width="1.1051%" height="15" fill="rgb(241,35,35)" fg:x="8173" fg:w="663"/><text x="13.8723%" y="446.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (663 samples, 1.11%)</title><rect x="13.6223%" y="452" width="1.1051%" height="15" fill="rgb(243,32,47)" fg:x="8173" fg:w="663"/><text x="13.8723%" y="462.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (662 samples, 1.10%)</title><rect x="13.6240%" y="468" width="1.1034%" height="15" fill="rgb(247,202,23)" fg:x="8174" fg:w="662"/><text x="13.8740%" y="478.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:349) (1,805 samples, 3.01%)</title><rect x="11.7256%" y="388" width="3.0085%" height="15" fill="rgb(219,102,11)" fg:x="7035" fg:w="1805"/><text x="11.9756%" y="398.50">pre..</text></g><g><title>_predict (policies.py:107) (1,247 samples, 2.08%)</title><rect x="12.6556%" y="404" width="2.0784%" height="15" fill="rgb(243,110,44)" fg:x="7593" fg:w="1247"/><text x="12.9056%" y="414.50">_..</text></g><g><title>decorate_context (torch\utils\_contextlib.py:115) (1,247 samples, 2.08%)</title><rect x="12.6556%" y="420" width="2.0784%" height="15" fill="rgb(222,74,54)" fg:x="7593" fg:w="1247"/><text x="12.9056%" y="430.50">d..</text></g><g><title>_sample_action (stable_baselines3\common\off_policy_algorithm.py:373) (2,007 samples, 3.35%)</title><rect x="11.4006%" y="356" width="3.3452%" height="15" fill="rgb(216,99,12)" fg:x="6840" fg:w="2007"/><text x="11.6506%" y="366.50">_sa..</text></g><g><title>predict (stable_baselines3\common\base_class.py:555) (2,006 samples, 3.34%)</title><rect x="11.4022%" y="372" width="3.3435%" height="15" fill="rgb(226,22,26)" fg:x="6841" fg:w="2006"/><text x="11.6522%" y="382.50">pre..</text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:541) (2,010 samples, 3.35%)</title><rect x="11.4006%" y="340" width="3.3502%" height="15" fill="rgb(217,163,10)" fg:x="6840" fg:w="2010"/><text x="11.6506%" y="350.50">col..</text></g><g><title>step (toy_goal_env.py:66) (89 samples, 0.15%)</title><rect x="15.3558%" y="484" width="0.1483%" height="15" fill="rgb(213,25,53)" fg:x="9213" fg:w="89"/><text x="15.6058%" y="494.50"></text></g><g><title>_clip_dep_is_byte_swapped (numpy\core\_methods.py:104) (63 samples, 0.11%)</title><rect x="15.9575%" y="564" width="0.1050%" height="15" fill="rgb(252,105,26)" fg:x="9574" fg:w="63"/><text x="16.2075%" y="574.50"></text></g><g><title>_clip (numpy\core\_methods.py:134) (98 samples, 0.16%)</title><rect x="15.9191%" y="548" width="0.1633%" height="15" fill="rgb(220,39,43)" fg:x="9551" fg:w="98"/><text x="16.1691%" y="558.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy\core\_methods.py:95) (105 samples, 0.18%)</title><rect x="16.0958%" y="564" width="0.1750%" height="15" fill="rgb(229,68,48)" fg:x="9657" fg:w="105"/><text x="16.3458%" y="574.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy\core\_methods.py:96) (112 samples, 0.19%)</title><rect x="16.2708%" y="564" width="0.1867%" height="15" fill="rgb(252,8,32)" fg:x="9762" fg:w="112"/><text x="16.5208%" y="574.50"></text></g><g><title>_clip (numpy\core\_methods.py:136) (223 samples, 0.37%)</title><rect x="16.0875%" y="548" width="0.3717%" height="15" fill="rgb(223,20,43)" fg:x="9652" fg:w="223"/><text x="16.3375%" y="558.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy\core\_methods.py:96) (103 samples, 0.17%)</title><rect x="16.5675%" y="564" width="0.1717%" height="15" fill="rgb(229,81,49)" fg:x="9940" fg:w="103"/><text x="16.8175%" y="574.50"></text></g><g><title>_clip (numpy\core\_methods.py:139) (170 samples, 0.28%)</title><rect x="16.4592%" y="548" width="0.2833%" height="15" fill="rgb(236,28,36)" fg:x="9875" fg:w="170"/><text x="16.7092%" y="558.50"></text></g><g><title>_clip (numpy\core\_methods.py:161) (145 samples, 0.24%)</title><rect x="16.7558%" y="548" width="0.2417%" height="15" fill="rgb(249,185,26)" fg:x="10053" fg:w="145"/><text x="17.0058%" y="558.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy\core\_methods.py:115) (96 samples, 0.16%)</title><rect x="16.8375%" y="564" width="0.1600%" height="15" fill="rgb(249,174,33)" fg:x="10102" fg:w="96"/><text x="17.0875%" y="574.50"></text></g><g><title>_wrapfunc (numpy\core\fromnumeric.py:57) (701 samples, 1.17%)</title><rect x="15.8391%" y="532" width="1.1684%" height="15" fill="rgb(233,201,37)" fg:x="9503" fg:w="701"/><text x="16.0891%" y="542.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;:200) (807 samples, 1.35%)</title><rect x="15.6641%" y="500" width="1.3451%" height="15" fill="rgb(221,78,26)" fg:x="9398" fg:w="807"/><text x="15.9141%" y="510.50"></text></g><g><title>clip (numpy\core\fromnumeric.py:2180) (794 samples, 1.32%)</title><rect x="15.6858%" y="516" width="1.3234%" height="15" fill="rgb(250,127,30)" fg:x="9411" fg:w="794"/><text x="15.9358%" y="526.50"></text></g><g><title>step (toy_goal_env.py:67) (907 samples, 1.51%)</title><rect x="15.5041%" y="484" width="1.5117%" height="15" fill="rgb(230,49,44)" fg:x="9302" fg:w="907"/><text x="15.7541%" y="494.50"></text></g><g><title>copy (&lt;__array_function__ internals&gt;:200) (75 samples, 0.13%)</title><rect x="17.2442%" y="516" width="0.1250%" height="15" fill="rgb(229,67,23)" fg:x="10346" fg:w="75"/><text x="17.4942%" y="526.50"></text></g><g><title>copy (numpy\lib\function_base.py:960) (68 samples, 0.11%)</title><rect x="17.2559%" y="532" width="0.1133%" height="15" fill="rgb(249,83,47)" fg:x="10353" fg:w="68"/><text x="17.5059%" y="542.50"></text></g><g><title>step (toy_goal_env.py:72) (193 samples, 0.32%)</title><rect x="17.0609%" y="484" width="0.3217%" height="15" fill="rgb(215,43,3)" fg:x="10236" fg:w="193"/><text x="17.3109%" y="494.50"></text></g><g><title>_get_obs (toy_goal_env.py:87) (184 samples, 0.31%)</title><rect x="17.0759%" y="500" width="0.3067%" height="15" fill="rgb(238,154,13)" fg:x="10245" fg:w="184"/><text x="17.3259%" y="510.50"></text></g><g><title>norm (&lt;__array_function__ internals&gt;:200) (434 samples, 0.72%)</title><rect x="17.7109%" y="516" width="0.7234%" height="15" fill="rgb(219,56,2)" fg:x="10626" fg:w="434"/><text x="17.9609%" y="526.50"></text></g><g><title>norm (numpy\linalg\linalg.py:2545) (196 samples, 0.33%)</title><rect x="18.1076%" y="532" width="0.3267%" height="15" fill="rgb(233,0,4)" fg:x="10864" fg:w="196"/><text x="18.3576%" y="542.50"></text></g><g><title>get_reward (toy_goal_env.py:97) (626 samples, 1.04%)</title><rect x="17.3959%" y="500" width="1.0434%" height="15" fill="rgb(235,30,7)" fg:x="10437" fg:w="626"/><text x="17.6459%" y="510.50"></text></g><g><title>get_reward (toy_goal_env.py:98) (143 samples, 0.24%)</title><rect x="18.4393%" y="500" width="0.2383%" height="15" fill="rgb(250,79,13)" fg:x="11063" fg:w="143"/><text x="18.6893%" y="510.50"></text></g><g><title>__call__ (enum.py:385) (86 samples, 0.14%)</title><rect x="18.5343%" y="516" width="0.1433%" height="15" fill="rgb(211,146,34)" fg:x="11120" fg:w="86"/><text x="18.7843%" y="526.50"></text></g><g><title>step (toy_goal_env.py:73) (783 samples, 1.31%)</title><rect x="17.3825%" y="484" width="1.3051%" height="15" fill="rgb(228,22,38)" fg:x="10429" fg:w="783"/><text x="17.6325%" y="494.50"></text></g><g><title>step (toy_goal_env.py:74) (61 samples, 0.10%)</title><rect x="18.6876%" y="484" width="0.1017%" height="15" fill="rgb(235,168,5)" fg:x="11212" fg:w="61"/><text x="18.9376%" y="494.50"></text></g><g><title>step (success.py:10) (2,266 samples, 3.78%)</title><rect x="15.0808%" y="436" width="3.7769%" height="15" fill="rgb(221,155,16)" fg:x="9048" fg:w="2266"/><text x="15.3308%" y="446.50">step..</text></g><g><title>step (gymnasium\core.py:408) (2,204 samples, 3.67%)</title><rect x="15.1841%" y="452" width="3.6735%" height="15" fill="rgb(215,215,53)" fg:x="9110" fg:w="2204"/><text x="15.4341%" y="462.50">step..</text></g><g><title>step (toy_goal_env.py:159) (2,133 samples, 3.56%)</title><rect x="15.3024%" y="468" width="3.5552%" height="15" fill="rgb(223,4,10)" fg:x="9181" fg:w="2133"/><text x="15.5524%" y="478.50">step..</text></g><g><title>step (success.py:12) (284 samples, 0.47%)</title><rect x="18.9276%" y="436" width="0.4734%" height="15" fill="rgb(234,103,6)" fg:x="11356" fg:w="284"/><text x="19.1776%" y="446.50"></text></g><g><title>is_success (success.py:31) (216 samples, 0.36%)</title><rect x="19.0410%" y="452" width="0.3600%" height="15" fill="rgb(227,97,0)" fg:x="11424" fg:w="216"/><text x="19.2910%" y="462.50"></text></g><g><title>step (gymnasium\core.py:469) (2,641 samples, 4.40%)</title><rect x="15.0124%" y="420" width="4.4019%" height="15" fill="rgb(234,150,53)" fg:x="9007" fg:w="2641"/><text x="15.2624%" y="430.50">step ..</text></g><g><title>_flatten_box_multibinary (gymnasium\spaces\utils.py:161) (99 samples, 0.17%)</title><rect x="19.7760%" y="484" width="0.1650%" height="15" fill="rgb(228,201,54)" fg:x="11865" fg:w="99"/><text x="20.0260%" y="494.50"></text></g><g><title>dispatch (functools.py:832) (71 samples, 0.12%)</title><rect x="20.0077%" y="484" width="0.1183%" height="15" fill="rgb(222,22,37)" fg:x="12004" fg:w="71"/><text x="20.2577%" y="494.50"></text></g><g><title>add_to_heatmap (heatmap.py:24) (369 samples, 0.62%)</title><rect x="19.5160%" y="452" width="0.6150%" height="15" fill="rgb(237,53,32)" fg:x="11709" fg:w="369"/><text x="19.7660%" y="462.50"></text></g><g><title>wrapper (functools.py:889) (240 samples, 0.40%)</title><rect x="19.7310%" y="468" width="0.4000%" height="15" fill="rgb(233,25,53)" fg:x="11838" fg:w="240"/><text x="19.9810%" y="478.50"></text></g><g><title>add_to_heatmap (heatmap.py:25) (111 samples, 0.19%)</title><rect x="20.1310%" y="452" width="0.1850%" height="15" fill="rgb(210,40,34)" fg:x="12078" fg:w="111"/><text x="20.3810%" y="462.50"></text></g><g><title>searchsorted (&lt;__array_function__ internals&gt;:180) (64 samples, 0.11%)</title><rect x="20.4744%" y="468" width="0.1067%" height="15" fill="rgb(241,220,44)" fg:x="12284" fg:w="64"/><text x="20.7244%" y="478.50"></text></g><g><title>_wrapfunc (numpy\core\fromnumeric.py:57) (139 samples, 0.23%)</title><rect x="21.0027%" y="500" width="0.2317%" height="15" fill="rgb(235,28,35)" fg:x="12601" fg:w="139"/><text x="21.2527%" y="510.50"></text></g><g><title>searchsorted (&lt;__array_function__ internals&gt;:200) (397 samples, 0.66%)</title><rect x="20.5810%" y="468" width="0.6617%" height="15" fill="rgb(210,56,17)" fg:x="12348" fg:w="397"/><text x="20.8310%" y="478.50"></text></g><g><title>searchsorted (numpy\core\fromnumeric.py:1413) (287 samples, 0.48%)</title><rect x="20.7644%" y="484" width="0.4784%" height="15" fill="rgb(224,130,29)" fg:x="12458" fg:w="287"/><text x="21.0144%" y="494.50"></text></g><g><title>add_to_heatmap (heatmap.py:26) (565 samples, 0.94%)</title><rect x="20.3160%" y="452" width="0.9417%" height="15" fill="rgb(235,212,8)" fg:x="12189" fg:w="565"/><text x="20.5660%" y="462.50"></text></g><g><title>add_to_heatmap (heatmap.py:27) (68 samples, 0.11%)</title><rect x="21.2577%" y="452" width="0.1133%" height="15" fill="rgb(223,33,50)" fg:x="12754" fg:w="68"/><text x="21.5077%" y="462.50"></text></g><g><title>searchsorted (&lt;__array_function__ internals&gt;:200) (151 samples, 0.25%)</title><rect x="21.5927%" y="468" width="0.2517%" height="15" fill="rgb(219,149,13)" fg:x="12955" fg:w="151"/><text x="21.8427%" y="478.50"></text></g><g><title>searchsorted (numpy\core\fromnumeric.py:1413) (110 samples, 0.18%)</title><rect x="21.6611%" y="484" width="0.1833%" height="15" fill="rgb(250,156,29)" fg:x="12996" fg:w="110"/><text x="21.9111%" y="494.50"></text></g><g><title>add_to_heatmap (heatmap.py:30) (249 samples, 0.42%)</title><rect x="21.4327%" y="452" width="0.4150%" height="15" fill="rgb(216,193,19)" fg:x="12859" fg:w="249"/><text x="21.6827%" y="462.50"></text></g><g><title>add_to_heatmap (heatmap.py:31) (243 samples, 0.41%)</title><rect x="21.8478%" y="452" width="0.4050%" height="15" fill="rgb(216,135,14)" fg:x="13108" fg:w="243"/><text x="22.0978%" y="462.50"></text></g><g><title>searchsorted (&lt;__array_function__ internals&gt;:200) (149 samples, 0.25%)</title><rect x="22.0044%" y="468" width="0.2483%" height="15" fill="rgb(241,47,5)" fg:x="13202" fg:w="149"/><text x="22.2544%" y="478.50"></text></g><g><title>searchsorted (numpy\core\fromnumeric.py:1413) (111 samples, 0.19%)</title><rect x="22.0678%" y="484" width="0.1850%" height="15" fill="rgb(233,42,35)" fg:x="13240" fg:w="111"/><text x="22.3178%" y="494.50"></text></g><g><title>add_to_heatmap (heatmap.py:34) (138 samples, 0.23%)</title><rect x="22.3011%" y="452" width="0.2300%" height="15" fill="rgb(231,13,6)" fg:x="13380" fg:w="138"/><text x="22.5511%" y="462.50"></text></g><g><title>add_to_heatmap (heatmap.py:35) (4,382 samples, 7.30%)</title><rect x="22.5311%" y="452" width="7.3037%" height="15" fill="rgb(207,181,40)" fg:x="13518" fg:w="4382"/><text x="22.7811%" y="462.50">add_to_hea..</text></g><g><title>observation (heatmap.py:38) (6,238 samples, 10.40%)</title><rect x="19.4426%" y="436" width="10.3972%" height="15" fill="rgb(254,173,49)" fg:x="11665" fg:w="6238"/><text x="19.6926%" y="446.50">observation (he..</text></g><g><title>step (gymnasium\wrappers\time_limit.py:57) (8,950 samples, 14.92%)</title><rect x="14.9307%" y="404" width="14.9174%" height="15" fill="rgb(221,1,38)" fg:x="8958" fg:w="8950"/><text x="15.1807%" y="414.50">step (gymnasium\wrapper..</text></g><g><title>step (gymnasium\core.py:470) (6,260 samples, 10.43%)</title><rect x="19.4143%" y="420" width="10.4339%" height="15" fill="rgb(206,124,46)" fg:x="11648" fg:w="6260"/><text x="19.6643%" y="430.50">step (gymnasium..</text></g><g><title>step (wrappers\cemrl_wrapper.py:63) (9,025 samples, 15.04%)</title><rect x="14.8624%" y="388" width="15.0424%" height="15" fill="rgb(249,21,11)" fg:x="8917" fg:w="9025"/><text x="15.1124%" y="398.50">step (wrappers\cemrl_wr..</text></g><g><title>observation (wrappers\cemrl_wrapper.py:100) (181 samples, 0.30%)</title><rect x="29.9648%" y="404" width="0.3017%" height="15" fill="rgb(222,201,40)" fg:x="17978" fg:w="181"/><text x="30.2148%" y="414.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:85) (78 samples, 0.13%)</title><rect x="30.2898%" y="404" width="0.1300%" height="15" fill="rgb(235,61,29)" fg:x="18173" fg:w="78"/><text x="30.5398%" y="414.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:86) (121 samples, 0.20%)</title><rect x="30.4199%" y="404" width="0.2017%" height="15" fill="rgb(219,207,3)" fg:x="18251" fg:w="121"/><text x="30.6699%" y="414.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (103 samples, 0.17%)</title><rect x="30.4499%" y="420" width="0.1717%" height="15" fill="rgb(222,56,46)" fg:x="18269" fg:w="103"/><text x="30.6999%" y="430.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (78 samples, 0.13%)</title><rect x="30.4915%" y="436" width="0.1300%" height="15" fill="rgb(239,76,54)" fg:x="18294" fg:w="78"/><text x="30.7415%" y="446.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:87) (115 samples, 0.19%)</title><rect x="30.6215%" y="404" width="0.1917%" height="15" fill="rgb(231,124,27)" fg:x="18372" fg:w="115"/><text x="30.8715%" y="414.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (108 samples, 0.18%)</title><rect x="30.6332%" y="420" width="0.1800%" height="15" fill="rgb(249,195,6)" fg:x="18379" fg:w="108"/><text x="30.8832%" y="430.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (91 samples, 0.15%)</title><rect x="30.6615%" y="436" width="0.1517%" height="15" fill="rgb(237,174,47)" fg:x="18396" fg:w="91"/><text x="30.9115%" y="446.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (70 samples, 0.12%)</title><rect x="30.6965%" y="452" width="0.1167%" height="15" fill="rgb(206,201,31)" fg:x="18417" fg:w="70"/><text x="30.9465%" y="462.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:88) (100 samples, 0.17%)</title><rect x="30.8132%" y="404" width="0.1667%" height="15" fill="rgb(231,57,52)" fg:x="18487" fg:w="100"/><text x="31.0632%" y="414.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (91 samples, 0.15%)</title><rect x="30.8282%" y="420" width="0.1517%" height="15" fill="rgb(248,177,22)" fg:x="18496" fg:w="91"/><text x="31.0782%" y="430.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (64 samples, 0.11%)</title><rect x="30.8732%" y="436" width="0.1067%" height="15" fill="rgb(215,211,37)" fg:x="18523" fg:w="64"/><text x="31.1232%" y="446.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:94) (111 samples, 0.19%)</title><rect x="30.9932%" y="404" width="0.1850%" height="15" fill="rgb(241,128,51)" fg:x="18595" fg:w="111"/><text x="31.2432%" y="414.50"></text></g><g><title>action_space (gymnasium\core.py:338) (74 samples, 0.12%)</title><rect x="31.0549%" y="420" width="0.1233%" height="15" fill="rgb(227,165,31)" fg:x="18632" fg:w="74"/><text x="31.3049%" y="430.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:95) (232 samples, 0.39%)</title><rect x="31.1782%" y="404" width="0.3867%" height="15" fill="rgb(228,167,24)" fg:x="18706" fg:w="232"/><text x="31.4282%" y="414.50"></text></g><g><title>action_space (gymnasium\core.py:338) (173 samples, 0.29%)</title><rect x="31.2766%" y="420" width="0.2883%" height="15" fill="rgb(228,143,12)" fg:x="18765" fg:w="173"/><text x="31.5266%" y="430.50"></text></g><g><title>action_space (gymnasium\core.py:338) (116 samples, 0.19%)</title><rect x="31.3716%" y="436" width="0.1933%" height="15" fill="rgb(249,149,8)" fg:x="18822" fg:w="116"/><text x="31.6216%" y="446.50"></text></g><g><title>action_space (gymnasium\core.py:338) (72 samples, 0.12%)</title><rect x="31.4449%" y="452" width="0.1200%" height="15" fill="rgb(243,35,44)" fg:x="18866" fg:w="72"/><text x="31.6949%" y="462.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:96) (296 samples, 0.49%)</title><rect x="31.5649%" y="404" width="0.4934%" height="15" fill="rgb(246,89,9)" fg:x="18938" fg:w="296"/><text x="31.8149%" y="414.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:98) (71 samples, 0.12%)</title><rect x="32.0583%" y="404" width="0.1183%" height="15" fill="rgb(233,213,13)" fg:x="19234" fg:w="71"/><text x="32.3083%" y="414.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:58) (10,776 samples, 17.96%)</title><rect x="14.7591%" y="372" width="17.9609%" height="15" fill="rgb(233,141,41)" fg:x="8855" fg:w="10776"/><text x="15.0091%" y="382.50">step_wait (stable_baselines3..</text></g><g><title>step (wrappers\cemrl_wrapper.py:64) (1,689 samples, 2.82%)</title><rect x="29.9048%" y="388" width="2.8151%" height="15" fill="rgb(239,167,4)" fg:x="17942" fg:w="1689"/><text x="30.1548%" y="398.50">st..</text></g><g><title>observation (wrappers\cemrl_wrapper.py:99) (326 samples, 0.54%)</title><rect x="32.1766%" y="404" width="0.5434%" height="15" fill="rgb(209,217,16)" fg:x="19305" fg:w="326"/><text x="32.4266%" y="414.50"></text></g><g><title>step (toy_goal_env.py:67) (154 samples, 0.26%)</title><rect x="32.9750%" y="500" width="0.2567%" height="15" fill="rgb(219,88,35)" fg:x="19784" fg:w="154"/><text x="33.2250%" y="510.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;:200) (136 samples, 0.23%)</title><rect x="33.0050%" y="516" width="0.2267%" height="15" fill="rgb(220,193,23)" fg:x="19802" fg:w="136"/><text x="33.2550%" y="526.50"></text></g><g><title>clip (numpy\core\fromnumeric.py:2180) (133 samples, 0.22%)</title><rect x="33.0100%" y="532" width="0.2217%" height="15" fill="rgb(230,90,52)" fg:x="19805" fg:w="133"/><text x="33.2600%" y="542.50"></text></g><g><title>_wrapfunc (numpy\core\fromnumeric.py:57) (118 samples, 0.20%)</title><rect x="33.0350%" y="548" width="0.1967%" height="15" fill="rgb(252,106,19)" fg:x="19820" fg:w="118"/><text x="33.2850%" y="558.50"></text></g><g><title>norm (&lt;__array_function__ internals&gt;:200) (67 samples, 0.11%)</title><rect x="33.3350%" y="532" width="0.1117%" height="15" fill="rgb(206,74,20)" fg:x="20000" fg:w="67"/><text x="33.5850%" y="542.50"></text></g><g><title>get_reward (toy_goal_env.py:97) (106 samples, 0.18%)</title><rect x="33.2717%" y="516" width="0.1767%" height="15" fill="rgb(230,138,44)" fg:x="19962" fg:w="106"/><text x="33.5217%" y="526.50"></text></g><g><title>step (toy_goal_env.py:73) (135 samples, 0.23%)</title><rect x="33.2717%" y="500" width="0.2250%" height="15" fill="rgb(235,182,43)" fg:x="19962" fg:w="135"/><text x="33.5217%" y="510.50"></text></g><g><title>step (success.py:10) (365 samples, 0.61%)</title><rect x="32.9066%" y="452" width="0.6084%" height="15" fill="rgb(242,16,51)" fg:x="19743" fg:w="365"/><text x="33.1566%" y="462.50"></text></g><g><title>step (gymnasium\core.py:408) (354 samples, 0.59%)</title><rect x="32.9250%" y="468" width="0.5900%" height="15" fill="rgb(248,9,4)" fg:x="19754" fg:w="354"/><text x="33.1750%" y="478.50"></text></g><g><title>step (toy_goal_env.py:159) (343 samples, 0.57%)</title><rect x="32.9433%" y="484" width="0.5717%" height="15" fill="rgb(210,31,22)" fg:x="19765" fg:w="343"/><text x="33.1933%" y="494.50"></text></g><g><title>step (gymnasium\core.py:469) (414 samples, 0.69%)</title><rect x="32.8983%" y="436" width="0.6900%" height="15" fill="rgb(239,54,39)" fg:x="19738" fg:w="414"/><text x="33.1483%" y="446.50"></text></g><g><title>add_to_heatmap (heatmap.py:26) (72 samples, 0.12%)</title><rect x="33.7000%" y="468" width="0.1200%" height="15" fill="rgb(230,99,41)" fg:x="20219" fg:w="72"/><text x="33.9500%" y="478.50"></text></g><g><title>step (gymnasium\wrappers\time_limit.py:57) (888 samples, 1.48%)</title><rect x="32.8916%" y="420" width="1.4801%" height="15" fill="rgb(253,106,12)" fg:x="19734" fg:w="888"/><text x="33.1416%" y="430.50"></text></g><g><title>step (gymnasium\core.py:470) (470 samples, 0.78%)</title><rect x="33.5883%" y="436" width="0.7834%" height="15" fill="rgb(213,46,41)" fg:x="20152" fg:w="470"/><text x="33.8383%" y="446.50"></text></g><g><title>observation (heatmap.py:38) (466 samples, 0.78%)</title><rect x="33.5950%" y="452" width="0.7767%" height="15" fill="rgb(215,133,35)" fg:x="20156" fg:w="466"/><text x="33.8450%" y="462.50"></text></g><g><title>add_to_heatmap (heatmap.py:35) (207 samples, 0.35%)</title><rect x="34.0267%" y="468" width="0.3450%" height="15" fill="rgb(213,28,5)" fg:x="20415" fg:w="207"/><text x="34.2767%" y="478.50"></text></g><g><title>step (wrappers\cemrl_wrapper.py:63) (897 samples, 1.50%)</title><rect x="32.8816%" y="404" width="1.4951%" height="15" fill="rgb(215,77,49)" fg:x="19728" fg:w="897"/><text x="33.1316%" y="414.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:70) (1,197 samples, 2.00%)</title><rect x="32.7850%" y="372" width="1.9951%" height="15" fill="rgb(248,100,22)" fg:x="19670" fg:w="1197"/><text x="33.0350%" y="382.50">s..</text></g><g><title>reset (wrappers\cemrl_wrapper.py:80) (1,146 samples, 1.91%)</title><rect x="32.8700%" y="388" width="1.9101%" height="15" fill="rgb(208,67,9)" fg:x="19721" fg:w="1146"/><text x="33.1200%" y="398.50">r..</text></g><g><title>step (wrappers\cemrl_wrapper.py:64) (242 samples, 0.40%)</title><rect x="34.3767%" y="404" width="0.4034%" height="15" fill="rgb(219,133,21)" fg:x="20625" fg:w="242"/><text x="34.6267%" y="414.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:71) (236 samples, 0.39%)</title><rect x="34.7801%" y="372" width="0.3934%" height="15" fill="rgb(246,46,29)" fg:x="20867" fg:w="236"/><text x="35.0301%" y="382.50"></text></g><g><title>_save_obs (stable_baselines3\common\vec_env\dummy_vec_env.py:108) (160 samples, 0.27%)</title><rect x="34.9067%" y="388" width="0.2667%" height="15" fill="rgb(246,185,52)" fg:x="20943" fg:w="160"/><text x="35.1567%" y="398.50"></text></g><g><title>deepcopy (copy.py:134) (174 samples, 0.29%)</title><rect x="35.5318%" y="452" width="0.2900%" height="15" fill="rgb(252,136,11)" fg:x="21318" fg:w="174"/><text x="35.7818%" y="462.50"></text></g><g><title>deepcopy (copy.py:138) (68 samples, 0.11%)</title><rect x="35.8951%" y="452" width="0.1133%" height="15" fill="rgb(219,138,53)" fg:x="21536" fg:w="68"/><text x="36.1451%" y="462.50"></text></g><g><title>deepcopy (copy.py:144) (68 samples, 0.11%)</title><rect x="36.1001%" y="452" width="0.1133%" height="15" fill="rgb(211,51,23)" fg:x="21659" fg:w="68"/><text x="36.3501%" y="462.50"></text></g><g><title>_deepcopy_atomic (copy.py:183) (128 samples, 0.21%)</title><rect x="36.3668%" y="468" width="0.2133%" height="15" fill="rgb(247,221,28)" fg:x="21819" fg:w="128"/><text x="36.6168%" y="478.50"></text></g><g><title>deepcopy (copy.py:146) (199 samples, 0.33%)</title><rect x="36.2651%" y="452" width="0.3317%" height="15" fill="rgb(251,222,45)" fg:x="21758" fg:w="199"/><text x="36.5151%" y="462.50"></text></g><g><title>deepcopy (copy.py:153) (122 samples, 0.20%)</title><rect x="36.6802%" y="452" width="0.2033%" height="15" fill="rgb(217,162,53)" fg:x="22007" fg:w="122"/><text x="36.9302%" y="462.50"></text></g><g><title>deepcopy (copy.py:177) (80 samples, 0.13%)</title><rect x="36.9885%" y="452" width="0.1333%" height="15" fill="rgb(229,93,14)" fg:x="22192" fg:w="80"/><text x="37.2385%" y="462.50"></text></g><g><title>_deepcopy_dict (copy.py:231) (1,051 samples, 1.75%)</title><rect x="35.4134%" y="436" width="1.7518%" height="15" fill="rgb(209,67,49)" fg:x="21247" fg:w="1051"/><text x="35.6634%" y="446.50"></text></g><g><title>deepcopy (copy.py:146) (1,123 samples, 1.87%)</title><rect x="35.3001%" y="420" width="1.8718%" height="15" fill="rgb(213,87,29)" fg:x="21179" fg:w="1123"/><text x="35.5501%" y="430.50">d..</text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:544) (13,509 samples, 22.52%)</title><rect x="14.7507%" y="340" width="22.5161%" height="15" fill="rgb(205,151,52)" fg:x="8850" fg:w="13509"/><text x="15.0007%" y="350.50">collect_rollouts (stable_baselines3\..</text></g><g><title>step (stable_baselines3\common\vec_env\base_vec_env.py:180) (13,509 samples, 22.52%)</title><rect x="14.7507%" y="356" width="22.5161%" height="15" fill="rgb(253,215,39)" fg:x="8850" fg:w="13509"/><text x="15.0007%" y="366.50">step (stable_baselines3\common\vec_e..</text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:72) (1,256 samples, 2.09%)</title><rect x="35.1734%" y="372" width="2.0934%" height="15" fill="rgb(221,220,41)" fg:x="21103" fg:w="1256"/><text x="35.4234%" y="382.50">s..</text></g><g><title>deepcopy (copy.py:146) (1,247 samples, 2.08%)</title><rect x="35.1884%" y="388" width="2.0784%" height="15" fill="rgb(218,133,21)" fg:x="21112" fg:w="1247"/><text x="35.4384%" y="398.50">d..</text></g><g><title>_deepcopy_list (copy.py:206) (1,242 samples, 2.07%)</title><rect x="35.1968%" y="404" width="2.0701%" height="15" fill="rgb(221,193,43)" fg:x="21117" fg:w="1242"/><text x="35.4468%" y="414.50">_..</text></g><g><title>_wrapreduction (numpy\core\fromnumeric.py:70) (69 samples, 0.12%)</title><rect x="37.6152%" y="420" width="0.1150%" height="15" fill="rgb(240,128,52)" fg:x="22568" fg:w="69"/><text x="37.8652%" y="430.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;:200) (191 samples, 0.32%)</title><rect x="37.5252%" y="388" width="0.3183%" height="15" fill="rgb(253,114,12)" fg:x="22514" fg:w="191"/><text x="37.7752%" y="398.50"></text></g><g><title>all (numpy\core\fromnumeric.py:2515) (173 samples, 0.29%)</title><rect x="37.5552%" y="404" width="0.2883%" height="15" fill="rgb(215,223,47)" fg:x="22532" fg:w="173"/><text x="37.8052%" y="414.50"></text></g><g><title>add (buffers.py:93) (267 samples, 0.45%)</title><rect x="37.4069%" y="372" width="0.4450%" height="15" fill="rgb(248,225,23)" fg:x="22443" fg:w="267"/><text x="37.6569%" y="382.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:559) (317 samples, 0.53%)</title><rect x="37.3252%" y="340" width="0.5284%" height="15" fill="rgb(250,108,0)" fg:x="22394" fg:w="317"/><text x="37.5752%" y="350.50"></text></g><g><title>_store_transition (stable_baselines3\common\off_policy_algorithm.py:472) (310 samples, 0.52%)</title><rect x="37.3369%" y="356" width="0.5167%" height="15" fill="rgb(228,208,7)" fg:x="22401" fg:w="310"/><text x="37.5869%" y="366.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:533) (15,888 samples, 26.48%)</title><rect x="11.3806%" y="228" width="26.4813%" height="15" fill="rgb(244,45,10)" fg:x="6828" fg:w="15888"/><text x="11.6306%" y="238.50">collect_rollouts (stable_baselines3\common..</text></g><g><title>on_rollout_start (stable_baselines3\common\callbacks.py:80) (15,888 samples, 26.48%)</title><rect x="11.3806%" y="244" width="26.4813%" height="15" fill="rgb(207,125,25)" fg:x="6828" fg:w="15888"/><text x="11.6306%" y="254.50">on_rollout_start (stable_baselines3\common..</text></g><g><title>_on_rollout_start (stable_baselines3\common\callbacks.py:202) (15,888 samples, 26.48%)</title><rect x="11.3806%" y="260" width="26.4813%" height="15" fill="rgb(210,195,18)" fg:x="6828" fg:w="15888"/><text x="11.6306%" y="270.50">_on_rollout_start (stable_baselines3\commo..</text></g><g><title>on_rollout_start (stable_baselines3\common\callbacks.py:80) (15,888 samples, 26.48%)</title><rect x="11.3806%" y="276" width="26.4813%" height="15" fill="rgb(249,80,12)" fg:x="6828" fg:w="15888"/><text x="11.6306%" y="286.50">on_rollout_start (stable_baselines3\common..</text></g><g><title>_on_rollout_start (stable_baselines3\common\callbacks.py:202) (15,888 samples, 26.48%)</title><rect x="11.3806%" y="292" width="26.4813%" height="15" fill="rgb(221,65,9)" fg:x="6828" fg:w="15888"/><text x="11.6306%" y="302.50">_on_rollout_start (stable_baselines3\commo..</text></g><g><title>on_rollout_start (stable_baselines3\common\callbacks.py:80) (15,888 samples, 26.48%)</title><rect x="11.3806%" y="308" width="26.4813%" height="15" fill="rgb(235,49,36)" fg:x="6828" fg:w="15888"/><text x="11.6306%" y="318.50">on_rollout_start (stable_baselines3\common..</text></g><g><title>_on_rollout_start (callbacks\exploration_callback.py:90) (15,888 samples, 26.48%)</title><rect x="11.3806%" y="324" width="26.4813%" height="15" fill="rgb(225,32,20)" fg:x="6828" fg:w="15888"/><text x="11.6306%" y="334.50">_on_rollout_start (callbacks\exploration_c..</text></g><g><title>forward (networks.py:30) (80 samples, 0.13%)</title><rect x="37.8936%" y="356" width="0.1333%" height="15" fill="rgb(215,141,46)" fg:x="22735" fg:w="80"/><text x="38.1436%" y="366.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (80 samples, 0.13%)</title><rect x="37.8936%" y="372" width="0.1333%" height="15" fill="rgb(250,160,47)" fg:x="22735" fg:w="80"/><text x="38.1436%" y="382.50"></text></g><g><title>_predict (policies.py:68) (85 samples, 0.14%)</title><rect x="37.8936%" y="308" width="0.1417%" height="15" fill="rgb(216,222,40)" fg:x="22735" fg:w="85"/><text x="38.1436%" y="318.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (85 samples, 0.14%)</title><rect x="37.8936%" y="324" width="0.1417%" height="15" fill="rgb(234,217,39)" fg:x="22735" fg:w="85"/><text x="38.1436%" y="334.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (85 samples, 0.14%)</title><rect x="37.8936%" y="340" width="0.1417%" height="15" fill="rgb(207,178,40)" fg:x="22735" fg:w="85"/><text x="38.1436%" y="350.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:349) (96 samples, 0.16%)</title><rect x="37.8919%" y="276" width="0.1600%" height="15" fill="rgb(221,136,13)" fg:x="22734" fg:w="96"/><text x="38.1419%" y="286.50"></text></g><g><title>decorate_context (torch\utils\_contextlib.py:115) (96 samples, 0.16%)</title><rect x="37.8919%" y="292" width="0.1600%" height="15" fill="rgb(249,199,10)" fg:x="22734" fg:w="96"/><text x="38.1419%" y="302.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:541) (115 samples, 0.19%)</title><rect x="37.8619%" y="228" width="0.1917%" height="15" fill="rgb(249,222,13)" fg:x="22716" fg:w="115"/><text x="38.1119%" y="238.50"></text></g><g><title>_sample_action (stable_baselines3\common\off_policy_algorithm.py:373) (115 samples, 0.19%)</title><rect x="37.8619%" y="244" width="0.1917%" height="15" fill="rgb(244,185,38)" fg:x="22716" fg:w="115"/><text x="38.1119%" y="254.50"></text></g><g><title>predict (stable_baselines3\common\base_class.py:555) (115 samples, 0.19%)</title><rect x="37.8619%" y="260" width="0.1917%" height="15" fill="rgb(236,202,9)" fg:x="22716" fg:w="115"/><text x="38.1119%" y="270.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;:200) (96 samples, 0.16%)</title><rect x="38.1269%" y="388" width="0.1600%" height="15" fill="rgb(250,229,37)" fg:x="22875" fg:w="96"/><text x="38.3769%" y="398.50"></text></g><g><title>clip (numpy\core\fromnumeric.py:2180) (94 samples, 0.16%)</title><rect x="38.1302%" y="404" width="0.1567%" height="15" fill="rgb(206,174,23)" fg:x="22877" fg:w="94"/><text x="38.3802%" y="414.50"></text></g><g><title>_wrapfunc (numpy\core\fromnumeric.py:57) (77 samples, 0.13%)</title><rect x="38.1586%" y="420" width="0.1283%" height="15" fill="rgb(211,33,43)" fg:x="22894" fg:w="77"/><text x="38.4086%" y="430.50"></text></g><g><title>step (toy_goal_env.py:67) (105 samples, 0.18%)</title><rect x="38.1136%" y="372" width="0.1750%" height="15" fill="rgb(245,58,50)" fg:x="22867" fg:w="105"/><text x="38.3636%" y="382.50"></text></g><g><title>step (toy_goal_env.py:73) (70 samples, 0.12%)</title><rect x="38.3186%" y="372" width="0.1167%" height="15" fill="rgb(244,68,36)" fg:x="22990" fg:w="70"/><text x="38.5686%" y="382.50"></text></g><g><title>step (success.py:10) (221 samples, 0.37%)</title><rect x="38.0786%" y="324" width="0.3684%" height="15" fill="rgb(232,229,15)" fg:x="22846" fg:w="221"/><text x="38.3286%" y="334.50"></text></g><g><title>step (gymnasium\core.py:408) (214 samples, 0.36%)</title><rect x="38.0902%" y="340" width="0.3567%" height="15" fill="rgb(254,30,23)" fg:x="22853" fg:w="214"/><text x="38.3402%" y="350.50"></text></g><g><title>step (toy_goal_env.py:159) (208 samples, 0.35%)</title><rect x="38.1002%" y="356" width="0.3467%" height="15" fill="rgb(235,160,14)" fg:x="22859" fg:w="208"/><text x="38.3502%" y="366.50"></text></g><g><title>step (gymnasium\core.py:469) (259 samples, 0.43%)</title><rect x="38.0752%" y="308" width="0.4317%" height="15" fill="rgb(212,155,44)" fg:x="22844" fg:w="259"/><text x="38.3252%" y="318.50"></text></g><g><title>add_to_heatmap (heatmap.py:26) (63 samples, 0.11%)</title><rect x="38.5869%" y="340" width="0.1050%" height="15" fill="rgb(226,2,50)" fg:x="23151" fg:w="63"/><text x="38.8369%" y="350.50"></text></g><g><title>step (gymnasium\wrappers\time_limit.py:57) (895 samples, 1.49%)</title><rect x="38.0702%" y="292" width="1.4917%" height="15" fill="rgb(234,177,6)" fg:x="22841" fg:w="895"/><text x="38.3202%" y="302.50"></text></g><g><title>step (gymnasium\core.py:470) (633 samples, 1.06%)</title><rect x="38.5069%" y="308" width="1.0551%" height="15" fill="rgb(217,24,9)" fg:x="23103" fg:w="633"/><text x="38.7569%" y="318.50"></text></g><g><title>observation (heatmap.py:38) (631 samples, 1.05%)</title><rect x="38.5103%" y="324" width="1.0517%" height="15" fill="rgb(220,13,46)" fg:x="23105" fg:w="631"/><text x="38.7603%" y="334.50"></text></g><g><title>add_to_heatmap (heatmap.py:35) (441 samples, 0.74%)</title><rect x="38.8269%" y="340" width="0.7350%" height="15" fill="rgb(239,221,27)" fg:x="23295" fg:w="441"/><text x="39.0769%" y="350.50"></text></g><g><title>step (wrappers\cemrl_wrapper.py:63) (906 samples, 1.51%)</title><rect x="38.0669%" y="276" width="1.5101%" height="15" fill="rgb(222,198,25)" fg:x="22839" fg:w="906"/><text x="38.3169%" y="286.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:58) (1,055 samples, 1.76%)</title><rect x="38.0536%" y="260" width="1.7584%" height="15" fill="rgb(211,99,13)" fg:x="22831" fg:w="1055"/><text x="38.3036%" y="270.50"></text></g><g><title>step (wrappers\cemrl_wrapper.py:64) (141 samples, 0.24%)</title><rect x="39.5770%" y="276" width="0.2350%" height="15" fill="rgb(232,111,31)" fg:x="23745" fg:w="141"/><text x="39.8270%" y="286.50"></text></g><g><title>deepcopy (copy.py:146) (110 samples, 0.18%)</title><rect x="39.8587%" y="308" width="0.1833%" height="15" fill="rgb(245,82,37)" fg:x="23914" fg:w="110"/><text x="40.1087%" y="318.50"></text></g><g><title>_deepcopy_dict (copy.py:231) (108 samples, 0.18%)</title><rect x="39.8620%" y="324" width="0.1800%" height="15" fill="rgb(227,149,46)" fg:x="23916" fg:w="108"/><text x="40.1120%" y="334.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:544) (1,200 samples, 2.00%)</title><rect x="38.0536%" y="228" width="2.0001%" height="15" fill="rgb(218,36,50)" fg:x="22831" fg:w="1200"/><text x="38.3036%" y="238.50">c..</text></g><g><title>step (stable_baselines3\common\vec_env\base_vec_env.py:180) (1,200 samples, 2.00%)</title><rect x="38.0536%" y="244" width="2.0001%" height="15" fill="rgb(226,80,48)" fg:x="22831" fg:w="1200"/><text x="38.3036%" y="254.50">s..</text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:72) (122 samples, 0.20%)</title><rect x="39.8503%" y="260" width="0.2033%" height="15" fill="rgb(238,224,15)" fg:x="23909" fg:w="122"/><text x="40.1003%" y="270.50"></text></g><g><title>deepcopy (copy.py:146) (122 samples, 0.20%)</title><rect x="39.8503%" y="276" width="0.2033%" height="15" fill="rgb(241,136,10)" fg:x="23909" fg:w="122"/><text x="40.1003%" y="286.50"></text></g><g><title>_deepcopy_list (copy.py:206) (122 samples, 0.20%)</title><rect x="39.8503%" y="292" width="0.2033%" height="15" fill="rgb(208,32,45)" fg:x="23909" fg:w="122"/><text x="40.1003%" y="302.50"></text></g><g><title>learn (stable_baselines3\common\off_policy_algorithm.py:312) (17,256 samples, 28.76%)</title><rect x="11.3672%" y="212" width="28.7614%" height="15" fill="rgb(207,135,9)" fg:x="6820" fg:w="17256"/><text x="11.6172%" y="222.50">learn (stable_baselines3\common\off_policy_alg..</text></g><g><title>children (torch\nn\modules\module.py:2173) (91 samples, 0.15%)</title><rect x="40.4737%" y="356" width="0.1517%" height="15" fill="rgb(206,86,44)" fg:x="24283" fg:w="91"/><text x="40.7237%" y="366.50"></text></g><g><title>train (torch\nn\modules\module.py:2287) (125 samples, 0.21%)</title><rect x="40.4720%" y="340" width="0.2083%" height="15" fill="rgb(245,177,15)" fg:x="24282" fg:w="125"/><text x="40.7220%" y="350.50"></text></g><g><title>train (torch\nn\modules\module.py:2286) (82 samples, 0.14%)</title><rect x="40.7070%" y="356" width="0.1367%" height="15" fill="rgb(206,64,50)" fg:x="24423" fg:w="82"/><text x="40.9570%" y="366.50"></text></g><g><title>train (torch\nn\modules\module.py:2287) (112 samples, 0.19%)</title><rect x="40.8437%" y="356" width="0.1867%" height="15" fill="rgb(234,36,40)" fg:x="24505" fg:w="112"/><text x="41.0937%" y="366.50"></text></g><g><title>children (torch\nn\modules\module.py:2173) (109 samples, 0.18%)</title><rect x="40.8487%" y="372" width="0.1817%" height="15" fill="rgb(213,64,8)" fg:x="24508" fg:w="109"/><text x="41.0987%" y="382.50"></text></g><g><title>reconstruction_training_step (cemrl.py:120) (476 samples, 0.79%)</title><rect x="40.2403%" y="244" width="0.7934%" height="15" fill="rgb(210,75,36)" fg:x="24143" fg:w="476"/><text x="40.4903%" y="254.50"></text></g><g><title>set_training_mode (stable_baselines3\common\policies.py:209) (476 samples, 0.79%)</title><rect x="40.2403%" y="260" width="0.7934%" height="15" fill="rgb(229,88,21)" fg:x="24143" fg:w="476"/><text x="40.4903%" y="270.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (463 samples, 0.77%)</title><rect x="40.2620%" y="276" width="0.7717%" height="15" fill="rgb(252,204,47)" fg:x="24156" fg:w="463"/><text x="40.5120%" y="286.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (445 samples, 0.74%)</title><rect x="40.2920%" y="292" width="0.7417%" height="15" fill="rgb(208,77,27)" fg:x="24174" fg:w="445"/><text x="40.5420%" y="302.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (409 samples, 0.68%)</title><rect x="40.3520%" y="308" width="0.6817%" height="15" fill="rgb(221,76,26)" fg:x="24210" fg:w="409"/><text x="40.6020%" y="318.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (355 samples, 0.59%)</title><rect x="40.4420%" y="324" width="0.5917%" height="15" fill="rgb(225,139,18)" fg:x="24264" fg:w="355"/><text x="40.6920%" y="334.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (212 samples, 0.35%)</title><rect x="40.6804%" y="340" width="0.3534%" height="15" fill="rgb(230,137,11)" fg:x="24407" fg:w="212"/><text x="40.9304%" y="350.50"></text></g><g><title>valid_indices (buffers.py:108) (89 samples, 0.15%)</title><rect x="41.1254%" y="260" width="0.1483%" height="15" fill="rgb(212,28,1)" fg:x="24674" fg:w="89"/><text x="41.3754%" y="270.50"></text></g><g><title>reconstruction_training_step (cemrl.py:121) (245 samples, 0.41%)</title><rect x="41.0337%" y="244" width="0.4084%" height="15" fill="rgb(248,164,17)" fg:x="24619" fg:w="245"/><text x="41.2837%" y="254.50"></text></g><g><title>valid_indices (buffers.py:109) (101 samples, 0.17%)</title><rect x="41.2737%" y="260" width="0.1683%" height="15" fill="rgb(222,171,42)" fg:x="24763" fg:w="101"/><text x="41.5237%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:143) (94 samples, 0.16%)</title><rect x="41.5087%" y="260" width="0.1567%" height="15" fill="rgb(243,84,45)" fg:x="24904" fg:w="94"/><text x="41.7587%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:144) (74 samples, 0.12%)</title><rect x="41.6654%" y="260" width="0.1233%" height="15" fill="rgb(252,49,23)" fg:x="24998" fg:w="74"/><text x="41.9154%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:145) (62 samples, 0.10%)</title><rect x="41.7888%" y="260" width="0.1033%" height="15" fill="rgb(215,19,7)" fg:x="25072" fg:w="62"/><text x="42.0388%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:150) (100 samples, 0.17%)</title><rect x="41.9871%" y="260" width="0.1667%" height="15" fill="rgb(238,81,41)" fg:x="25191" fg:w="100"/><text x="42.2371%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:151) (1,338 samples, 2.23%)</title><rect x="42.1538%" y="260" width="2.2301%" height="15" fill="rgb(210,199,37)" fg:x="25291" fg:w="1338"/><text x="42.4038%" y="270.50">g..</text></g><g><title>get_encoder_context (buffers.py:152) (1,364 samples, 2.27%)</title><rect x="44.3839%" y="260" width="2.2734%" height="15" fill="rgb(244,192,49)" fg:x="26629" fg:w="1364"/><text x="44.6339%" y="270.50">g..</text></g><g><title>get_encoder_context (buffers.py:153) (1,425 samples, 2.38%)</title><rect x="46.6573%" y="260" width="2.3751%" height="15" fill="rgb(226,211,11)" fg:x="27993" fg:w="1425"/><text x="46.9073%" y="270.50">ge..</text></g><g><title>get_encoder_context (buffers.py:154) (1,363 samples, 2.27%)</title><rect x="49.0325%" y="260" width="2.2718%" height="15" fill="rgb(236,162,54)" fg:x="29418" fg:w="1363"/><text x="49.2825%" y="270.50">g..</text></g><g><title>get_encoder_context (buffers.py:155) (1,332 samples, 2.22%)</title><rect x="51.3042%" y="260" width="2.2201%" height="15" fill="rgb(220,229,9)" fg:x="30781" fg:w="1332"/><text x="51.5542%" y="270.50">g..</text></g><g><title>reconstruction_training_step (cemrl.py:123) (7,260 samples, 12.10%)</title><rect x="41.4421%" y="244" width="12.1006%" height="15" fill="rgb(250,87,22)" fg:x="24864" fg:w="7260"/><text x="41.6921%" y="254.50">reconstruction_tra..</text></g><g><title>factorize (pandas\core\algorithms.py:818) (81 samples, 0.14%)</title><rect x="53.6077%" y="372" width="0.1350%" height="15" fill="rgb(239,43,17)" fg:x="32163" fg:w="81"/><text x="53.8577%" y="382.50"></text></g><g><title>factorize_array (pandas\core\algorithms.py:574) (80 samples, 0.13%)</title><rect x="53.6093%" y="388" width="0.1333%" height="15" fill="rgb(231,177,25)" fg:x="32164" fg:w="80"/><text x="53.8593%" y="398.50"></text></g><g><title>codes (pandas\core\groupby\grouper.py:621) (112 samples, 0.19%)</title><rect x="53.6060%" y="340" width="0.1867%" height="15" fill="rgb(219,179,1)" fg:x="32162" fg:w="112"/><text x="53.8560%" y="350.50"></text></g><g><title>_codes_and_uniques (pandas\core\groupby\grouper.py:692) (112 samples, 0.19%)</title><rect x="53.6060%" y="356" width="0.1867%" height="15" fill="rgb(238,219,53)" fg:x="32162" fg:w="112"/><text x="53.8560%" y="366.50"></text></g><g><title>_reverse_indexer (pandas\core\arrays\categorical.py:2281) (68 samples, 0.11%)</title><rect x="53.8360%" y="356" width="0.1133%" height="15" fill="rgb(232,167,36)" fg:x="32300" fg:w="68"/><text x="54.0860%" y="366.50"></text></g><g><title>groupby (pandas\core\indexes\base.py:6376) (92 samples, 0.15%)</title><rect x="53.8360%" y="340" width="0.1533%" height="15" fill="rgb(244,19,51)" fg:x="32300" fg:w="92"/><text x="54.0860%" y="350.50"></text></g><g><title>take (pandas\core\indexes\base.py:1184) (62 samples, 0.10%)</title><rect x="54.0127%" y="372" width="0.1033%" height="15" fill="rgb(224,6,22)" fg:x="32406" fg:w="62"/><text x="54.2627%" y="382.50"></text></g><g><title>take (pandas\core\algorithms.py:1573) (60 samples, 0.10%)</title><rect x="54.0160%" y="388" width="0.1000%" height="15" fill="rgb(224,145,5)" fg:x="32408" fg:w="60"/><text x="54.2660%" y="398.50"></text></g><g><title>_build_decoder_index (buffers.py:194) (308 samples, 0.51%)</title><rect x="53.6043%" y="276" width="0.5134%" height="15" fill="rgb(234,130,49)" fg:x="32161" fg:w="308"/><text x="53.8543%" y="286.50"></text></g><g><title>groups (pandas\core\groupby\groupby.py:666) (308 samples, 0.51%)</title><rect x="53.6043%" y="292" width="0.5134%" height="15" fill="rgb(254,6,2)" fg:x="32161" fg:w="308"/><text x="53.8543%" y="302.50"></text></g><g><title>groups (pandas\core\groupby\ops.py:924) (308 samples, 0.51%)</title><rect x="53.6043%" y="308" width="0.5134%" height="15" fill="rgb(208,96,46)" fg:x="32161" fg:w="308"/><text x="53.8543%" y="318.50"></text></g><g><title>groups (pandas\core\groupby\grouper.py:699) (308 samples, 0.51%)</title><rect x="53.6043%" y="324" width="0.5134%" height="15" fill="rgb(239,3,39)" fg:x="32161" fg:w="308"/><text x="53.8543%" y="334.50"></text></g><g><title>groupby (pandas\core\indexes\base.py:6379) (77 samples, 0.13%)</title><rect x="53.9894%" y="340" width="0.1283%" height="15" fill="rgb(233,210,1)" fg:x="32392" fg:w="77"/><text x="54.2394%" y="350.50"></text></g><g><title>&lt;dictcomp&gt; (pandas\core\indexes\base.py:6379) (75 samples, 0.13%)</title><rect x="53.9927%" y="356" width="0.1250%" height="15" fill="rgb(244,137,37)" fg:x="32394" fg:w="75"/><text x="54.2427%" y="366.50"></text></g><g><title>_bin_edges (scipy\stats\_binned_statistic.py:725) (83 samples, 0.14%)</title><rect x="54.2144%" y="308" width="0.1383%" height="15" fill="rgb(240,136,2)" fg:x="32527" fg:w="83"/><text x="54.4644%" y="318.50"></text></g><g><title>_amin (numpy\core\_methods.py:45) (83 samples, 0.14%)</title><rect x="54.2144%" y="324" width="0.1383%" height="15" fill="rgb(239,18,37)" fg:x="32527" fg:w="83"/><text x="54.4644%" y="334.50"></text></g><g><title>binned_statistic_dd (scipy\stats\_binned_statistic.py:583) (139 samples, 0.23%)</title><rect x="54.2144%" y="292" width="0.2317%" height="15" fill="rgb(218,185,22)" fg:x="32527" fg:w="139"/><text x="54.4644%" y="302.50"></text></g><g><title>binned_statistic_dd (scipy\stats\_binned_statistic.py:584) (74 samples, 0.12%)</title><rect x="54.4461%" y="292" width="0.1233%" height="15" fill="rgb(225,218,4)" fg:x="32666" fg:w="74"/><text x="54.6961%" y="302.50"></text></g><g><title>_build_decoder_index (buffers.py:199) (257 samples, 0.43%)</title><rect x="54.1444%" y="276" width="0.4284%" height="15" fill="rgb(230,182,32)" fg:x="32485" fg:w="257"/><text x="54.3944%" y="286.50"></text></g><g><title>_build_decoder_index (buffers.py:200) (92 samples, 0.15%)</title><rect x="54.5727%" y="276" width="0.1533%" height="15" fill="rgb(242,56,43)" fg:x="32742" fg:w="92"/><text x="54.8227%" y="286.50"></text></g><g><title>unique (&lt;__array_function__ internals&gt;:200) (92 samples, 0.15%)</title><rect x="54.5727%" y="292" width="0.1533%" height="15" fill="rgb(233,99,24)" fg:x="32742" fg:w="92"/><text x="54.8227%" y="302.50"></text></g><g><title>unique (numpy\lib\arraysetops.py:274) (92 samples, 0.15%)</title><rect x="54.5727%" y="308" width="0.1533%" height="15" fill="rgb(234,209,42)" fg:x="32742" fg:w="92"/><text x="54.8227%" y="318.50"></text></g><g><title>get_decoder_targets (buffers.py:172) (733 samples, 1.22%)</title><rect x="53.5577%" y="260" width="1.2217%" height="15" fill="rgb(227,7,12)" fg:x="32133" fg:w="733"/><text x="53.8077%" y="270.50"></text></g><g><title>__array__ (pandas\core\indexes\base.py:936) (113 samples, 0.19%)</title><rect x="65.2766%" y="276" width="0.1883%" height="15" fill="rgb(245,203,43)" fg:x="39164" fg:w="113"/><text x="65.5266%" y="286.50"></text></g><g><title>__new__ (numpy\core\getlimits.py:477) (81 samples, 0.14%)</title><rect x="65.4649%" y="276" width="0.1350%" height="15" fill="rgb(238,205,33)" fg:x="39277" fg:w="81"/><text x="65.7149%" y="286.50"></text></g><g><title>__new__ (numpy\core\getlimits.py:478) (68 samples, 0.11%)</title><rect x="65.5999%" y="276" width="0.1133%" height="15" fill="rgb(231,56,7)" fg:x="39358" fg:w="68"/><text x="65.8499%" y="286.50"></text></g><g><title>issubdtype (numpy\core\numerictypes.py:415) (154 samples, 0.26%)</title><rect x="65.8100%" y="276" width="0.2567%" height="15" fill="rgb(244,186,29)" fg:x="39484" fg:w="154"/><text x="66.0600%" y="286.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:180) (73 samples, 0.12%)</title><rect x="66.3133%" y="276" width="0.1217%" height="15" fill="rgb(234,111,31)" fg:x="39786" fg:w="73"/><text x="66.5633%" y="286.50"></text></g><g><title>_wrapreduction (numpy\core\fromnumeric.py:70) (179 samples, 0.30%)</title><rect x="66.6900%" y="308" width="0.2983%" height="15" fill="rgb(241,149,10)" fg:x="40012" fg:w="179"/><text x="66.9400%" y="318.50"></text></g><g><title>_wrapreduction (numpy\core\fromnumeric.py:75) (69 samples, 0.12%)</title><rect x="67.0334%" y="308" width="0.1150%" height="15" fill="rgb(249,206,44)" fg:x="40218" fg:w="69"/><text x="67.2834%" y="318.50"></text></g><g><title>_wrapreduction (numpy\core\fromnumeric.py:86) (283 samples, 0.47%)</title><rect x="67.1800%" y="308" width="0.4717%" height="15" fill="rgb(251,153,30)" fg:x="40306" fg:w="283"/><text x="67.4300%" y="318.50"></text></g><g><title>prod (numpy\core\fromnumeric.py:3076) (681 samples, 1.14%)</title><rect x="66.5250%" y="292" width="1.1351%" height="15" fill="rgb(239,152,38)" fg:x="39913" fg:w="681"/><text x="66.7750%" y="302.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:200) (740 samples, 1.23%)</title><rect x="66.4350%" y="276" width="1.2334%" height="15" fill="rgb(249,139,47)" fg:x="39859" fg:w="740"/><text x="66.6850%" y="286.50"></text></g><g><title>get_decoder_targets (buffers.py:181) (7,629 samples, 12.72%)</title><rect x="54.9661%" y="260" width="12.7156%" height="15" fill="rgb(244,64,35)" fg:x="32978" fg:w="7629"/><text x="55.2161%" y="270.50">get_decoder_targets..</text></g><g><title>get_decoder_targets (buffers.py:184) (800 samples, 1.33%)</title><rect x="67.6834%" y="260" width="1.3334%" height="15" fill="rgb(216,46,15)" fg:x="40608" fg:w="800"/><text x="67.9334%" y="270.50"></text></g><g><title>to_torch (stable_baselines3\common\buffers.py:135) (105 samples, 0.18%)</title><rect x="68.8418%" y="276" width="0.1750%" height="15" fill="rgb(250,74,19)" fg:x="41303" fg:w="105"/><text x="69.0918%" y="286.50"></text></g><g><title>get_decoder_targets (buffers.py:185) (824 samples, 1.37%)</title><rect x="69.0168%" y="260" width="1.3734%" height="15" fill="rgb(249,42,33)" fg:x="41408" fg:w="824"/><text x="69.2668%" y="270.50"></text></g><g><title>to_torch (stable_baselines3\common\buffers.py:135) (86 samples, 0.14%)</title><rect x="70.2468%" y="276" width="0.1433%" height="15" fill="rgb(242,149,17)" fg:x="42146" fg:w="86"/><text x="70.4968%" y="286.50"></text></g><g><title>get_decoder_targets (buffers.py:186) (849 samples, 1.42%)</title><rect x="70.3902%" y="260" width="1.4151%" height="15" fill="rgb(244,29,21)" fg:x="42232" fg:w="849"/><text x="70.6402%" y="270.50"></text></g><g><title>to_torch (stable_baselines3\common\buffers.py:135) (93 samples, 0.16%)</title><rect x="71.6502%" y="276" width="0.1550%" height="15" fill="rgb(220,130,37)" fg:x="42988" fg:w="93"/><text x="71.9002%" y="286.50"></text></g><g><title>get_decoder_targets (buffers.py:187) (354 samples, 0.59%)</title><rect x="71.8053%" y="260" width="0.5900%" height="15" fill="rgb(211,67,2)" fg:x="43081" fg:w="354"/><text x="72.0553%" y="270.50"></text></g><g><title>reconstruction_training_step (cemrl.py:126) (11,549 samples, 19.25%)</title><rect x="53.5560%" y="244" width="19.2493%" height="15" fill="rgb(235,68,52)" fg:x="32132" fg:w="11549"/><text x="53.8060%" y="254.50">reconstruction_training_step (..</text></g><g><title>get_decoder_targets (buffers.py:188) (246 samples, 0.41%)</title><rect x="72.3953%" y="260" width="0.4100%" height="15" fill="rgb(246,142,3)" fg:x="43435" fg:w="246"/><text x="72.6453%" y="270.50"></text></g><g><title>encode (networks.py:39) (796 samples, 1.33%)</title><rect x="72.8936%" y="276" width="1.3267%" height="15" fill="rgb(241,25,7)" fg:x="43734" fg:w="796"/><text x="73.1436%" y="286.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (788 samples, 1.31%)</title><rect x="72.9070%" y="292" width="1.3134%" height="15" fill="rgb(242,119,39)" fg:x="43742" fg:w="788"/><text x="73.1570%" y="302.50"></text></g><g><title>forward (torch\nn\modules\rnn.py:998) (761 samples, 1.27%)</title><rect x="72.9520%" y="308" width="1.2684%" height="15" fill="rgb(241,98,45)" fg:x="43769" fg:w="761"/><text x="73.2020%" y="318.50"></text></g><g><title>encode (networks.py:41) (120 samples, 0.20%)</title><rect x="74.2337%" y="276" width="0.2000%" height="15" fill="rgb(254,28,30)" fg:x="44538" fg:w="120"/><text x="74.4837%" y="286.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (113 samples, 0.19%)</title><rect x="74.2454%" y="292" width="0.1883%" height="15" fill="rgb(241,142,54)" fg:x="44545" fg:w="113"/><text x="74.4954%" y="302.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (111 samples, 0.19%)</title><rect x="74.2487%" y="308" width="0.1850%" height="15" fill="rgb(222,85,15)" fg:x="44547" fg:w="111"/><text x="74.4987%" y="318.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (105 samples, 0.18%)</title><rect x="74.2587%" y="324" width="0.1750%" height="15" fill="rgb(210,85,47)" fg:x="44553" fg:w="105"/><text x="74.5087%" y="334.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (77 samples, 0.13%)</title><rect x="74.3054%" y="340" width="0.1283%" height="15" fill="rgb(224,206,25)" fg:x="44581" fg:w="77"/><text x="74.5554%" y="350.50"></text></g><g><title>encode (networks.py:42) (86 samples, 0.14%)</title><rect x="74.4337%" y="276" width="0.1433%" height="15" fill="rgb(243,201,19)" fg:x="44658" fg:w="86"/><text x="74.6837%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (networks.py:42) (66 samples, 0.11%)</title><rect x="74.4671%" y="292" width="0.1100%" height="15" fill="rgb(236,59,4)" fg:x="44678" fg:w="66"/><text x="74.7171%" y="302.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (61 samples, 0.10%)</title><rect x="74.4754%" y="308" width="0.1017%" height="15" fill="rgb(254,179,45)" fg:x="44683" fg:w="61"/><text x="74.7254%" y="318.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (61 samples, 0.10%)</title><rect x="74.4754%" y="324" width="0.1017%" height="15" fill="rgb(226,14,10)" fg:x="44683" fg:w="61"/><text x="74.7254%" y="334.50"></text></g><g><title>__init__ (torch\distributions\distribution.py:60) (82 samples, 0.14%)</title><rect x="74.7087%" y="308" width="0.1367%" height="15" fill="rgb(244,27,41)" fg:x="44823" fg:w="82"/><text x="74.9587%" y="318.50"></text></g><g><title>check (torch\distributions\constraints.py:406) (82 samples, 0.14%)</title><rect x="74.7087%" y="324" width="0.1367%" height="15" fill="rgb(235,35,32)" fg:x="44823" fg:w="82"/><text x="74.9587%" y="334.50"></text></g><g><title>encode (networks.py:46) (135 samples, 0.23%)</title><rect x="74.6387%" y="276" width="0.2250%" height="15" fill="rgb(218,68,31)" fg:x="44781" fg:w="135"/><text x="74.8887%" y="286.50"></text></g><g><title>__init__ (torch\distributions\categorical.py:66) (97 samples, 0.16%)</title><rect x="74.7021%" y="292" width="0.1617%" height="15" fill="rgb(207,120,37)" fg:x="44819" fg:w="97"/><text x="74.9521%" y="302.50"></text></g><g><title>__init__ (torch\distributions\normal.py:56) (65 samples, 0.11%)</title><rect x="74.8937%" y="308" width="0.1083%" height="15" fill="rgb(227,98,0)" fg:x="44934" fg:w="65"/><text x="75.1437%" y="318.50"></text></g><g><title>&lt;listcomp&gt; (networks.py:47) (83 samples, 0.14%)</title><rect x="74.8654%" y="292" width="0.1383%" height="15" fill="rgb(207,7,3)" fg:x="44917" fg:w="83"/><text x="75.1154%" y="302.50"></text></g><g><title>reconstruction_training_step (cemrl.py:131) (1,300 samples, 2.17%)</title><rect x="72.8503%" y="244" width="2.1668%" height="15" fill="rgb(206,98,19)" fg:x="43708" fg:w="1300"/><text x="73.1003%" y="254.50">r..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,290 samples, 2.15%)</title><rect x="72.8670%" y="260" width="2.1501%" height="15" fill="rgb(217,5,26)" fg:x="43718" fg:w="1290"/><text x="73.1170%" y="270.50">d..</text></g><g><title>encode (networks.py:47) (92 samples, 0.15%)</title><rect x="74.8637%" y="276" width="0.1533%" height="15" fill="rgb(235,190,38)" fg:x="44916" fg:w="92"/><text x="75.1137%" y="286.50"></text></g><g><title>reconstruction_training_step (cemrl.py:147) (140 samples, 0.23%)</title><rect x="75.0921%" y="244" width="0.2333%" height="15" fill="rgb(247,86,24)" fg:x="45053" fg:w="140"/><text x="75.3421%" y="254.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (135 samples, 0.23%)</title><rect x="75.1004%" y="260" width="0.2250%" height="15" fill="rgb(205,101,16)" fg:x="45058" fg:w="135"/><text x="75.3504%" y="270.50"></text></g><g><title>forward (torch\nn\modules\activation.py:103) (989 samples, 1.65%)</title><rect x="75.7805%" y="404" width="1.6484%" height="15" fill="rgb(246,168,33)" fg:x="45466" fg:w="989"/><text x="76.0305%" y="414.50"></text></g><g><title>relu (torch\nn\functional.py:1457) (981 samples, 1.64%)</title><rect x="75.7938%" y="420" width="1.6351%" height="15" fill="rgb(231,114,1)" fg:x="45474" fg:w="981"/><text x="76.0438%" y="430.50"></text></g><g><title>forward (networks.py:91) (4,587 samples, 7.65%)</title><rect x="75.4238%" y="340" width="7.6454%" height="15" fill="rgb(207,184,53)" fg:x="45252" fg:w="4587"/><text x="75.6738%" y="350.50">forward (n..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (4,412 samples, 7.35%)</title><rect x="75.7155%" y="356" width="7.3537%" height="15" fill="rgb(224,95,51)" fg:x="45427" fg:w="4412"/><text x="75.9655%" y="366.50">_call_impl..</text></g><g><title>forward (torch\nn\modules\container.py:217) (4,408 samples, 7.35%)</title><rect x="75.7221%" y="372" width="7.3470%" height="15" fill="rgb(212,188,45)" fg:x="45431" fg:w="4408"/><text x="75.9721%" y="382.50">forward (t..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (4,376 samples, 7.29%)</title><rect x="75.7755%" y="388" width="7.2937%" height="15" fill="rgb(223,154,38)" fg:x="45463" fg:w="4376"/><text x="76.0255%" y="398.50">_call_impl..</text></g><g><title>forward (torch\nn\modules\linear.py:114) (3,384 samples, 5.64%)</title><rect x="77.4289%" y="404" width="5.6403%" height="15" fill="rgb(251,22,52)" fg:x="46455" fg:w="3384"/><text x="77.6789%" y="414.50">forward..</text></g><g><title>relu (torch\nn\functional.py:1457) (1,029 samples, 1.72%)</title><rect x="83.5292%" y="420" width="1.7151%" height="15" fill="rgb(229,209,22)" fg:x="50115" fg:w="1029"/><text x="83.7792%" y="430.50"></text></g><g><title>forward (torch\nn\modules\activation.py:103) (1,040 samples, 1.73%)</title><rect x="83.5125%" y="404" width="1.7334%" height="15" fill="rgb(234,138,34)" fg:x="50105" fg:w="1040"/><text x="83.7625%" y="414.50"></text></g><g><title>forward (networks.py:49) (9,100 samples, 15.17%)</title><rect x="75.3888%" y="292" width="15.1674%" height="15" fill="rgb(212,95,11)" fg:x="45231" fg:w="9100"/><text x="75.6388%" y="302.50">forward (networks.py:49)</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (9,093 samples, 15.16%)</title><rect x="75.4004%" y="308" width="15.1558%" height="15" fill="rgb(240,179,47)" fg:x="45238" fg:w="9093"/><text x="75.6504%" y="318.50">_call_impl (torch\nn\mo..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (9,081 samples, 15.14%)</title><rect x="75.4204%" y="324" width="15.1358%" height="15" fill="rgb(240,163,11)" fg:x="45250" fg:w="9081"/><text x="75.6704%" y="334.50">decorate_autocast (torc..</text></g><g><title>forward (networks.py:93) (4,491 samples, 7.49%)</title><rect x="83.0708%" y="340" width="7.4854%" height="15" fill="rgb(236,37,12)" fg:x="49840" fg:w="4491"/><text x="83.3208%" y="350.50">forward (n..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (4,268 samples, 7.11%)</title><rect x="83.4425%" y="356" width="7.1137%" height="15" fill="rgb(232,164,16)" fg:x="50063" fg:w="4268"/><text x="83.6925%" y="366.50">_call_impl..</text></g><g><title>forward (torch\nn\modules\container.py:217) (4,267 samples, 7.11%)</title><rect x="83.4442%" y="372" width="7.1120%" height="15" fill="rgb(244,205,15)" fg:x="50064" fg:w="4267"/><text x="83.6942%" y="382.50">forward (t..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (4,229 samples, 7.05%)</title><rect x="83.5075%" y="388" width="7.0487%" height="15" fill="rgb(223,117,47)" fg:x="50102" fg:w="4229"/><text x="83.7575%" y="398.50">_call_imp..</text></g><g><title>forward (torch\nn\modules\linear.py:114) (3,186 samples, 5.31%)</title><rect x="85.2459%" y="404" width="5.3103%" height="15" fill="rgb(244,107,35)" fg:x="51145" fg:w="3186"/><text x="85.4959%" y="414.50">forward..</text></g><g><title>reconstruction_training_step (cemrl.py:150) (9,186 samples, 15.31%)</title><rect x="75.3638%" y="244" width="15.3108%" height="15" fill="rgb(205,140,8)" fg:x="45216" fg:w="9186"/><text x="75.6138%" y="254.50">reconstruction_training..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (9,180 samples, 15.30%)</title><rect x="75.3738%" y="260" width="15.3008%" height="15" fill="rgb(228,84,46)" fg:x="45222" fg:w="9180"/><text x="75.6238%" y="270.50">_call_impl (torch\nn\mo..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (9,177 samples, 15.30%)</title><rect x="75.3788%" y="276" width="15.2958%" height="15" fill="rgb(254,188,9)" fg:x="45225" fg:w="9177"/><text x="75.6288%" y="286.50">decorate_autocast (torc..</text></g><g><title>forward (networks.py:50) (71 samples, 0.12%)</title><rect x="90.5562%" y="292" width="0.1183%" height="15" fill="rgb(206,112,54)" fg:x="54331" fg:w="71"/><text x="90.8062%" y="302.50"></text></g><g><title>default_collate (torch\utils\data\_utils\collate.py:264) (71 samples, 0.12%)</title><rect x="90.5562%" y="308" width="0.1183%" height="15" fill="rgb(216,84,49)" fg:x="54331" fg:w="71"/><text x="90.8062%" y="318.50"></text></g><g><title>reconstruction_training_step (cemrl.py:172) (107 samples, 0.18%)</title><rect x="91.2312%" y="244" width="0.1783%" height="15" fill="rgb(214,194,35)" fg:x="54736" fg:w="107"/><text x="91.4812%" y="254.50"></text></g><g><title>__init__ (torch\distributions\normal.py:56) (70 samples, 0.12%)</title><rect x="91.2929%" y="260" width="0.1167%" height="15" fill="rgb(249,28,3)" fg:x="54773" fg:w="70"/><text x="91.5429%" y="270.50"></text></g><g><title>reconstruction_training_step (cemrl.py:173) (116 samples, 0.19%)</title><rect x="91.4096%" y="244" width="0.1933%" height="15" fill="rgb(222,56,52)" fg:x="54843" fg:w="116"/><text x="91.6596%" y="254.50"></text></g><g><title>kl_divergence (torch\distributions\kl.py:172) (87 samples, 0.15%)</title><rect x="91.4579%" y="260" width="0.1450%" height="15" fill="rgb(245,217,50)" fg:x="54872" fg:w="87"/><text x="91.7079%" y="270.50"></text></g><g><title>__init__ (torch\distributions\distribution.py:60) (85 samples, 0.14%)</title><rect x="91.7063%" y="276" width="0.1417%" height="15" fill="rgb(213,201,24)" fg:x="55021" fg:w="85"/><text x="91.9563%" y="286.50"></text></g><g><title>check (torch\distributions\constraints.py:406) (85 samples, 0.14%)</title><rect x="91.7063%" y="292" width="0.1417%" height="15" fill="rgb(248,116,28)" fg:x="55021" fg:w="85"/><text x="91.9563%" y="302.50"></text></g><g><title>reconstruction_training_step (cemrl.py:177) (155 samples, 0.26%)</title><rect x="91.6262%" y="244" width="0.2583%" height="15" fill="rgb(219,72,43)" fg:x="54973" fg:w="155"/><text x="91.8762%" y="254.50"></text></g><g><title>__init__ (torch\distributions\categorical.py:66) (114 samples, 0.19%)</title><rect x="91.6946%" y="260" width="0.1900%" height="15" fill="rgb(209,138,14)" fg:x="55014" fg:w="114"/><text x="91.9446%" y="270.50"></text></g><g><title>_kl_categorical_categorical (torch\distributions\kl.py:219) (77 samples, 0.13%)</title><rect x="91.8896%" y="276" width="0.1283%" height="15" fill="rgb(222,18,33)" fg:x="55131" fg:w="77"/><text x="92.1396%" y="286.50"></text></g><g><title>reconstruction_training_step (cemrl.py:178) (152 samples, 0.25%)</title><rect x="91.8846%" y="244" width="0.2533%" height="15" fill="rgb(213,199,7)" fg:x="55128" fg:w="152"/><text x="92.1346%" y="254.50"></text></g><g><title>kl_divergence (torch\distributions\kl.py:172) (151 samples, 0.25%)</title><rect x="91.8863%" y="260" width="0.2517%" height="15" fill="rgb(250,110,10)" fg:x="55129" fg:w="151"/><text x="92.1363%" y="270.50"></text></g><g><title>reconstruction_training_step (cemrl.py:183) (78 samples, 0.13%)</title><rect x="92.1396%" y="244" width="0.1300%" height="15" fill="rgb(248,123,6)" fg:x="55281" fg:w="78"/><text x="92.3896%" y="254.50"></text></g><g><title>reconstruction_training_step (cemrl.py:187) (87 samples, 0.15%)</title><rect x="92.2963%" y="244" width="0.1450%" height="15" fill="rgb(206,91,31)" fg:x="55375" fg:w="87"/><text x="92.5463%" y="254.50"></text></g><g><title>reconstruction_training_step (cemrl.py:190) (62 samples, 0.10%)</title><rect x="92.4413%" y="244" width="0.1033%" height="15" fill="rgb(211,154,13)" fg:x="55462" fg:w="62"/><text x="92.6913%" y="254.50"></text></g><g><title>step (torch\cuda\amp\grad_scaler.py:366) (165 samples, 0.28%)</title><rect x="92.5496%" y="260" width="0.2750%" height="15" fill="rgb(225,148,7)" fg:x="55527" fg:w="165"/><text x="92.7996%" y="270.50"></text></g><g><title>unscale_ (torch\cuda\amp\grad_scaler.py:284) (114 samples, 0.19%)</title><rect x="92.6346%" y="276" width="0.1900%" height="15" fill="rgb(220,160,43)" fg:x="55578" fg:w="114"/><text x="92.8846%" y="286.50"></text></g><g><title>adamw (torch\optim\adamw.py:293) (67 samples, 0.11%)</title><rect x="93.0013%" y="340" width="0.1117%" height="15" fill="rgb(213,52,39)" fg:x="55798" fg:w="67"/><text x="93.2513%" y="350.50"></text></g><g><title>&lt;genexpr&gt; (torch\optim\adamw.py:293) (67 samples, 0.11%)</title><rect x="93.0013%" y="356" width="0.1117%" height="15" fill="rgb(243,137,7)" fg:x="55798" fg:w="67"/><text x="93.2513%" y="366.50"></text></g><g><title>adamw (torch\optim\adamw.py:303) (77 samples, 0.13%)</title><rect x="93.1130%" y="340" width="0.1283%" height="15" fill="rgb(230,79,13)" fg:x="55865" fg:w="77"/><text x="93.3630%" y="350.50"></text></g><g><title>_default_to_fused_or_foreach (torch\optim\optimizer.py:72) (76 samples, 0.13%)</title><rect x="93.1147%" y="356" width="0.1267%" height="15" fill="rgb(247,105,23)" fg:x="55866" fg:w="76"/><text x="93.3647%" y="366.50"></text></g><g><title>_multi_tensor_adamw (torch\optim\adamw.py:477) (83 samples, 0.14%)</title><rect x="93.2880%" y="356" width="0.1383%" height="15" fill="rgb(223,179,41)" fg:x="55970" fg:w="83"/><text x="93.5380%" y="366.50"></text></g><g><title>decorate_context (torch\utils\_contextlib.py:115) (80 samples, 0.13%)</title><rect x="93.2930%" y="372" width="0.1333%" height="15" fill="rgb(218,9,34)" fg:x="55973" fg:w="80"/><text x="93.5430%" y="382.50"></text></g><g><title>_multi_tensor_adamw (torch\optim\adamw.py:493) (87 samples, 0.15%)</title><rect x="93.4947%" y="356" width="0.1450%" height="15" fill="rgb(222,106,8)" fg:x="56094" fg:w="87"/><text x="93.7447%" y="366.50"></text></g><g><title>_multi_tensor_adamw (torch\optim\adamw.py:564) (90 samples, 0.15%)</title><rect x="94.0230%" y="356" width="0.1500%" height="15" fill="rgb(211,220,0)" fg:x="56411" fg:w="90"/><text x="94.2730%" y="366.50"></text></g><g><title>step (torch\optim\adamw.py:171) (829 samples, 1.38%)</title><rect x="93.0013%" y="324" width="1.3817%" height="15" fill="rgb(229,52,16)" fg:x="55798" fg:w="829"/><text x="93.2513%" y="334.50"></text></g><g><title>adamw (torch\optim\adamw.py:321) (684 samples, 1.14%)</title><rect x="93.2430%" y="340" width="1.1401%" height="15" fill="rgb(212,155,18)" fg:x="55943" fg:w="684"/><text x="93.4930%" y="350.50"></text></g><g><title>_use_grad (torch\optim\optimizer.py:33) (891 samples, 1.49%)</title><rect x="92.8996%" y="308" width="1.4851%" height="15" fill="rgb(242,21,14)" fg:x="55737" fg:w="891"/><text x="93.1496%" y="318.50"></text></g><g><title>wrapper (torch\optim\optimizer.py:280) (895 samples, 1.49%)</title><rect x="92.8946%" y="292" width="1.4917%" height="15" fill="rgb(222,19,48)" fg:x="55734" fg:w="895"/><text x="93.1446%" y="302.50"></text></g><g><title>step (torch\cuda\amp\grad_scaler.py:370) (938 samples, 1.56%)</title><rect x="92.8246%" y="260" width="1.5634%" height="15" fill="rgb(232,45,27)" fg:x="55692" fg:w="938"/><text x="93.0746%" y="270.50"></text></g><g><title>_maybe_opt_step (torch\cuda\amp\grad_scaler.py:290) (912 samples, 1.52%)</title><rect x="92.8680%" y="276" width="1.5201%" height="15" fill="rgb(249,103,42)" fg:x="55718" fg:w="912"/><text x="93.1180%" y="286.50"></text></g><g><title>reconstruction_training_step (cemrl.py:193) (1,107 samples, 1.85%)</title><rect x="92.5446%" y="244" width="1.8451%" height="15" fill="rgb(246,81,33)" fg:x="55524" fg:w="1107"/><text x="92.7946%" y="254.50">r..</text></g><g><title>train (cemrl.py:104) (32,644 samples, 54.41%)</title><rect x="40.1287%" y="228" width="54.4094%" height="15" fill="rgb(252,33,42)" fg:x="24076" fg:w="32644"/><text x="40.3787%" y="238.50">train (cemrl.py:104)</text></g><g><title>get_encoder_context (buffers.py:151) (305 samples, 0.51%)</title><rect x="94.8314%" y="276" width="0.5084%" height="15" fill="rgb(209,212,41)" fg:x="56896" fg:w="305"/><text x="95.0814%" y="286.50"></text></g><g><title>get_encoder_context (buffers.py:152) (351 samples, 0.59%)</title><rect x="95.3398%" y="276" width="0.5850%" height="15" fill="rgb(207,154,6)" fg:x="57201" fg:w="351"/><text x="95.5898%" y="286.50"></text></g><g><title>get_encoder_context (buffers.py:153) (359 samples, 0.60%)</title><rect x="95.9248%" y="276" width="0.5984%" height="15" fill="rgb(223,64,47)" fg:x="57552" fg:w="359"/><text x="96.1748%" y="286.50"></text></g><g><title>get_encoder_context (buffers.py:154) (325 samples, 0.54%)</title><rect x="96.5232%" y="276" width="0.5417%" height="15" fill="rgb(211,161,38)" fg:x="57911" fg:w="325"/><text x="96.7732%" y="286.50"></text></g><g><title>get_encoder_context (buffers.py:155) (330 samples, 0.55%)</title><rect x="97.0649%" y="276" width="0.5500%" height="15" fill="rgb(219,138,40)" fg:x="58236" fg:w="330"/><text x="97.3149%" y="286.50"></text></g><g><title>sample (buffers.py:114) (1,786 samples, 2.98%)</title><rect x="94.6431%" y="260" width="2.9768%" height="15" fill="rgb(241,228,46)" fg:x="56783" fg:w="1786"/><text x="94.8931%" y="270.50">sam..</text></g><g><title>encode (networks.py:39) (160 samples, 0.27%)</title><rect x="97.6632%" y="340" width="0.2667%" height="15" fill="rgb(223,209,38)" fg:x="58595" fg:w="160"/><text x="97.9132%" y="350.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (157 samples, 0.26%)</title><rect x="97.6682%" y="356" width="0.2617%" height="15" fill="rgb(236,164,45)" fg:x="58598" fg:w="157"/><text x="97.9182%" y="366.50"></text></g><g><title>forward (torch\nn\modules\rnn.py:998) (149 samples, 0.25%)</title><rect x="97.6816%" y="372" width="0.2483%" height="15" fill="rgb(231,15,5)" fg:x="58606" fg:w="149"/><text x="97.9316%" y="382.50"></text></g><g><title>forward (networks.py:30) (281 samples, 0.47%)</title><rect x="97.6365%" y="308" width="0.4684%" height="15" fill="rgb(252,35,15)" fg:x="58579" fg:w="281"/><text x="97.8865%" y="318.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (280 samples, 0.47%)</title><rect x="97.6382%" y="324" width="0.4667%" height="15" fill="rgb(248,181,18)" fg:x="58580" fg:w="280"/><text x="97.8882%" y="334.50"></text></g><g><title>sample (buffers.py:116) (310 samples, 0.52%)</title><rect x="97.6249%" y="260" width="0.5167%" height="15" fill="rgb(233,39,42)" fg:x="58572" fg:w="310"/><text x="97.8749%" y="270.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (307 samples, 0.51%)</title><rect x="97.6299%" y="276" width="0.5117%" height="15" fill="rgb(238,110,33)" fg:x="58575" fg:w="307"/><text x="97.8799%" y="286.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (304 samples, 0.51%)</title><rect x="97.6349%" y="292" width="0.5067%" height="15" fill="rgb(233,195,10)" fg:x="58578" fg:w="304"/><text x="97.8849%" y="302.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:215) (2,194 samples, 3.66%)</title><rect x="94.5514%" y="244" width="3.6568%" height="15" fill="rgb(254,105,3)" fg:x="56728" fg:w="2194"/><text x="94.8014%" y="254.50">trai..</text></g><g><title>train (stable_baselines3\sac\sac.py:222) (157 samples, 0.26%)</title><rect x="98.2082%" y="244" width="0.2617%" height="15" fill="rgb(221,225,9)" fg:x="58922" fg:w="157"/><text x="98.4582%" y="254.50"></text></g><g><title>action_log_prob (stable_baselines3\sac\policies.py:175) (110 samples, 0.18%)</title><rect x="98.2866%" y="260" width="0.1833%" height="15" fill="rgb(224,227,45)" fg:x="58969" fg:w="110"/><text x="98.5366%" y="270.50"></text></g><g><title>log_prob_from_params (stable_baselines3\common\distributions.py:259) (66 samples, 0.11%)</title><rect x="98.3599%" y="276" width="0.1100%" height="15" fill="rgb(229,198,43)" fg:x="59013" fg:w="66"/><text x="98.6099%" y="286.50"></text></g><g><title>action_log_prob (stable_baselines3\sac\policies.py:173) (67 samples, 0.11%)</title><rect x="98.6016%" y="260" width="0.1117%" height="15" fill="rgb(206,209,35)" fg:x="59158" fg:w="67"/><text x="98.8516%" y="270.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:247) (142 samples, 0.24%)</title><rect x="98.5999%" y="244" width="0.2367%" height="15" fill="rgb(245,195,53)" fg:x="59157" fg:w="142"/><text x="98.8499%" y="254.50"></text></g><g><title>action_log_prob (stable_baselines3\sac\policies.py:175) (74 samples, 0.12%)</title><rect x="98.7133%" y="260" width="0.1233%" height="15" fill="rgb(240,92,26)" fg:x="59225" fg:w="74"/><text x="98.9633%" y="270.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:249) (100 samples, 0.17%)</title><rect x="98.8366%" y="244" width="0.1667%" height="15" fill="rgb(207,40,23)" fg:x="59299" fg:w="100"/><text x="99.0866%" y="254.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (90 samples, 0.15%)</title><rect x="98.8533%" y="260" width="0.1500%" height="15" fill="rgb(223,111,35)" fg:x="59309" fg:w="90"/><text x="99.1033%" y="270.50"></text></g><g><title>forward (stable_baselines3\common\policies.py:937) (69 samples, 0.12%)</title><rect x="98.8883%" y="276" width="0.1150%" height="15" fill="rgb(229,147,28)" fg:x="59330" fg:w="69"/><text x="99.1383%" y="286.50"></text></g><g><title>&lt;genexpr&gt; (stable_baselines3\common\policies.py:937) (69 samples, 0.12%)</title><rect x="98.8883%" y="292" width="0.1150%" height="15" fill="rgb(211,29,28)" fg:x="59330" fg:w="69"/><text x="99.1383%" y="302.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (68 samples, 0.11%)</title><rect x="98.8899%" y="308" width="0.1133%" height="15" fill="rgb(228,72,33)" fg:x="59331" fg:w="68"/><text x="99.1399%" y="318.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (67 samples, 0.11%)</title><rect x="98.8916%" y="324" width="0.1117%" height="15" fill="rgb(205,214,31)" fg:x="59332" fg:w="67"/><text x="99.1416%" y="334.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (61 samples, 0.10%)</title><rect x="98.9016%" y="340" width="0.1017%" height="15" fill="rgb(224,111,15)" fg:x="59338" fg:w="61"/><text x="99.1516%" y="350.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:258) (76 samples, 0.13%)</title><rect x="99.0400%" y="244" width="0.1267%" height="15" fill="rgb(253,21,26)" fg:x="59421" fg:w="76"/><text x="99.2900%" y="254.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (75 samples, 0.13%)</title><rect x="99.0416%" y="260" width="0.1250%" height="15" fill="rgb(245,139,43)" fg:x="59422" fg:w="75"/><text x="99.2916%" y="270.50"></text></g><g><title>forward (stable_baselines3\common\policies.py:937) (64 samples, 0.11%)</title><rect x="99.0600%" y="276" width="0.1067%" height="15" fill="rgb(252,170,7)" fg:x="59433" fg:w="64"/><text x="99.3100%" y="286.50"></text></g><g><title>&lt;genexpr&gt; (stable_baselines3\common\policies.py:937) (64 samples, 0.11%)</title><rect x="99.0600%" y="292" width="0.1067%" height="15" fill="rgb(231,118,14)" fg:x="59433" fg:w="64"/><text x="99.3100%" y="302.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:268) (66 samples, 0.11%)</title><rect x="99.2266%" y="244" width="0.1100%" height="15" fill="rgb(238,83,0)" fg:x="59533" fg:w="66"/><text x="99.4766%" y="254.50"></text></g><g><title>wrapper (torch\optim\optimizer.py:280) (65 samples, 0.11%)</title><rect x="99.2283%" y="260" width="0.1083%" height="15" fill="rgb(221,39,39)" fg:x="59534" fg:w="65"/><text x="99.4783%" y="270.50"></text></g><g><title>_use_grad (torch\optim\optimizer.py:33) (65 samples, 0.11%)</title><rect x="99.2283%" y="276" width="0.1083%" height="15" fill="rgb(222,119,46)" fg:x="59534" fg:w="65"/><text x="99.4783%" y="286.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (61 samples, 0.10%)</title><rect x="99.3600%" y="308" width="0.1017%" height="15" fill="rgb(222,165,49)" fg:x="59613" fg:w="61"/><text x="99.6100%" y="318.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (61 samples, 0.10%)</title><rect x="99.3600%" y="324" width="0.1017%" height="15" fill="rgb(219,113,52)" fg:x="59613" fg:w="61"/><text x="99.6100%" y="334.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:273) (76 samples, 0.13%)</title><rect x="99.3366%" y="244" width="0.1267%" height="15" fill="rgb(214,7,15)" fg:x="59599" fg:w="76"/><text x="99.5866%" y="254.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (70 samples, 0.12%)</title><rect x="99.3466%" y="260" width="0.1167%" height="15" fill="rgb(235,32,4)" fg:x="59605" fg:w="70"/><text x="99.5966%" y="270.50"></text></g><g><title>forward (stable_baselines3\common\policies.py:937) (65 samples, 0.11%)</title><rect x="99.3550%" y="276" width="0.1083%" height="15" fill="rgb(238,90,54)" fg:x="59610" fg:w="65"/><text x="99.6050%" y="286.50"></text></g><g><title>&lt;genexpr&gt; (stable_baselines3\common\policies.py:937) (65 samples, 0.11%)</title><rect x="99.3550%" y="292" width="0.1083%" height="15" fill="rgb(213,208,19)" fg:x="59610" fg:w="65"/><text x="99.6050%" y="302.50"></text></g><g><title>zip_strict (stable_baselines3\common\utils.py:441) (65 samples, 0.11%)</title><rect x="99.6200%" y="276" width="0.1083%" height="15" fill="rgb(233,156,4)" fg:x="59769" fg:w="65"/><text x="99.8700%" y="286.50"></text></g><g><title>zip_strict (stable_baselines3\common\utils.py:442) (80 samples, 0.13%)</title><rect x="99.7283%" y="276" width="0.1333%" height="15" fill="rgb(207,194,5)" fg:x="59834" fg:w="80"/><text x="99.9783%" y="286.50"></text></g><g><title>polyak_update (stable_baselines3\common\utils.py:469) (155 samples, 0.26%)</title><rect x="99.6166%" y="260" width="0.2583%" height="15" fill="rgb(206,111,30)" fg:x="59767" fg:w="155"/><text x="99.8666%" y="270.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:285) (228 samples, 0.38%)</title><rect x="99.6166%" y="244" width="0.3800%" height="15" fill="rgb(243,70,54)" fg:x="59767" fg:w="228"/><text x="99.8666%" y="254.50"></text></g><g><title>all (59,997 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(242,28,8)" fg:x="0" fg:w="59997"/><text x="0.2500%" y="62.50"></text></g><g><title>_run_module_as_main (runpy.py:196) (53,177 samples, 88.63%)</title><rect x="11.3672%" y="68" width="88.6328%" height="15" fill="rgb(219,106,18)" fg:x="6820" fg:w="53177"/><text x="11.6172%" y="78.50">_run_module_as_main (runpy.py:196)</text></g><g><title>_run_code (runpy.py:86) (53,177 samples, 88.63%)</title><rect x="11.3672%" y="84" width="88.6328%" height="15" fill="rgb(244,222,10)" fg:x="6820" fg:w="53177"/><text x="11.6172%" y="94.50">_run_code (runpy.py:86)</text></g><g><title>&lt;module&gt; (debugpy\__main__.py:39) (53,177 samples, 88.63%)</title><rect x="11.3672%" y="100" width="88.6328%" height="15" fill="rgb(236,179,52)" fg:x="6820" fg:w="53177"/><text x="11.6172%" y="110.50">&lt;module&gt; (debugpy\__main__.py:39)</text></g><g><title>main (debugpy\server\cli.py:430) (53,177 samples, 88.63%)</title><rect x="11.3672%" y="116" width="88.6328%" height="15" fill="rgb(213,23,39)" fg:x="6820" fg:w="53177"/><text x="11.6172%" y="126.50">main (debugpy\server\cli.py:430)</text></g><g><title>run_file (debugpy\server\cli.py:284) (53,177 samples, 88.63%)</title><rect x="11.3672%" y="132" width="88.6328%" height="15" fill="rgb(238,48,10)" fg:x="6820" fg:w="53177"/><text x="11.6172%" y="142.50">run_file (debugpy\server\cli.py:284)</text></g><g><title>run_path (_pydevd_bundle\pydevd_runpy.py:321) (53,177 samples, 88.63%)</title><rect x="11.3672%" y="148" width="88.6328%" height="15" fill="rgb(251,196,23)" fg:x="6820" fg:w="53177"/><text x="11.6172%" y="158.50">run_path (_pydevd_bundle\pydevd_runpy.py:321)</text></g><g><title>_run_module_code (_pydevd_bundle\pydevd_runpy.py:135) (53,177 samples, 88.63%)</title><rect x="11.3672%" y="164" width="88.6328%" height="15" fill="rgb(250,152,24)" fg:x="6820" fg:w="53177"/><text x="11.6172%" y="174.50">_run_module_code (_pydevd_bundle\pydevd_runpy.py:135)</text></g><g><title>_run_code (_pydevd_bundle\pydevd_runpy.py:124) (53,177 samples, 88.63%)</title><rect x="11.3672%" y="180" width="88.6328%" height="15" fill="rgb(209,150,17)" fg:x="6820" fg:w="53177"/><text x="11.6172%" y="190.50">_run_code (_pydevd_bundle\pydevd_runpy.py:124)</text></g><g><title>&lt;module&gt; (cli.py:194) (53,177 samples, 88.63%)</title><rect x="11.3672%" y="196" width="88.6328%" height="15" fill="rgb(234,202,34)" fg:x="6820" fg:w="53177"/><text x="11.6172%" y="206.50">&lt;module&gt; (cli.py:194)</text></g><g><title>learn (stable_baselines3\common\off_policy_algorithm.py:331) (35,921 samples, 59.87%)</title><rect x="40.1287%" y="212" width="59.8713%" height="15" fill="rgb(253,148,53)" fg:x="24076" fg:w="35921"/><text x="40.3787%" y="222.50">learn (stable_baselines3\common\off_policy_algorithm.py:331)</text></g><g><title>train (cemrl.py:105) (3,277 samples, 5.46%)</title><rect x="94.5381%" y="228" width="5.4619%" height="15" fill="rgb(218,129,16)" fg:x="56720" fg:w="3277"/><text x="94.7881%" y="238.50">train (..</text></g></svg></svg>