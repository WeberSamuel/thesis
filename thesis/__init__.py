from thesis.cemrl.algorithm import Cemrl, CemrlPolicy
from thesis.dreamer.dreamer import Dreamer, DreamerPolicy
from thesis.smm.smm import Smm, SmmPolicy

def test_dreamer():
    from src.cemrl.wrappers import CEMRLWrapper
    from src.envs.toy_goal_env import ToyGoalEnv
    from src.envs.samplers import RandomBoxSampler
    from gymnasium.wrappers.time_limit import TimeLimit
    from stable_baselines3.common.callbacks import EvalCallback
    sampler = RandomBoxSampler(num_goals=1)
    dreamer = Dreamer(DreamerPolicy, CEMRLWrapper(TimeLimit(ToyGoalEnv(sampler), 200)), 1e-3, learning_starts=50_000, tensorboard_log="debug/dreamer")
    dreamer.learn(150_000, progress_bar=True, callback=EvalCallback(CEMRLWrapper(TimeLimit(ToyGoalEnv(sampler), 200)), eval_freq=5_000))

    import cv2
    obs = dreamer.env.reset()
    state = dreamer.policy.reset_states(1)
    while True:
        image = dreamer.env.render()
        cv2.imshow("obs", image)
        cv2.waitKey(1)
        action, state = dreamer.policy.predict(obs, state)
        obs, _, done, _ = dreamer.env.step(action)
        if done:
            obs = dreamer.env.reset()

def test_cemrl():
    from src.cemrl.wrappers import CEMRLWrapper
    from src.envs.toy_goal_env import ToyGoalEnv
    from src.envs.wrappers.success import PercentageSuccessWrapper
    from src.envs.samplers import RandomBoxSampler
    from gymnasium.wrappers.time_limit import TimeLimit
    from stable_baselines3.common.callbacks import EvalCallback, CallbackList
    from thesis.cemrl.callback import TaskEncodingCheckerCallback
    sampler = RandomBoxSampler(num_goals=10)
    cemrl = Cemrl(CemrlPolicy, CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(sampler), 200))), 3e-4, learning_starts=20_000, tensorboard_log="debug/cemrl")
    cemrl.learn(40000, progress_bar=True, callback=[EvalCallback(CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(sampler), 200))), eval_freq=10_000), TaskEncodingCheckerCallback()])

    import cv2
    obs = cemrl.env.reset()
    state = cemrl.policy.reset_states(1)
    while True:
        image = cemrl.env.render()
        cv2.imshow("obs", image)
        cv2.waitKey(1)
        action, state = cemrl.policy.predict(obs, state)
        obs, _, done, _ = cemrl.env.step(action)
        if done:
            obs = cemrl.env.reset()

def test_smm():
    from src.cemrl.wrappers import CEMRLWrapper
    from src.envs.toy_goal_env import ToyGoalEnv
    from src.envs.wrappers.success import PercentageSuccessWrapper
    from src.envs.samplers import RandomBoxSampler
    from gymnasium.wrappers.time_limit import TimeLimit
    from stable_baselines3.common.callbacks import EvalCallback
    sampler = RandomBoxSampler(num_goals=10)
    smm = Smm(SmmPolicy, CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(sampler), 200))), 3e-4, learning_starts=10_000, tensorboard_log="debug/smm")
    smm.learn(20000, progress_bar=True, callback=EvalCallback(smm._wrap_env(CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(sampler), 200)))), n_eval_episodes=1, eval_freq=5_000))

    import cv2
    obs = smm.env.reset()
    state = smm.policy.reset_states(1)
    while True:
        image = smm.env.render()
        cv2.imshow("obs", image)
        cv2.waitKey(1)
        action, state = smm.policy.predict(obs, state)
        obs, _, done, _ = smm.env.step(action)
        if done:
            obs = smm.env.reset()

def test_smm_cemrl():
    from src.cemrl.wrappers import CEMRLWrapper
    from src.envs.toy_goal_env import ToyGoalEnv
    from src.envs.wrappers.success import PercentageSuccessWrapper
    from src.envs.samplers import RandomBoxSampler, UniformCircleSampler
    from thesis.core.callback import ExplorationCallback
    from gymnasium.wrappers.time_limit import TimeLimit
    from stable_baselines3.common.callbacks import EvalCallback, CallbackList
    from stable_baselines3.common.vec_env import DummyVecEnv
    from thesis.cemrl.callback import TaskEncodingCheckerCallback
    sampler = RandomBoxSampler(num_goals=100)
    eval_sampler = UniformCircleSampler(num_goals=32)
    vec_env = DummyVecEnv([lambda: CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(sampler), 200)))] * 100)
    explore_vec_env = DummyVecEnv([lambda: CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(sampler), 200)))] * 100)
    eval_vec_env = DummyVecEnv([lambda: CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(eval_sampler), 200)))] * 32)

    smm = Smm(SmmPolicy, explore_vec_env, 3e-4, learning_starts=10_000, tensorboard_log="debug/smm", gradient_steps=1)
    # smm.learn(20000, progress_bar=True, callback=EvalCallback(smm._wrap_env(CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(sampler), 200)))), n_eval_episodes=1, eval_freq=5_000))

    
    cemrl = Cemrl(CemrlPolicy, vec_env, 3e-4, learning_starts=1_000, tensorboard_log="debug/cemrl", gradient_steps=10)
    cemrl.learn(40_000, progress_bar=True, callback=[ExplorationCallback(smm, pre_train_steps=20_000, exploration_rollout_gradient_steps=1, use_model_buffer=False), EvalCallback(eval_vec_env, n_eval_episodes=32, eval_freq=10_000), TaskEncodingCheckerCallback()])


    import cv2
    obs = cemrl.env.reset()
    state = cemrl.policy.reset_states(1)
    while True:
        image = cemrl.env.render()
        cv2.imshow("obs", image)
        cv2.waitKey(1)
        action, state = cemrl.policy.predict(obs, state)
        obs, _, done, _ = cemrl.env.step(action)
        if done:
            obs = cemrl.env.reset()

def test_sac_cemrl():
    from src.cemrl.wrappers import CEMRLWrapper
    from src.envs.toy_goal_env import ToyGoalEnv
    from src.envs.wrappers.success import PercentageSuccessWrapper
    from src.envs.samplers import RandomBoxSampler, UniformCircleSampler
    from thesis.core.callback import ExplorationCallback
    from gymnasium.wrappers.time_limit import TimeLimit
    from stable_baselines3.common.callbacks import EvalCallback
    from stable_baselines3.common.vec_env import DummyVecEnv
    from thesis.cemrl.callback import TaskEncodingCheckerCallback
    from stable_baselines3.sac import SAC
    sampler = RandomBoxSampler(num_goals=100)
    eval_sampler = UniformCircleSampler(num_goals=32)
    vec_env = DummyVecEnv([lambda: CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(sampler), 200)))] * 100)
    explore_vec_env = DummyVecEnv([lambda: CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(sampler), 200)))] * 100)
    eval_vec_env = DummyVecEnv([lambda: CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(eval_sampler), 200)))] * 32)

    sac = SAC("MultiInputPolicy", explore_vec_env, 3e-4, learning_starts=100)
    
    cemrl = Cemrl(CemrlPolicy, vec_env, 3e-4, learning_starts=1_000, tensorboard_log="debug/cemrl", gradient_steps=10)
    cemrl.learn(40_000, progress_bar=True, callback=[ExplorationCallback(sac, pre_train_steps=40_000, exploration_rollout_gradient_steps=1, use_model_buffer=False), EvalCallback(eval_vec_env, n_eval_episodes=32, eval_freq=10_000), TaskEncodingCheckerCallback()])


    import cv2
    obs = cemrl.env.reset()
    state = cemrl.policy.reset_states(1)
    while True:
        image = cemrl.env.render()
        cv2.imshow("obs", image)
        cv2.waitKey(1)
        action, state = cemrl.policy.predict(obs, state)
        obs, _, done, _ = cemrl.env.step(action)
        if done:
            obs = cemrl.env.reset()

def test_sac():
    from src.cemrl.wrappers import CEMRLWrapper
    from src.envs.toy_goal_env import ToyGoalEnv
    from src.envs.wrappers.success import PercentageSuccessWrapper
    from src.envs.samplers import RandomBoxSampler, UniformCircleSampler
    from thesis.core.callback import ExplorationCallback
    from gymnasium.wrappers.time_limit import TimeLimit
    from stable_baselines3.common.callbacks import EvalCallback
    from stable_baselines3.common.vec_env import DummyVecEnv
    from thesis.cemrl.callback import TaskEncodingCheckerCallback
    from stable_baselines3.sac import SAC
    sampler = RandomBoxSampler(num_goals=100)
    eval_sampler = UniformCircleSampler(num_goals=32)
    vec_env = DummyVecEnv([lambda: CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(sampler), 200)))] * 100)
    explore_vec_env = DummyVecEnv([lambda: CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(sampler), 200)))] * 100)
    eval_vec_env = DummyVecEnv([lambda: CEMRLWrapper(PercentageSuccessWrapper(TimeLimit(ToyGoalEnv(eval_sampler), 200)))] * 32)

    sac = SAC("MultiInputPolicy", explore_vec_env, 3e-3, learning_starts=100)
    sac.learn(400_000, progress_bar=True, callback=EvalCallback(eval_vec_env, n_eval_episodes=32, eval_freq=10_000))

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
    import cv2
    obs = sac.env.reset()
    state = None
    while True:
        image = sac.env.render()
        cv2.imshow("obs", image)
        cv2.waitKey(1)
        action, state = sac.policy.predict(obs, state)
        obs, _, done, _ = sac.env.step(action)
        if done:
            obs = sac.env.reset()


if __name__ == "__main__":
    test_smm_cemrl()