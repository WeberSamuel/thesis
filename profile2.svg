<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="634" onload="init(evt)" viewBox="0 0 1200 634" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="634" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">C:\Users\samue\miniconda3\envs\thesis\Scripts\py-spy.exe record -o profile2.svg --pid 29784</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="623.00"> </text><svg id="frames" x="10" width="1180" total_samples="7029"><g><title>replace (dataclasses.py:1423) (25 samples, 0.36%)</title><rect x="1.5507%" y="260" width="0.3557%" height="15" fill="rgb(227,0,7)" fg:x="109" fg:w="25"/><text x="1.8007%" y="270.50"></text></g><g><title>_is_dataclass_instance (dataclasses.py:1207) (10 samples, 0.14%)</title><rect x="1.7641%" y="276" width="0.1423%" height="15" fill="rgb(217,0,24)" fg:x="124" fg:w="10"/><text x="2.0141%" y="286.50"></text></g><g><title>replace (dataclasses.py:1429) (20 samples, 0.28%)</title><rect x="1.9064%" y="260" width="0.2845%" height="15" fill="rgb(221,193,54)" fg:x="134" fg:w="20"/><text x="2.1564%" y="270.50"></text></g><g><title>replace (dataclasses.py:1431) (20 samples, 0.28%)</title><rect x="2.1909%" y="260" width="0.2845%" height="15" fill="rgb(248,212,6)" fg:x="154" fg:w="20"/><text x="2.4409%" y="270.50"></text></g><g><title>replace (dataclasses.py:1434) (15 samples, 0.21%)</title><rect x="2.4755%" y="260" width="0.2134%" height="15" fill="rgb(208,68,35)" fg:x="174" fg:w="15"/><text x="2.7255%" y="270.50"></text></g><g><title>replace (dataclasses.py:1442) (17 samples, 0.24%)</title><rect x="2.6889%" y="260" width="0.2419%" height="15" fill="rgb(232,128,0)" fg:x="189" fg:w="17"/><text x="2.9389%" y="270.50"></text></g><g><title>replace (dataclasses.py:1443) (14 samples, 0.20%)</title><rect x="2.9307%" y="260" width="0.1992%" height="15" fill="rgb(207,160,47)" fg:x="206" fg:w="14"/><text x="3.1807%" y="270.50"></text></g><g><title>replace (dataclasses.py:1446) (63 samples, 0.90%)</title><rect x="3.1299%" y="260" width="0.8963%" height="15" fill="rgb(228,23,34)" fg:x="220" fg:w="63"/><text x="3.3799%" y="270.50"></text></g><g><title>__init__ (&lt;string&gt;:3) (13 samples, 0.18%)</title><rect x="4.6664%" y="276" width="0.1849%" height="15" fill="rgb(218,30,26)" fg:x="328" fg:w="13"/><text x="4.9164%" y="286.50"></text></g><g><title>copy (rich\table.py:116) (249 samples, 3.54%)</title><rect x="1.4227%" y="244" width="3.5425%" height="15" fill="rgb(220,122,19)" fg:x="100" fg:w="249"/><text x="1.6727%" y="254.50">copy..</text></g><g><title>replace (dataclasses.py:1453) (66 samples, 0.94%)</title><rect x="4.0262%" y="260" width="0.9390%" height="15" fill="rgb(250,228,42)" fg:x="283" fg:w="66"/><text x="4.2762%" y="270.50"></text></g><g><title>get_file_type (pydevd.py:1020) (10 samples, 0.14%)</title><rect x="4.9651%" y="244" width="0.1423%" height="15" fill="rgb(240,193,28)" fg:x="349" fg:w="10"/><text x="5.2151%" y="254.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1556) (314 samples, 4.47%)</title><rect x="0.7256%" y="228" width="4.4672%" height="15" fill="rgb(216,20,37)" fg:x="51" fg:w="314"/><text x="0.9756%" y="238.50">&lt;gene..</text></g><g><title>__init__ (&lt;string&gt;:3) (11 samples, 0.16%)</title><rect x="5.6053%" y="244" width="0.1565%" height="15" fill="rgb(206,188,39)" fg:x="394" fg:w="11"/><text x="5.8553%" y="254.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1558) (44 samples, 0.63%)</title><rect x="5.1928%" y="228" width="0.6260%" height="15" fill="rgb(217,207,13)" fg:x="365" fg:w="44"/><text x="5.4428%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1559) (8 samples, 0.11%)</title><rect x="5.8188%" y="228" width="0.1138%" height="15" fill="rgb(231,73,38)" fg:x="409" fg:w="8"/><text x="6.0688%" y="238.50"></text></g><g><title>__init__ (&lt;string&gt;:17) (8 samples, 0.11%)</title><rect x="6.5870%" y="260" width="0.1138%" height="15" fill="rgb(225,20,46)" fg:x="463" fg:w="8"/><text x="6.8370%" y="270.50"></text></g><g><title>__init__ (&lt;string&gt;:3) (13 samples, 0.18%)</title><rect x="6.7008%" y="260" width="0.1849%" height="15" fill="rgb(210,31,41)" fg:x="471" fg:w="13"/><text x="6.9508%" y="270.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1560) (73 samples, 1.04%)</title><rect x="5.9326%" y="228" width="1.0386%" height="15" fill="rgb(221,200,47)" fg:x="417" fg:w="73"/><text x="6.1826%" y="238.50"></text></g><g><title>get_table_column (rich\progress.py:503) (62 samples, 0.88%)</title><rect x="6.0891%" y="244" width="0.8821%" height="15" fill="rgb(226,26,5)" fg:x="428" fg:w="62"/><text x="6.3391%" y="254.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1562) (33 samples, 0.47%)</title><rect x="6.9711%" y="228" width="0.4695%" height="15" fill="rgb(249,33,26)" fg:x="490" fg:w="33"/><text x="7.2211%" y="238.50"></text></g><g><title>__init__ (rich\table.py:224) (13 samples, 0.18%)</title><rect x="7.5971%" y="244" width="0.1849%" height="15" fill="rgb(235,183,28)" fg:x="534" fg:w="13"/><text x="7.8471%" y="254.50"></text></g><g><title>make_tasks_table (rich\progress.py:1564) (518 samples, 7.37%)</title><rect x="0.6260%" y="212" width="7.3695%" height="15" fill="rgb(221,5,38)" fg:x="44" fg:w="518"/><text x="0.8760%" y="222.50">make_tasks..</text></g><g><title>grid (rich\table.py:272) (39 samples, 0.55%)</title><rect x="7.4406%" y="228" width="0.5548%" height="15" fill="rgb(247,18,42)" fg:x="523" fg:w="39"/><text x="7.6906%" y="238.50"></text></g><g><title>render (rich\progress.py:784) (9 samples, 0.13%)</title><rect x="8.3938%" y="260" width="0.1280%" height="15" fill="rgb(241,131,45)" fg:x="590" fg:w="9"/><text x="8.6438%" y="270.50"></text></g><g><title>__call__ (rich\progress.py:524) (42 samples, 0.60%)</title><rect x="8.1804%" y="244" width="0.5975%" height="15" fill="rgb(249,31,29)" fg:x="575" fg:w="42"/><text x="8.4304%" y="254.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1569) (61 samples, 0.87%)</title><rect x="7.9954%" y="228" width="0.8678%" height="15" fill="rgb(225,111,53)" fg:x="562" fg:w="61"/><text x="8.2454%" y="238.50"></text></g><g><title>&lt;genexpr&gt; (rich\progress.py:1571) (11 samples, 0.16%)</title><rect x="8.8633%" y="228" width="0.1565%" height="15" fill="rgb(238,160,17)" fg:x="623" fg:w="11"/><text x="9.1133%" y="238.50"></text></g><g><title>make_tasks_table (rich\progress.py:1568) (86 samples, 1.22%)</title><rect x="7.9954%" y="212" width="1.2235%" height="15" fill="rgb(214,148,48)" fg:x="562" fg:w="86"/><text x="8.2454%" y="222.50"></text></g><g><title>refresh (rich\live.py:221) (654 samples, 9.30%)</title><rect x="0.1138%" y="132" width="9.3043%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="654"/><text x="0.3638%" y="142.50">refresh (rich..</text></g><g><title>renderable (rich\live.py:203) (653 samples, 9.29%)</title><rect x="0.1280%" y="148" width="9.2901%" height="15" fill="rgb(209,103,24)" fg:x="9" fg:w="653"/><text x="0.3780%" y="158.50">renderable (r..</text></g><g><title>get_renderable (rich\live.py:98) (651 samples, 9.26%)</title><rect x="0.1565%" y="164" width="9.2616%" height="15" fill="rgb(229,88,8)" fg:x="11" fg:w="651"/><text x="0.4065%" y="174.50">get_renderabl..</text></g><g><title>get_renderable (rich\progress.py:1539) (651 samples, 9.26%)</title><rect x="0.1565%" y="180" width="9.2616%" height="15" fill="rgb(213,181,19)" fg:x="11" fg:w="651"/><text x="0.4065%" y="190.50">get_renderabl..</text></g><g><title>get_renderables (rich\progress.py:1544) (643 samples, 9.15%)</title><rect x="0.2703%" y="196" width="9.1478%" height="15" fill="rgb(254,191,54)" fg:x="19" fg:w="643"/><text x="0.5203%" y="206.50">get_renderabl..</text></g><g><title>refresh (rich\live.py:239) (24 samples, 0.34%)</title><rect x="9.4466%" y="132" width="0.3414%" height="15" fill="rgb(241,83,37)" fg:x="664" fg:w="24"/><text x="9.6966%" y="142.50"></text></g><g><title>__exit__ (rich\console.py:848) (21 samples, 0.30%)</title><rect x="9.4893%" y="148" width="0.2988%" height="15" fill="rgb(233,36,39)" fg:x="667" fg:w="21"/><text x="9.7393%" y="158.50"></text></g><g><title>_exit_buffer (rich\console.py:806) (20 samples, 0.28%)</title><rect x="9.5035%" y="164" width="0.2845%" height="15" fill="rgb(226,3,54)" fg:x="668" fg:w="20"/><text x="9.7535%" y="174.50"></text></g><g><title>_check_buffer (rich\console.py:2009) (19 samples, 0.27%)</title><rect x="9.5177%" y="180" width="0.2703%" height="15" fill="rgb(245,192,40)" fg:x="669" fg:w="19"/><text x="9.7677%" y="190.50"></text></g><g><title>write (wandb\sdk\lib\redirect.py:643) (14 samples, 0.20%)</title><rect x="9.5888%" y="196" width="0.1992%" height="15" fill="rgb(238,167,29)" fg:x="674" fg:w="14"/><text x="9.8388%" y="206.50"></text></g><g><title>&lt;lambda&gt; (wandb\sdk\wandb_run.py:2079) (14 samples, 0.20%)</title><rect x="9.5888%" y="212" width="0.1992%" height="15" fill="rgb(232,182,51)" fg:x="674" fg:w="14"/><text x="9.8388%" y="222.50"></text></g><g><title>wrapper_fn (wandb\sdk\wandb_run.py:342) (14 samples, 0.20%)</title><rect x="9.5888%" y="228" width="0.1992%" height="15" fill="rgb(231,60,39)" fg:x="674" fg:w="14"/><text x="9.8388%" y="238.50"></text></g><g><title>_console_raw_callback (wandb\sdk\wandb_run.py:1425) (14 samples, 0.20%)</title><rect x="9.5888%" y="244" width="0.1992%" height="15" fill="rgb(208,69,12)" fg:x="674" fg:w="14"/><text x="9.8388%" y="254.50"></text></g><g><title>publish_output_raw (wandb\sdk\interface\interface.py:658) (12 samples, 0.17%)</title><rect x="9.6173%" y="260" width="0.1707%" height="15" fill="rgb(235,93,37)" fg:x="676" fg:w="12"/><text x="9.8673%" y="270.50"></text></g><g><title>_publish_output_raw (wandb\sdk\interface\interface_shared.py:79) (11 samples, 0.16%)</title><rect x="9.6315%" y="276" width="0.1565%" height="15" fill="rgb(213,116,39)" fg:x="677" fg:w="11"/><text x="9.8815%" y="286.50"></text></g><g><title>_publish (wandb\sdk\interface\interface_sock.py:51) (10 samples, 0.14%)</title><rect x="9.6458%" y="292" width="0.1423%" height="15" fill="rgb(222,207,29)" fg:x="678" fg:w="10"/><text x="9.8958%" y="302.50"></text></g><g><title>send_record_publish (wandb\sdk\lib\sock_client.py:221) (9 samples, 0.13%)</title><rect x="9.6600%" y="308" width="0.1280%" height="15" fill="rgb(206,96,30)" fg:x="679" fg:w="9"/><text x="9.9100%" y="318.50"></text></g><g><title>send_server_request (wandb\sdk\lib\sock_client.py:155) (9 samples, 0.13%)</title><rect x="9.6600%" y="324" width="0.1280%" height="15" fill="rgb(218,138,4)" fg:x="679" fg:w="9"/><text x="9.9100%" y="334.50"></text></g><g><title>_send_message (wandb\sdk\lib\sock_client.py:152) (8 samples, 0.11%)</title><rect x="9.6742%" y="340" width="0.1138%" height="15" fill="rgb(250,191,14)" fg:x="680" fg:w="8"/><text x="9.9242%" y="350.50"></text></g><g><title>_measure_column (rich\table.py:722) (15 samples, 0.21%)</title><rect x="10.2291%" y="308" width="0.2134%" height="15" fill="rgb(239,60,40)" fg:x="719" fg:w="15"/><text x="10.4791%" y="318.50"></text></g><g><title>get (rich\measure.py:109) (8 samples, 0.11%)</title><rect x="10.4567%" y="356" width="0.1138%" height="15" fill="rgb(206,27,48)" fg:x="735" fg:w="8"/><text x="10.7067%" y="366.50"></text></g><g><title>get (rich\measure.py:109) (15 samples, 0.21%)</title><rect x="10.4425%" y="324" width="0.2134%" height="15" fill="rgb(225,35,8)" fg:x="734" fg:w="15"/><text x="10.6925%" y="334.50"></text></g><g><title>__rich_measure__ (rich\padding.py:132) (15 samples, 0.21%)</title><rect x="10.4425%" y="340" width="0.2134%" height="15" fill="rgb(250,213,24)" fg:x="734" fg:w="15"/><text x="10.6925%" y="350.50"></text></g><g><title>_calculate_column_widths (rich\table.py:519) (33 samples, 0.47%)</title><rect x="10.2006%" y="276" width="0.4695%" height="15" fill="rgb(247,123,22)" fg:x="717" fg:w="33"/><text x="10.4506%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (rich\table.py:520) (33 samples, 0.47%)</title><rect x="10.2006%" y="292" width="0.4695%" height="15" fill="rgb(231,138,38)" fg:x="717" fg:w="33"/><text x="10.4506%" y="302.50"></text></g><g><title>_measure_column (rich\table.py:723) (16 samples, 0.23%)</title><rect x="10.4425%" y="308" width="0.2276%" height="15" fill="rgb(231,145,46)" fg:x="734" fg:w="16"/><text x="10.6925%" y="318.50"></text></g><g><title>_measure_column (rich\table.py:722) (11 samples, 0.16%)</title><rect x="10.6843%" y="308" width="0.1565%" height="15" fill="rgb(251,118,11)" fg:x="751" fg:w="11"/><text x="10.9343%" y="318.50"></text></g><g><title>get (rich\measure.py:109) (10 samples, 0.14%)</title><rect x="10.8835%" y="356" width="0.1423%" height="15" fill="rgb(217,147,25)" fg:x="765" fg:w="10"/><text x="11.1335%" y="366.50"></text></g><g><title>__rich_measure__ (rich\padding.py:132) (13 samples, 0.18%)</title><rect x="10.8693%" y="340" width="0.1849%" height="15" fill="rgb(247,81,37)" fg:x="764" fg:w="13"/><text x="11.1193%" y="350.50"></text></g><g><title>get (rich\measure.py:109) (14 samples, 0.20%)</title><rect x="10.8693%" y="324" width="0.1992%" height="15" fill="rgb(209,12,38)" fg:x="764" fg:w="14"/><text x="11.1193%" y="334.50"></text></g><g><title>__rich_console__ (rich\table.py:478) (64 samples, 0.91%)</title><rect x="10.2006%" y="260" width="0.9105%" height="15" fill="rgb(227,1,9)" fg:x="717" fg:w="64"/><text x="10.4506%" y="270.50"></text></g><g><title>_calculate_column_widths (rich\table.py:558) (30 samples, 0.43%)</title><rect x="10.6843%" y="276" width="0.4268%" height="15" fill="rgb(248,47,43)" fg:x="751" fg:w="30"/><text x="10.9343%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (rich\table.py:559) (30 samples, 0.43%)</title><rect x="10.6843%" y="292" width="0.4268%" height="15" fill="rgb(221,10,30)" fg:x="751" fg:w="30"/><text x="10.9343%" y="302.50"></text></g><g><title>_measure_column (rich\table.py:723) (19 samples, 0.27%)</title><rect x="10.8408%" y="308" width="0.2703%" height="15" fill="rgb(210,229,1)" fg:x="762" fg:w="19"/><text x="11.0908%" y="318.50"></text></g><g><title>_render (rich\table.py:747) (10 samples, 0.14%)</title><rect x="11.1822%" y="276" width="0.1423%" height="15" fill="rgb(222,148,37)" fg:x="786" fg:w="10"/><text x="11.4322%" y="286.50"></text></g><g><title>__rich_console__ (rich\text.py:633) (8 samples, 0.11%)</title><rect x="11.6233%" y="404" width="0.1138%" height="15" fill="rgb(234,67,33)" fg:x="817" fg:w="8"/><text x="11.8733%" y="414.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:292) (28 samples, 0.40%)</title><rect x="11.5664%" y="372" width="0.3983%" height="15" fill="rgb(247,98,35)" fg:x="813" fg:w="28"/><text x="11.8164%" y="382.50"></text></g><g><title>render (rich\console.py:1305) (24 samples, 0.34%)</title><rect x="11.6233%" y="388" width="0.3414%" height="15" fill="rgb(247,138,52)" fg:x="817" fg:w="24"/><text x="11.8733%" y="398.50"></text></g><g><title>__rich_console__ (rich\text.py:642) (13 samples, 0.18%)</title><rect x="11.7798%" y="404" width="0.1849%" height="15" fill="rgb(213,79,30)" fg:x="828" fg:w="13"/><text x="12.0298%" y="414.50"></text></g><g><title>render (rich\console.py:1305) (37 samples, 0.53%)</title><rect x="11.4810%" y="324" width="0.5264%" height="15" fill="rgb(246,177,23)" fg:x="807" fg:w="37"/><text x="11.7310%" y="334.50"></text></g><g><title>__rich_console__ (rich\padding.py:97) (34 samples, 0.48%)</title><rect x="11.5237%" y="340" width="0.4837%" height="15" fill="rgb(230,62,27)" fg:x="810" fg:w="34"/><text x="11.7737%" y="350.50"></text></g><g><title>render_lines (rich\console.py:1345) (32 samples, 0.46%)</title><rect x="11.5521%" y="356" width="0.4553%" height="15" fill="rgb(216,154,8)" fg:x="812" fg:w="32"/><text x="11.8021%" y="366.50"></text></g><g><title>_render (rich\table.py:823) (47 samples, 0.67%)</title><rect x="11.3672%" y="276" width="0.6687%" height="15" fill="rgb(244,35,45)" fg:x="799" fg:w="47"/><text x="11.6172%" y="286.50"></text></g><g><title>render_lines (rich\console.py:1345) (45 samples, 0.64%)</title><rect x="11.3956%" y="292" width="0.6402%" height="15" fill="rgb(251,115,12)" fg:x="801" fg:w="45"/><text x="11.6456%" y="302.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:292) (43 samples, 0.61%)</title><rect x="11.4241%" y="308" width="0.6118%" height="15" fill="rgb(240,54,50)" fg:x="803" fg:w="43"/><text x="11.6741%" y="318.50"></text></g><g><title>render (rich\console.py:1305) (139 samples, 1.98%)</title><rect x="10.2006%" y="244" width="1.9775%" height="15" fill="rgb(233,84,52)" fg:x="717" fg:w="139"/><text x="10.4506%" y="254.50">r..</text></g><g><title>__rich_console__ (rich\table.py:505) (75 samples, 1.07%)</title><rect x="11.1111%" y="260" width="1.0670%" height="15" fill="rgb(207,117,47)" fg:x="781" fg:w="75"/><text x="11.3611%" y="270.50"></text></g><g><title>split_and_crop_lines (rich\segment.py:292) (149 samples, 2.12%)</title><rect x="10.1010%" y="212" width="2.1198%" height="15" fill="rgb(249,43,39)" fg:x="710" fg:w="149"/><text x="10.3510%" y="222.50">s..</text></g><g><title>render (rich\console.py:1309) (146 samples, 2.08%)</title><rect x="10.1437%" y="228" width="2.0771%" height="15" fill="rgb(209,38,44)" fg:x="713" fg:w="146"/><text x="10.3937%" y="238.50">r..</text></g><g><title>__rich_console__ (rich\live_render.py:88) (158 samples, 2.25%)</title><rect x="10.0868%" y="180" width="2.2478%" height="15" fill="rgb(236,212,23)" fg:x="709" fg:w="158"/><text x="10.3368%" y="190.50">_..</text></g><g><title>render_lines (rich\console.py:1345) (158 samples, 2.25%)</title><rect x="10.0868%" y="196" width="2.2478%" height="15" fill="rgb(242,79,21)" fg:x="709" fg:w="158"/><text x="10.3368%" y="206.50">r..</text></g><g><title>render (rich\console.py:1305) (166 samples, 2.36%)</title><rect x="9.9872%" y="164" width="2.3616%" height="15" fill="rgb(211,96,35)" fg:x="702" fg:w="166"/><text x="10.2372%" y="174.50">re..</text></g><g><title>print (rich\console.py:1673) (168 samples, 2.39%)</title><rect x="9.9730%" y="148" width="2.3901%" height="15" fill="rgb(253,215,40)" fg:x="701" fg:w="168"/><text x="10.2230%" y="158.50">pr..</text></g><g><title>run (rich\live.py:32) (872 samples, 12.41%)</title><rect x="0.0996%" y="116" width="12.4057%" height="15" fill="rgb(211,81,21)" fg:x="7" fg:w="872"/><text x="0.3496%" y="126.50">run (rich\live.py:3..</text></g><g><title>refresh (rich\live.py:240) (191 samples, 2.72%)</title><rect x="9.7880%" y="132" width="2.7173%" height="15" fill="rgb(208,190,38)" fg:x="688" fg:w="191"/><text x="10.0380%" y="142.50">re..</text></g><g><title>_read_packet_bytes (wandb\sdk\lib\sock_client.py:255) (9 samples, 0.13%)</title><rect x="12.7187%" y="180" width="0.1280%" height="15" fill="rgb(235,213,38)" fg:x="894" fg:w="9"/><text x="12.9687%" y="190.50"></text></g><g><title>run (threading.py:953) (26 samples, 0.37%)</title><rect x="12.5053%" y="116" width="0.3699%" height="15" fill="rgb(237,122,38)" fg:x="879" fg:w="26"/><text x="12.7553%" y="126.50"></text></g><g><title>message_loop (wandb\sdk\interface\router.py:70) (14 samples, 0.20%)</title><rect x="12.6761%" y="132" width="0.1992%" height="15" fill="rgb(244,218,35)" fg:x="891" fg:w="14"/><text x="12.9261%" y="142.50"></text></g><g><title>_read_message (wandb\sdk\interface\router_sock.py:27) (14 samples, 0.20%)</title><rect x="12.6761%" y="148" width="0.1992%" height="15" fill="rgb(240,68,47)" fg:x="891" fg:w="14"/><text x="12.9261%" y="158.50"></text></g><g><title>read_server_response (wandb\sdk\lib\sock_client.py:285) (14 samples, 0.20%)</title><rect x="12.6761%" y="164" width="0.1992%" height="15" fill="rgb(210,16,53)" fg:x="891" fg:w="14"/><text x="12.9261%" y="174.50"></text></g><g><title>__call__ (_pydev_bundle\pydev_monkey.py:1118) (911 samples, 12.96%)</title><rect x="0.0000%" y="68" width="12.9606%" height="15" fill="rgb(235,124,12)" fg:x="0" fg:w="911"/><text x="0.2500%" y="78.50">__call__ (_pydev_bu..</text></g><g><title>_bootstrap (threading.py:973) (911 samples, 12.96%)</title><rect x="0.0000%" y="84" width="12.9606%" height="15" fill="rgb(224,169,11)" fg:x="0" fg:w="911"/><text x="0.2500%" y="94.50">_bootstrap (threadi..</text></g><g><title>_bootstrap_inner (threading.py:1016) (911 samples, 12.96%)</title><rect x="0.0000%" y="100" width="12.9606%" height="15" fill="rgb(250,166,2)" fg:x="0" fg:w="911"/><text x="0.2500%" y="110.50">_bootstrap_inner (t..</text></g><g><title>_on_run (_pydevd_bundle\pydevd_comm.py:368) (8 samples, 0.11%)</title><rect x="12.9606%" y="116" width="0.1138%" height="15" fill="rgb(242,216,29)" fg:x="911" fg:w="8"/><text x="13.2106%" y="126.50"></text></g><g><title>_on_run (pydevd.py:211) (30 samples, 0.43%)</title><rect x="13.0886%" y="116" width="0.4268%" height="15" fill="rgb(230,116,27)" fg:x="920" fg:w="30"/><text x="13.3386%" y="126.50"></text></g><g><title>_bootstrap (threading.py:973) (49 samples, 0.70%)</title><rect x="12.9606%" y="68" width="0.6971%" height="15" fill="rgb(228,99,48)" fg:x="911" fg:w="49"/><text x="13.2106%" y="78.50"></text></g><g><title>_bootstrap_inner (threading.py:1016) (49 samples, 0.70%)</title><rect x="12.9606%" y="84" width="0.6971%" height="15" fill="rgb(253,11,6)" fg:x="911" fg:w="49"/><text x="13.2106%" y="94.50"></text></g><g><title>run (_pydevd_bundle\pydevd_daemon_thread.py:49) (49 samples, 0.70%)</title><rect x="12.9606%" y="100" width="0.6971%" height="15" fill="rgb(247,143,39)" fg:x="911" fg:w="49"/><text x="13.2106%" y="110.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:344) (9 samples, 0.13%)</title><rect x="13.6862%" y="388" width="0.1280%" height="15" fill="rgb(236,97,10)" fg:x="962" fg:w="9"/><text x="13.9362%" y="398.50"></text></g><g><title>set_training_mode (stable_baselines3\common\policies.py:209) (9 samples, 0.13%)</title><rect x="13.6862%" y="404" width="0.1280%" height="15" fill="rgb(233,208,19)" fg:x="962" fg:w="9"/><text x="13.9362%" y="414.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (9 samples, 0.13%)</title><rect x="13.6862%" y="420" width="0.1280%" height="15" fill="rgb(216,164,2)" fg:x="962" fg:w="9"/><text x="13.9362%" y="430.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (9 samples, 0.13%)</title><rect x="13.6862%" y="436" width="0.1280%" height="15" fill="rgb(220,129,5)" fg:x="962" fg:w="9"/><text x="13.9362%" y="446.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (9 samples, 0.13%)</title><rect x="13.6862%" y="452" width="0.1280%" height="15" fill="rgb(242,17,10)" fg:x="962" fg:w="9"/><text x="13.9362%" y="462.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (8 samples, 0.11%)</title><rect x="13.7004%" y="468" width="0.1138%" height="15" fill="rgb(242,107,0)" fg:x="963" fg:w="8"/><text x="13.9504%" y="478.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:346) (9 samples, 0.13%)</title><rect x="13.8142%" y="388" width="0.1280%" height="15" fill="rgb(251,28,31)" fg:x="971" fg:w="9"/><text x="14.0642%" y="398.50"></text></g><g><title>obs_to_tensor (stable_baselines3\common\policies.py:268) (9 samples, 0.13%)</title><rect x="13.8142%" y="404" width="0.1280%" height="15" fill="rgb(233,223,10)" fg:x="971" fg:w="9"/><text x="14.0642%" y="414.50"></text></g><g><title>encode (networks.py:39) (32 samples, 0.46%)</title><rect x="13.9707%" y="484" width="0.4553%" height="15" fill="rgb(215,21,27)" fg:x="982" fg:w="32"/><text x="14.2207%" y="494.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (32 samples, 0.46%)</title><rect x="13.9707%" y="500" width="0.4553%" height="15" fill="rgb(232,23,21)" fg:x="982" fg:w="32"/><text x="14.2207%" y="510.50"></text></g><g><title>forward (torch\nn\modules\rnn.py:998) (31 samples, 0.44%)</title><rect x="13.9849%" y="516" width="0.4410%" height="15" fill="rgb(244,5,23)" fg:x="983" fg:w="31"/><text x="14.2349%" y="526.50"></text></g><g><title>forward (networks.py:30) (40 samples, 0.57%)</title><rect x="13.9707%" y="452" width="0.5691%" height="15" fill="rgb(226,81,46)" fg:x="982" fg:w="40"/><text x="14.2207%" y="462.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (40 samples, 0.57%)</title><rect x="13.9707%" y="468" width="0.5691%" height="15" fill="rgb(247,70,30)" fg:x="982" fg:w="40"/><text x="14.2207%" y="478.50"></text></g><g><title>_predict (policies.py:105) (42 samples, 0.60%)</title><rect x="13.9707%" y="404" width="0.5975%" height="15" fill="rgb(212,68,19)" fg:x="982" fg:w="42"/><text x="14.2207%" y="414.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (42 samples, 0.60%)</title><rect x="13.9707%" y="420" width="0.5975%" height="15" fill="rgb(240,187,13)" fg:x="982" fg:w="42"/><text x="14.2207%" y="430.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (42 samples, 0.60%)</title><rect x="13.9707%" y="436" width="0.5975%" height="15" fill="rgb(223,113,26)" fg:x="982" fg:w="42"/><text x="14.2207%" y="446.50"></text></g><g><title>sample (gymnasium\spaces\box.py:209) (9 samples, 0.13%)</title><rect x="14.8101%" y="468" width="0.1280%" height="15" fill="rgb(206,192,2)" fg:x="1041" fg:w="9"/><text x="15.0601%" y="478.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;:200) (17 samples, 0.24%)</title><rect x="15.2938%" y="484" width="0.2419%" height="15" fill="rgb(241,108,4)" fg:x="1075" fg:w="17"/><text x="15.5438%" y="494.50"></text></g><g><title>all (numpy\core\fromnumeric.py:2515) (16 samples, 0.23%)</title><rect x="15.3080%" y="500" width="0.2276%" height="15" fill="rgb(247,173,49)" fg:x="1076" fg:w="16"/><text x="15.5580%" y="510.50"></text></g><g><title>_wrapreduction (numpy\core\fromnumeric.py:86) (8 samples, 0.11%)</title><rect x="15.4218%" y="516" width="0.1138%" height="15" fill="rgb(224,114,35)" fg:x="1084" fg:w="8"/><text x="15.6718%" y="526.50"></text></g><g><title>any (&lt;__array_function__ internals&gt;:200) (11 samples, 0.16%)</title><rect x="15.5925%" y="484" width="0.1565%" height="15" fill="rgb(245,159,27)" fg:x="1096" fg:w="11"/><text x="15.8425%" y="494.50"></text></g><g><title>sample (gymnasium\spaces\box.py:218) (53 samples, 0.75%)</title><rect x="15.0092%" y="468" width="0.7540%" height="15" fill="rgb(245,172,44)" fg:x="1055" fg:w="53"/><text x="15.2592%" y="478.50"></text></g><g><title>&lt;listcomp&gt; (policies.py:64) (92 samples, 1.31%)</title><rect x="14.5682%" y="452" width="1.3089%" height="15" fill="rgb(236,23,11)" fg:x="1024" fg:w="92"/><text x="14.8182%" y="462.50"></text></g><g><title>_predict (policies.py:64) (93 samples, 1.32%)</title><rect x="14.5682%" y="436" width="1.3231%" height="15" fill="rgb(205,117,38)" fg:x="1024" fg:w="93"/><text x="14.8182%" y="446.50"></text></g><g><title>forward (networks.py:91) (35 samples, 0.50%)</title><rect x="15.9198%" y="532" width="0.4979%" height="15" fill="rgb(237,72,25)" fg:x="1119" fg:w="35"/><text x="16.1698%" y="542.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (32 samples, 0.46%)</title><rect x="15.9624%" y="548" width="0.4553%" height="15" fill="rgb(244,70,9)" fg:x="1122" fg:w="32"/><text x="16.2124%" y="558.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (32 samples, 0.46%)</title><rect x="15.9624%" y="564" width="0.4553%" height="15" fill="rgb(217,125,39)" fg:x="1122" fg:w="32"/><text x="16.2124%" y="574.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (30 samples, 0.43%)</title><rect x="15.9909%" y="580" width="0.4268%" height="15" fill="rgb(235,36,10)" fg:x="1124" fg:w="30"/><text x="16.2409%" y="590.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (25 samples, 0.36%)</title><rect x="16.0620%" y="596" width="0.3557%" height="15" fill="rgb(251,123,47)" fg:x="1129" fg:w="25"/><text x="16.3120%" y="606.50"></text></g><g><title>forward (networks.py:49) (61 samples, 0.87%)</title><rect x="15.9055%" y="484" width="0.8678%" height="15" fill="rgb(221,13,13)" fg:x="1118" fg:w="61"/><text x="16.1555%" y="494.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (61 samples, 0.87%)</title><rect x="15.9055%" y="500" width="0.8678%" height="15" fill="rgb(238,131,9)" fg:x="1118" fg:w="61"/><text x="16.1555%" y="510.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (60 samples, 0.85%)</title><rect x="15.9198%" y="516" width="0.8536%" height="15" fill="rgb(211,50,8)" fg:x="1119" fg:w="60"/><text x="16.1698%" y="526.50"></text></g><g><title>forward (networks.py:93) (24 samples, 0.34%)</title><rect x="16.4319%" y="532" width="0.3414%" height="15" fill="rgb(245,182,24)" fg:x="1155" fg:w="24"/><text x="16.6819%" y="542.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (20 samples, 0.28%)</title><rect x="16.4888%" y="548" width="0.2845%" height="15" fill="rgb(242,14,37)" fg:x="1159" fg:w="20"/><text x="16.7388%" y="558.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (20 samples, 0.28%)</title><rect x="16.4888%" y="564" width="0.2845%" height="15" fill="rgb(246,228,12)" fg:x="1159" fg:w="20"/><text x="16.7388%" y="574.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (19 samples, 0.27%)</title><rect x="16.5031%" y="580" width="0.2703%" height="15" fill="rgb(213,55,15)" fg:x="1160" fg:w="19"/><text x="16.7531%" y="590.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (15 samples, 0.21%)</title><rect x="16.5600%" y="596" width="0.2134%" height="15" fill="rgb(209,9,3)" fg:x="1164" fg:w="15"/><text x="16.8100%" y="606.50"></text></g><g><title>predict (stable_baselines3\common\policies.py:349) (206 samples, 2.93%)</title><rect x="13.9422%" y="388" width="2.9307%" height="15" fill="rgb(230,59,30)" fg:x="980" fg:w="206"/><text x="14.1922%" y="398.50">pr..</text></g><g><title>_predict (policies.py:107) (162 samples, 2.30%)</title><rect x="14.5682%" y="404" width="2.3047%" height="15" fill="rgb(209,121,21)" fg:x="1024" fg:w="162"/><text x="14.8182%" y="414.50">_..</text></g><g><title>decorate_context (torch\utils\_contextlib.py:115) (162 samples, 2.30%)</title><rect x="14.5682%" y="420" width="2.3047%" height="15" fill="rgb(220,109,13)" fg:x="1024" fg:w="162"/><text x="14.8182%" y="430.50">d..</text></g><g><title>_predict (policies.py:81) (69 samples, 0.98%)</title><rect x="15.8913%" y="436" width="0.9816%" height="15" fill="rgb(232,18,1)" fg:x="1117" fg:w="69"/><text x="16.1413%" y="446.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (69 samples, 0.98%)</title><rect x="15.8913%" y="452" width="0.9816%" height="15" fill="rgb(215,41,42)" fg:x="1117" fg:w="69"/><text x="16.1413%" y="462.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (68 samples, 0.97%)</title><rect x="15.9055%" y="468" width="0.9674%" height="15" fill="rgb(224,123,36)" fg:x="1118" fg:w="68"/><text x="16.1555%" y="478.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:541) (225 samples, 3.20%)</title><rect x="13.6862%" y="340" width="3.2010%" height="15" fill="rgb(240,125,3)" fg:x="962" fg:w="225"/><text x="13.9362%" y="350.50">col..</text></g><g><title>_sample_action (stable_baselines3\common\off_policy_algorithm.py:373) (225 samples, 3.20%)</title><rect x="13.6862%" y="356" width="3.2010%" height="15" fill="rgb(205,98,50)" fg:x="962" fg:w="225"/><text x="13.9362%" y="366.50">_sa..</text></g><g><title>predict (stable_baselines3\common\base_class.py:555) (225 samples, 3.20%)</title><rect x="13.6862%" y="372" width="3.2010%" height="15" fill="rgb(205,185,37)" fg:x="962" fg:w="225"/><text x="13.9362%" y="382.50">pre..</text></g><g><title>step (toy_goal_env.py:66) (14 samples, 0.20%)</title><rect x="17.4989%" y="468" width="0.1992%" height="15" fill="rgb(238,207,15)" fg:x="1230" fg:w="14"/><text x="17.7489%" y="478.50"></text></g><g><title>_clip (numpy\core\_methods.py:134) (10 samples, 0.14%)</title><rect x="18.4094%" y="532" width="0.1423%" height="15" fill="rgb(213,199,42)" fg:x="1294" fg:w="10"/><text x="18.6594%" y="542.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy\core\_methods.py:95) (23 samples, 0.33%)</title><rect x="18.5659%" y="548" width="0.3272%" height="15" fill="rgb(235,201,11)" fg:x="1305" fg:w="23"/><text x="18.8159%" y="558.50"></text></g><g><title>_clip (numpy\core\_methods.py:136) (40 samples, 0.57%)</title><rect x="18.5659%" y="532" width="0.5691%" height="15" fill="rgb(207,46,11)" fg:x="1305" fg:w="40"/><text x="18.8159%" y="542.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy\core\_methods.py:96) (17 samples, 0.24%)</title><rect x="18.8932%" y="548" width="0.2419%" height="15" fill="rgb(241,35,35)" fg:x="1328" fg:w="17"/><text x="19.1432%" y="558.50"></text></g><g><title>ndim (&lt;__array_function__ internals&gt;:200) (9 samples, 0.13%)</title><rect x="19.0070%" y="564" width="0.1280%" height="15" fill="rgb(243,32,47)" fg:x="1336" fg:w="9"/><text x="19.2570%" y="574.50"></text></g><g><title>_clip_dep_is_scalar_nan (numpy\core\_methods.py:95) (9 samples, 0.13%)</title><rect x="19.1635%" y="548" width="0.1280%" height="15" fill="rgb(247,202,23)" fg:x="1347" fg:w="9"/><text x="19.4135%" y="558.50"></text></g><g><title>_clip (numpy\core\_methods.py:139) (17 samples, 0.24%)</title><rect x="19.1350%" y="532" width="0.2419%" height="15" fill="rgb(219,102,11)" fg:x="1345" fg:w="17"/><text x="19.3850%" y="542.50"></text></g><g><title>_clip (numpy\core\_methods.py:161) (24 samples, 0.34%)</title><rect x="19.4053%" y="532" width="0.3414%" height="15" fill="rgb(243,110,44)" fg:x="1364" fg:w="24"/><text x="19.6553%" y="542.50"></text></g><g><title>_clip_dep_invoke_with_casting (numpy\core\_methods.py:115) (19 samples, 0.27%)</title><rect x="19.4765%" y="548" width="0.2703%" height="15" fill="rgb(222,74,54)" fg:x="1369" fg:w="19"/><text x="19.7265%" y="558.50"></text></g><g><title>_wrapfunc (numpy\core\fromnumeric.py:57) (103 samples, 1.47%)</title><rect x="18.3099%" y="516" width="1.4654%" height="15" fill="rgb(216,99,12)" fg:x="1287" fg:w="103"/><text x="18.5599%" y="526.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;:200) (127 samples, 1.81%)</title><rect x="17.9826%" y="484" width="1.8068%" height="15" fill="rgb(226,22,26)" fg:x="1264" fg:w="127"/><text x="18.2326%" y="494.50">c..</text></g><g><title>clip (numpy\core\fromnumeric.py:2180) (127 samples, 1.81%)</title><rect x="17.9826%" y="500" width="1.8068%" height="15" fill="rgb(217,163,10)" fg:x="1264" fg:w="127"/><text x="18.2326%" y="510.50">c..</text></g><g><title>step (toy_goal_env.py:67) (148 samples, 2.11%)</title><rect x="17.6981%" y="468" width="2.1056%" height="15" fill="rgb(213,25,53)" fg:x="1244" fg:w="148"/><text x="17.9481%" y="478.50">s..</text></g><g><title>copy (&lt;__array_function__ internals&gt;:200) (9 samples, 0.13%)</title><rect x="20.0882%" y="500" width="0.1280%" height="15" fill="rgb(252,105,26)" fg:x="1412" fg:w="9"/><text x="20.3382%" y="510.50"></text></g><g><title>step (toy_goal_env.py:72) (30 samples, 0.43%)</title><rect x="19.8321%" y="468" width="0.4268%" height="15" fill="rgb(220,39,43)" fg:x="1394" fg:w="30"/><text x="20.0821%" y="478.50"></text></g><g><title>_get_obs (toy_goal_env.py:87) (26 samples, 0.37%)</title><rect x="19.8890%" y="484" width="0.3699%" height="15" fill="rgb(229,68,48)" fg:x="1398" fg:w="26"/><text x="20.1390%" y="494.50"></text></g><g><title>get_reward (toy_goal_env.py:97) (83 samples, 1.18%)</title><rect x="20.2732%" y="484" width="1.1808%" height="15" fill="rgb(252,8,32)" fg:x="1425" fg:w="83"/><text x="20.5232%" y="494.50"></text></g><g><title>norm (&lt;__array_function__ internals&gt;:200) (61 samples, 0.87%)</title><rect x="20.5861%" y="500" width="0.8678%" height="15" fill="rgb(223,20,43)" fg:x="1447" fg:w="61"/><text x="20.8361%" y="510.50"></text></g><g><title>norm (numpy\linalg\linalg.py:2545) (35 samples, 0.50%)</title><rect x="20.9560%" y="516" width="0.4979%" height="15" fill="rgb(229,81,49)" fg:x="1473" fg:w="35"/><text x="21.2060%" y="526.50"></text></g><g><title>step (toy_goal_env.py:73) (114 samples, 1.62%)</title><rect x="20.2589%" y="468" width="1.6219%" height="15" fill="rgb(236,28,36)" fg:x="1424" fg:w="114"/><text x="20.5089%" y="478.50"></text></g><g><title>get_reward (toy_goal_env.py:98) (30 samples, 0.43%)</title><rect x="21.4540%" y="484" width="0.4268%" height="15" fill="rgb(249,185,26)" fg:x="1508" fg:w="30"/><text x="21.7040%" y="494.50"></text></g><g><title>__call__ (enum.py:385) (16 samples, 0.23%)</title><rect x="21.6532%" y="500" width="0.2276%" height="15" fill="rgb(249,174,33)" fg:x="1522" fg:w="16"/><text x="21.9032%" y="510.50"></text></g><g><title>__new__ (enum.py:688) (8 samples, 0.11%)</title><rect x="21.7670%" y="516" width="0.1138%" height="15" fill="rgb(233,201,37)" fg:x="1530" fg:w="8"/><text x="22.0170%" y="526.50"></text></g><g><title>step (toy_goal_env.py:74) (9 samples, 0.13%)</title><rect x="21.8808%" y="468" width="0.1280%" height="15" fill="rgb(221,78,26)" fg:x="1538" fg:w="9"/><text x="22.1308%" y="478.50"></text></g><g><title>step (success.py:10) (337 samples, 4.79%)</title><rect x="17.2998%" y="436" width="4.7944%" height="15" fill="rgb(250,127,30)" fg:x="1216" fg:w="337"/><text x="17.5498%" y="446.50">step (..</text></g><g><title>step (gymnasium\core.py:408) (326 samples, 4.64%)</title><rect x="17.4563%" y="452" width="4.6379%" height="15" fill="rgb(230,49,44)" fg:x="1227" fg:w="326"/><text x="17.7063%" y="462.50">step ..</text></g><g><title>step (success.py:11) (9 samples, 0.13%)</title><rect x="22.0942%" y="436" width="0.1280%" height="15" fill="rgb(229,67,23)" fg:x="1553" fg:w="9"/><text x="22.3442%" y="446.50"></text></g><g><title>is_success (success.py:30) (9 samples, 0.13%)</title><rect x="22.3076%" y="452" width="0.1280%" height="15" fill="rgb(249,83,47)" fg:x="1568" fg:w="9"/><text x="22.5576%" y="462.50"></text></g><g><title>step (gymnasium\core.py:469) (392 samples, 5.58%)</title><rect x="17.2713%" y="420" width="5.5769%" height="15" fill="rgb(215,43,3)" fg:x="1214" fg:w="392"/><text x="17.5213%" y="430.50">step (g..</text></g><g><title>step (success.py:12) (44 samples, 0.63%)</title><rect x="22.2222%" y="436" width="0.6260%" height="15" fill="rgb(238,154,13)" fg:x="1562" fg:w="44"/><text x="22.4722%" y="446.50"></text></g><g><title>is_success (success.py:31) (29 samples, 0.41%)</title><rect x="22.4356%" y="452" width="0.4126%" height="15" fill="rgb(219,56,2)" fg:x="1577" fg:w="29"/><text x="22.6856%" y="462.50"></text></g><g><title>observation_space (gymnasium\core.py:351) (11 samples, 0.16%)</title><rect x="23.1612%" y="468" width="0.1565%" height="15" fill="rgb(233,0,4)" fg:x="1628" fg:w="11"/><text x="23.4112%" y="478.50"></text></g><g><title>_flatten_box_multibinary (gymnasium\spaces\utils.py:161) (22 samples, 0.31%)</title><rect x="23.3604%" y="484" width="0.3130%" height="15" fill="rgb(235,30,7)" fg:x="1642" fg:w="22"/><text x="23.6104%" y="494.50"></text></g><g><title>add_to_heatmap (heatmap.py:24) (63 samples, 0.90%)</title><rect x="23.0047%" y="452" width="0.8963%" height="15" fill="rgb(250,79,13)" fg:x="1617" fg:w="63"/><text x="23.2547%" y="462.50"></text></g><g><title>wrapper (functools.py:889) (40 samples, 0.57%)</title><rect x="23.3319%" y="468" width="0.5691%" height="15" fill="rgb(211,146,34)" fg:x="1640" fg:w="40"/><text x="23.5819%" y="478.50"></text></g><g><title>dispatch (functools.py:832) (14 samples, 0.20%)</title><rect x="23.7018%" y="484" width="0.1992%" height="15" fill="rgb(228,22,38)" fg:x="1666" fg:w="14"/><text x="23.9518%" y="494.50"></text></g><g><title>__getitem__ (weakref.py:416) (12 samples, 0.17%)</title><rect x="23.7303%" y="500" width="0.1707%" height="15" fill="rgb(235,168,5)" fg:x="1668" fg:w="12"/><text x="23.9803%" y="510.50"></text></g><g><title>add_to_heatmap (heatmap.py:25) (24 samples, 0.34%)</title><rect x="23.9010%" y="452" width="0.3414%" height="15" fill="rgb(221,155,16)" fg:x="1680" fg:w="24"/><text x="24.1510%" y="462.50"></text></g><g><title>_wrapfunc (numpy\core\fromnumeric.py:52) (8 samples, 0.11%)</title><rect x="24.7688%" y="500" width="0.1138%" height="15" fill="rgb(215,215,53)" fg:x="1741" fg:w="8"/><text x="25.0188%" y="510.50"></text></g><g><title>_wrapfunc (numpy\core\fromnumeric.py:57) (24 samples, 0.34%)</title><rect x="24.8969%" y="500" width="0.3414%" height="15" fill="rgb(223,4,10)" fg:x="1750" fg:w="24"/><text x="25.1469%" y="510.50"></text></g><g><title>add_to_heatmap (heatmap.py:26) (71 samples, 1.01%)</title><rect x="24.2424%" y="452" width="1.0101%" height="15" fill="rgb(234,103,6)" fg:x="1704" fg:w="71"/><text x="24.4924%" y="462.50"></text></g><g><title>searchsorted (&lt;__array_function__ internals&gt;:200) (54 samples, 0.77%)</title><rect x="24.4843%" y="468" width="0.7682%" height="15" fill="rgb(227,97,0)" fg:x="1721" fg:w="54"/><text x="24.7343%" y="478.50"></text></g><g><title>searchsorted (numpy\core\fromnumeric.py:1413) (47 samples, 0.67%)</title><rect x="24.5839%" y="484" width="0.6687%" height="15" fill="rgb(234,150,53)" fg:x="1728" fg:w="47"/><text x="24.8339%" y="494.50"></text></g><g><title>add_to_heatmap (heatmap.py:27) (8 samples, 0.11%)</title><rect x="25.2525%" y="452" width="0.1138%" height="15" fill="rgb(228,201,54)" fg:x="1775" fg:w="8"/><text x="25.5025%" y="462.50"></text></g><g><title>add_to_heatmap (heatmap.py:29) (10 samples, 0.14%)</title><rect x="25.3663%" y="452" width="0.1423%" height="15" fill="rgb(222,22,37)" fg:x="1783" fg:w="10"/><text x="25.6163%" y="462.50"></text></g><g><title>add_to_heatmap (heatmap.py:30) (46 samples, 0.65%)</title><rect x="25.5086%" y="452" width="0.6544%" height="15" fill="rgb(237,53,32)" fg:x="1793" fg:w="46"/><text x="25.7586%" y="462.50"></text></g><g><title>searchsorted (&lt;__array_function__ internals&gt;:200) (28 samples, 0.40%)</title><rect x="25.7647%" y="468" width="0.3983%" height="15" fill="rgb(233,25,53)" fg:x="1811" fg:w="28"/><text x="26.0147%" y="478.50"></text></g><g><title>searchsorted (numpy\core\fromnumeric.py:1413) (24 samples, 0.34%)</title><rect x="25.8216%" y="484" width="0.3414%" height="15" fill="rgb(210,40,34)" fg:x="1815" fg:w="24"/><text x="26.0716%" y="494.50"></text></g><g><title>_wrapfunc (numpy\core\fromnumeric.py:57) (10 samples, 0.14%)</title><rect x="26.0208%" y="500" width="0.1423%" height="15" fill="rgb(241,220,44)" fg:x="1829" fg:w="10"/><text x="26.2708%" y="510.50"></text></g><g><title>_wrapfunc (numpy\core\fromnumeric.py:57) (12 samples, 0.17%)</title><rect x="26.4760%" y="500" width="0.1707%" height="15" fill="rgb(235,28,35)" fg:x="1861" fg:w="12"/><text x="26.7260%" y="510.50"></text></g><g><title>searchsorted (&lt;__array_function__ internals&gt;:200) (25 samples, 0.36%)</title><rect x="26.3053%" y="468" width="0.3557%" height="15" fill="rgb(210,56,17)" fg:x="1849" fg:w="25"/><text x="26.5553%" y="478.50"></text></g><g><title>searchsorted (numpy\core\fromnumeric.py:1413) (19 samples, 0.27%)</title><rect x="26.3907%" y="484" width="0.2703%" height="15" fill="rgb(224,130,29)" fg:x="1855" fg:w="19"/><text x="26.6407%" y="494.50"></text></g><g><title>add_to_heatmap (heatmap.py:31) (36 samples, 0.51%)</title><rect x="26.1630%" y="452" width="0.5122%" height="15" fill="rgb(235,212,8)" fg:x="1839" fg:w="36"/><text x="26.4130%" y="462.50"></text></g><g><title>add_to_heatmap (heatmap.py:34) (27 samples, 0.38%)</title><rect x="26.6894%" y="452" width="0.3841%" height="15" fill="rgb(223,33,50)" fg:x="1876" fg:w="27"/><text x="26.9394%" y="462.50"></text></g><g><title>add_to_heatmap (heatmap.py:35) (778 samples, 11.07%)</title><rect x="27.0736%" y="452" width="11.0684%" height="15" fill="rgb(219,149,13)" fg:x="1903" fg:w="778"/><text x="27.3236%" y="462.50">add_to_heatmap (..</text></g><g><title>step (gymnasium\wrappers\time_limit.py:57) (1,476 samples, 21.00%)</title><rect x="17.1717%" y="404" width="20.9987%" height="15" fill="rgb(250,156,29)" fg:x="1207" fg:w="1476"/><text x="17.4217%" y="414.50">step (gymnasium\wrappers\time_lim..</text></g><g><title>step (gymnasium\core.py:470) (1,077 samples, 15.32%)</title><rect x="22.8482%" y="420" width="15.3222%" height="15" fill="rgb(216,193,19)" fg:x="1606" fg:w="1077"/><text x="23.0982%" y="430.50">step (gymnasium\core.py..</text></g><g><title>observation (heatmap.py:38) (1,075 samples, 15.29%)</title><rect x="22.8767%" y="436" width="15.2938%" height="15" fill="rgb(216,135,14)" fg:x="1608" fg:w="1075"/><text x="23.1267%" y="446.50">observation (heatmap.py..</text></g><g><title>step (wrappers\cemrl_wrapper.py:63) (1,487 samples, 21.16%)</title><rect x="17.1148%" y="388" width="21.1552%" height="15" fill="rgb(241,47,5)" fg:x="1203" fg:w="1487"/><text x="17.3648%" y="398.50">step (wrappers\cemrl_wrapper.py:6..</text></g><g><title>observation (wrappers\cemrl_wrapper.py:100) (27 samples, 0.38%)</title><rect x="38.3838%" y="404" width="0.3841%" height="15" fill="rgb(233,42,35)" fg:x="2698" fg:w="27"/><text x="38.6338%" y="414.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:85) (8 samples, 0.11%)</title><rect x="38.8106%" y="404" width="0.1138%" height="15" fill="rgb(231,13,6)" fg:x="2728" fg:w="8"/><text x="39.0606%" y="414.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:86) (20 samples, 0.28%)</title><rect x="38.9245%" y="404" width="0.2845%" height="15" fill="rgb(207,181,40)" fg:x="2736" fg:w="20"/><text x="39.1745%" y="414.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (19 samples, 0.27%)</title><rect x="38.9387%" y="420" width="0.2703%" height="15" fill="rgb(254,173,49)" fg:x="2737" fg:w="19"/><text x="39.1887%" y="430.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (14 samples, 0.20%)</title><rect x="39.0098%" y="436" width="0.1992%" height="15" fill="rgb(221,1,38)" fg:x="2742" fg:w="14"/><text x="39.2598%" y="446.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (10 samples, 0.14%)</title><rect x="39.0667%" y="452" width="0.1423%" height="15" fill="rgb(206,124,46)" fg:x="2746" fg:w="10"/><text x="39.3167%" y="462.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:87) (17 samples, 0.24%)</title><rect x="39.2090%" y="404" width="0.2419%" height="15" fill="rgb(249,21,11)" fg:x="2756" fg:w="17"/><text x="39.4590%" y="414.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (16 samples, 0.23%)</title><rect x="39.2232%" y="420" width="0.2276%" height="15" fill="rgb(222,201,40)" fg:x="2757" fg:w="16"/><text x="39.4732%" y="430.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (13 samples, 0.18%)</title><rect x="39.2659%" y="436" width="0.1849%" height="15" fill="rgb(235,61,29)" fg:x="2760" fg:w="13"/><text x="39.5159%" y="446.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:88) (12 samples, 0.17%)</title><rect x="39.4508%" y="404" width="0.1707%" height="15" fill="rgb(219,207,3)" fg:x="2773" fg:w="12"/><text x="39.7008%" y="414.50"></text></g><g><title>unwrapped (gymnasium\core.py:438) (12 samples, 0.17%)</title><rect x="39.4508%" y="420" width="0.1707%" height="15" fill="rgb(222,56,46)" fg:x="2773" fg:w="12"/><text x="39.7008%" y="430.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:94) (12 samples, 0.17%)</title><rect x="39.6358%" y="404" width="0.1707%" height="15" fill="rgb(239,76,54)" fg:x="2786" fg:w="12"/><text x="39.8858%" y="414.50"></text></g><g><title>action_space (gymnasium\core.py:338) (8 samples, 0.11%)</title><rect x="39.6927%" y="420" width="0.1138%" height="15" fill="rgb(231,124,27)" fg:x="2790" fg:w="8"/><text x="39.9427%" y="430.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:95) (29 samples, 0.41%)</title><rect x="39.8065%" y="404" width="0.4126%" height="15" fill="rgb(249,195,6)" fg:x="2798" fg:w="29"/><text x="40.0565%" y="414.50"></text></g><g><title>action_space (gymnasium\core.py:338) (20 samples, 0.28%)</title><rect x="39.9346%" y="420" width="0.2845%" height="15" fill="rgb(237,174,47)" fg:x="2807" fg:w="20"/><text x="40.1846%" y="430.50"></text></g><g><title>action_space (gymnasium\core.py:338) (16 samples, 0.23%)</title><rect x="39.9915%" y="436" width="0.2276%" height="15" fill="rgb(206,201,31)" fg:x="2811" fg:w="16"/><text x="40.2415%" y="446.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:96) (80 samples, 1.14%)</title><rect x="40.2191%" y="404" width="1.1381%" height="15" fill="rgb(231,57,52)" fg:x="2827" fg:w="80"/><text x="40.4691%" y="414.50"></text></g><g><title>observation (wrappers\cemrl_wrapper.py:98) (9 samples, 0.13%)</title><rect x="41.3572%" y="404" width="0.1280%" height="15" fill="rgb(248,177,22)" fg:x="2907" fg:w="9"/><text x="41.6072%" y="414.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:58) (1,775 samples, 25.25%)</title><rect x="16.9014%" y="372" width="25.2525%" height="15" fill="rgb(215,211,37)" fg:x="1188" fg:w="1775"/><text x="17.1514%" y="382.50">step_wait (stable_baselines3\common\vec_..</text></g><g><title>step (wrappers\cemrl_wrapper.py:64) (273 samples, 3.88%)</title><rect x="38.2700%" y="388" width="3.8839%" height="15" fill="rgb(241,128,51)" fg:x="2690" fg:w="273"/><text x="38.5200%" y="398.50">step..</text></g><g><title>observation (wrappers\cemrl_wrapper.py:99) (47 samples, 0.67%)</title><rect x="41.4853%" y="404" width="0.6687%" height="15" fill="rgb(227,165,31)" fg:x="2916" fg:w="47"/><text x="41.7353%" y="414.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:71) (34 samples, 0.48%)</title><rect x="42.2820%" y="372" width="0.4837%" height="15" fill="rgb(228,167,24)" fg:x="2972" fg:w="34"/><text x="42.5320%" y="382.50"></text></g><g><title>_save_obs (stable_baselines3\common\vec_env\dummy_vec_env.py:108) (21 samples, 0.30%)</title><rect x="42.4669%" y="388" width="0.2988%" height="15" fill="rgb(228,143,12)" fg:x="2985" fg:w="21"/><text x="42.7169%" y="398.50"></text></g><g><title>deepcopy (copy.py:134) (27 samples, 0.38%)</title><rect x="43.2352%" y="452" width="0.3841%" height="15" fill="rgb(249,149,8)" fg:x="3039" fg:w="27"/><text x="43.4852%" y="462.50"></text></g><g><title>deepcopy (copy.py:137) (9 samples, 0.13%)</title><rect x="43.6193%" y="452" width="0.1280%" height="15" fill="rgb(243,35,44)" fg:x="3066" fg:w="9"/><text x="43.8693%" y="462.50"></text></g><g><title>deepcopy (copy.py:138) (16 samples, 0.23%)</title><rect x="43.7473%" y="452" width="0.2276%" height="15" fill="rgb(246,89,9)" fg:x="3075" fg:w="16"/><text x="43.9973%" y="462.50"></text></g><g><title>deepcopy (copy.py:142) (8 samples, 0.11%)</title><rect x="44.0176%" y="452" width="0.1138%" height="15" fill="rgb(233,213,13)" fg:x="3094" fg:w="8"/><text x="44.2676%" y="462.50"></text></g><g><title>deepcopy (copy.py:144) (9 samples, 0.13%)</title><rect x="44.1315%" y="452" width="0.1280%" height="15" fill="rgb(233,141,41)" fg:x="3102" fg:w="9"/><text x="44.3815%" y="462.50"></text></g><g><title>deepcopy (copy.py:146) (24 samples, 0.34%)</title><rect x="44.3306%" y="452" width="0.3414%" height="15" fill="rgb(239,167,4)" fg:x="3116" fg:w="24"/><text x="44.5806%" y="462.50"></text></g><g><title>_deepcopy_atomic (copy.py:183) (20 samples, 0.28%)</title><rect x="44.3875%" y="468" width="0.2845%" height="15" fill="rgb(209,217,16)" fg:x="3120" fg:w="20"/><text x="44.6375%" y="478.50"></text></g><g><title>deepcopy (copy.py:153) (25 samples, 0.36%)</title><rect x="44.7432%" y="452" width="0.3557%" height="15" fill="rgb(219,88,35)" fg:x="3145" fg:w="25"/><text x="44.9932%" y="462.50"></text></g><g><title>deepcopy (copy.py:177) (19 samples, 0.27%)</title><rect x="45.1842%" y="452" width="0.2703%" height="15" fill="rgb(220,193,23)" fg:x="3176" fg:w="19"/><text x="45.4342%" y="462.50"></text></g><g><title>_keep_alive (copy.py:254) (9 samples, 0.13%)</title><rect x="45.3265%" y="468" width="0.1280%" height="15" fill="rgb(230,90,52)" fg:x="3186" fg:w="9"/><text x="45.5765%" y="478.50"></text></g><g><title>deepcopy (copy.py:146) (180 samples, 2.56%)</title><rect x="42.9364%" y="420" width="2.5608%" height="15" fill="rgb(252,106,19)" fg:x="3018" fg:w="180"/><text x="43.1864%" y="430.50">de..</text></g><g><title>_deepcopy_dict (copy.py:231) (169 samples, 2.40%)</title><rect x="43.0929%" y="436" width="2.4043%" height="15" fill="rgb(206,74,20)" fg:x="3029" fg:w="169"/><text x="43.3429%" y="446.50">_d..</text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:544) (2,020 samples, 28.74%)</title><rect x="16.8872%" y="340" width="28.7381%" height="15" fill="rgb(230,138,44)" fg:x="1187" fg:w="2020"/><text x="17.1372%" y="350.50">collect_rollouts (stable_baselines3\common\off..</text></g><g><title>step (stable_baselines3\common\vec_env\base_vec_env.py:180) (2,020 samples, 28.74%)</title><rect x="16.8872%" y="356" width="28.7381%" height="15" fill="rgb(235,182,43)" fg:x="1187" fg:w="2020"/><text x="17.1372%" y="366.50">step (stable_baselines3\common\vec_env\base_ve..</text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:72) (201 samples, 2.86%)</title><rect x="42.7657%" y="372" width="2.8596%" height="15" fill="rgb(242,16,51)" fg:x="3006" fg:w="201"/><text x="43.0157%" y="382.50">st..</text></g><g><title>deepcopy (copy.py:146) (201 samples, 2.86%)</title><rect x="42.7657%" y="388" width="2.8596%" height="15" fill="rgb(248,9,4)" fg:x="3006" fg:w="201"/><text x="43.0157%" y="398.50">de..</text></g><g><title>_deepcopy_list (copy.py:206) (200 samples, 2.85%)</title><rect x="42.7799%" y="404" width="2.8454%" height="15" fill="rgb(210,31,22)" fg:x="3007" fg:w="200"/><text x="43.0299%" y="414.50">_d..</text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:556) (9 samples, 0.13%)</title><rect x="45.6822%" y="340" width="0.1280%" height="15" fill="rgb(239,54,39)" fg:x="3211" fg:w="9"/><text x="45.9322%" y="350.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;:180) (8 samples, 0.11%)</title><rect x="46.0236%" y="388" width="0.1138%" height="15" fill="rgb(230,99,41)" fg:x="3235" fg:w="8"/><text x="46.2736%" y="398.50"></text></g><g><title>_wrapreduction (numpy\core\fromnumeric.py:70) (15 samples, 0.21%)</title><rect x="46.2512%" y="420" width="0.2134%" height="15" fill="rgb(253,106,12)" fg:x="3251" fg:w="15"/><text x="46.5012%" y="430.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:533) (2,318 samples, 32.98%)</title><rect x="13.6862%" y="228" width="32.9777%" height="15" fill="rgb(213,46,41)" fg:x="962" fg:w="2318"/><text x="13.9362%" y="238.50">collect_rollouts (stable_baselines3\common\off_policy..</text></g><g><title>on_rollout_start (stable_baselines3\common\callbacks.py:80) (2,318 samples, 32.98%)</title><rect x="13.6862%" y="244" width="32.9777%" height="15" fill="rgb(215,133,35)" fg:x="962" fg:w="2318"/><text x="13.9362%" y="254.50">on_rollout_start (stable_baselines3\common\callbacks...</text></g><g><title>_on_rollout_start (stable_baselines3\common\callbacks.py:202) (2,318 samples, 32.98%)</title><rect x="13.6862%" y="260" width="32.9777%" height="15" fill="rgb(213,28,5)" fg:x="962" fg:w="2318"/><text x="13.9362%" y="270.50">_on_rollout_start (stable_baselines3\common\callbacks..</text></g><g><title>on_rollout_start (stable_baselines3\common\callbacks.py:80) (2,318 samples, 32.98%)</title><rect x="13.6862%" y="276" width="32.9777%" height="15" fill="rgb(215,77,49)" fg:x="962" fg:w="2318"/><text x="13.9362%" y="286.50">on_rollout_start (stable_baselines3\common\callbacks...</text></g><g><title>_on_rollout_start (stable_baselines3\common\callbacks.py:202) (2,318 samples, 32.98%)</title><rect x="13.6862%" y="292" width="32.9777%" height="15" fill="rgb(248,100,22)" fg:x="962" fg:w="2318"/><text x="13.9362%" y="302.50">_on_rollout_start (stable_baselines3\common\callbacks..</text></g><g><title>on_rollout_start (stable_baselines3\common\callbacks.py:80) (2,318 samples, 32.98%)</title><rect x="13.6862%" y="308" width="32.9777%" height="15" fill="rgb(208,67,9)" fg:x="962" fg:w="2318"/><text x="13.9362%" y="318.50">on_rollout_start (stable_baselines3\common\callbacks...</text></g><g><title>_on_rollout_start (callbacks\exploration_callback.py:90) (2,318 samples, 32.98%)</title><rect x="13.6862%" y="324" width="32.9777%" height="15" fill="rgb(219,133,21)" fg:x="962" fg:w="2318"/><text x="13.9362%" y="334.50">_on_rollout_start (callbacks\exploration_callback.py:..</text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:559) (60 samples, 0.85%)</title><rect x="45.8102%" y="340" width="0.8536%" height="15" fill="rgb(246,46,29)" fg:x="3220" fg:w="60"/><text x="46.0602%" y="350.50"></text></g><g><title>_store_transition (stable_baselines3\common\off_policy_algorithm.py:472) (60 samples, 0.85%)</title><rect x="45.8102%" y="356" width="0.8536%" height="15" fill="rgb(246,185,52)" fg:x="3220" fg:w="60"/><text x="46.0602%" y="366.50"></text></g><g><title>add (buffers.py:93) (51 samples, 0.73%)</title><rect x="45.9383%" y="372" width="0.7256%" height="15" fill="rgb(252,136,11)" fg:x="3229" fg:w="51"/><text x="46.1883%" y="382.50"></text></g><g><title>all (&lt;__array_function__ internals&gt;:200) (37 samples, 0.53%)</title><rect x="46.1374%" y="388" width="0.5264%" height="15" fill="rgb(219,138,53)" fg:x="3243" fg:w="37"/><text x="46.3874%" y="398.50"></text></g><g><title>all (numpy\core\fromnumeric.py:2515) (37 samples, 0.53%)</title><rect x="46.1374%" y="404" width="0.5264%" height="15" fill="rgb(211,51,23)" fg:x="3243" fg:w="37"/><text x="46.3874%" y="414.50"></text></g><g><title>_wrapreduction (numpy\core\fromnumeric.py:86) (14 samples, 0.20%)</title><rect x="46.4646%" y="420" width="0.1992%" height="15" fill="rgb(247,221,28)" fg:x="3266" fg:w="14"/><text x="46.7146%" y="430.50"></text></g><g><title>step (toy_goal_env.py:67) (16 samples, 0.23%)</title><rect x="46.8203%" y="356" width="0.2276%" height="15" fill="rgb(251,222,45)" fg:x="3291" fg:w="16"/><text x="47.0703%" y="366.50"></text></g><g><title>clip (&lt;__array_function__ internals&gt;:200) (14 samples, 0.20%)</title><rect x="46.8488%" y="372" width="0.1992%" height="15" fill="rgb(217,162,53)" fg:x="3293" fg:w="14"/><text x="47.0988%" y="382.50"></text></g><g><title>clip (numpy\core\fromnumeric.py:2180) (14 samples, 0.20%)</title><rect x="46.8488%" y="388" width="0.1992%" height="15" fill="rgb(229,93,14)" fg:x="3293" fg:w="14"/><text x="47.0988%" y="398.50"></text></g><g><title>_wrapfunc (numpy\core\fromnumeric.py:57) (12 samples, 0.17%)</title><rect x="46.8772%" y="404" width="0.1707%" height="15" fill="rgb(209,67,49)" fg:x="3295" fg:w="12"/><text x="47.1272%" y="414.50"></text></g><g><title>step (toy_goal_env.py:73) (8 samples, 0.11%)</title><rect x="47.0906%" y="356" width="0.1138%" height="15" fill="rgb(213,87,29)" fg:x="3310" fg:w="8"/><text x="47.3406%" y="366.50"></text></g><g><title>step (success.py:10) (30 samples, 0.43%)</title><rect x="46.7919%" y="324" width="0.4268%" height="15" fill="rgb(205,151,52)" fg:x="3289" fg:w="30"/><text x="47.0419%" y="334.50"></text></g><g><title>step (gymnasium\core.py:408) (30 samples, 0.43%)</title><rect x="46.7919%" y="340" width="0.4268%" height="15" fill="rgb(253,215,39)" fg:x="3289" fg:w="30"/><text x="47.0419%" y="350.50"></text></g><g><title>step (gymnasium\core.py:469) (33 samples, 0.47%)</title><rect x="46.7776%" y="308" width="0.4695%" height="15" fill="rgb(221,220,41)" fg:x="3288" fg:w="33"/><text x="47.0276%" y="318.50"></text></g><g><title>add_to_heatmap (heatmap.py:26) (12 samples, 0.17%)</title><rect x="47.3609%" y="340" width="0.1707%" height="15" fill="rgb(218,133,21)" fg:x="3329" fg:w="12"/><text x="47.6109%" y="350.50"></text></g><g><title>step (gymnasium\wrappers\time_limit.py:57) (139 samples, 1.98%)</title><rect x="46.7776%" y="292" width="1.9775%" height="15" fill="rgb(221,193,43)" fg:x="3288" fg:w="139"/><text x="47.0276%" y="302.50">s..</text></g><g><title>step (gymnasium\core.py:470) (106 samples, 1.51%)</title><rect x="47.2471%" y="308" width="1.5080%" height="15" fill="rgb(240,128,52)" fg:x="3321" fg:w="106"/><text x="47.4971%" y="318.50"></text></g><g><title>observation (heatmap.py:38) (105 samples, 1.49%)</title><rect x="47.2613%" y="324" width="1.4938%" height="15" fill="rgb(253,114,12)" fg:x="3322" fg:w="105"/><text x="47.5113%" y="334.50"></text></g><g><title>add_to_heatmap (heatmap.py:35) (70 samples, 1.00%)</title><rect x="47.7593%" y="340" width="0.9959%" height="15" fill="rgb(215,223,47)" fg:x="3357" fg:w="70"/><text x="48.0093%" y="350.50"></text></g><g><title>step (wrappers\cemrl_wrapper.py:63) (143 samples, 2.03%)</title><rect x="46.7634%" y="276" width="2.0344%" height="15" fill="rgb(248,225,23)" fg:x="3287" fg:w="143"/><text x="47.0134%" y="286.50">s..</text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:58) (161 samples, 2.29%)</title><rect x="46.7634%" y="260" width="2.2905%" height="15" fill="rgb(250,108,0)" fg:x="3287" fg:w="161"/><text x="47.0134%" y="270.50">s..</text></g><g><title>step (wrappers\cemrl_wrapper.py:64) (18 samples, 0.26%)</title><rect x="48.7978%" y="276" width="0.2561%" height="15" fill="rgb(228,208,7)" fg:x="3430" fg:w="18"/><text x="49.0478%" y="286.50"></text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:71) (8 samples, 0.11%)</title><rect x="49.0539%" y="260" width="0.1138%" height="15" fill="rgb(244,45,10)" fg:x="3448" fg:w="8"/><text x="49.3039%" y="270.50"></text></g><g><title>deepcopy (copy.py:146) (19 samples, 0.27%)</title><rect x="49.1820%" y="308" width="0.2703%" height="15" fill="rgb(207,125,25)" fg:x="3457" fg:w="19"/><text x="49.4320%" y="318.50"></text></g><g><title>_deepcopy_dict (copy.py:231) (18 samples, 0.26%)</title><rect x="49.1962%" y="324" width="0.2561%" height="15" fill="rgb(210,195,18)" fg:x="3458" fg:w="18"/><text x="49.4462%" y="334.50"></text></g><g><title>collect_rollouts (stable_baselines3\common\off_policy_algorithm.py:544) (191 samples, 2.72%)</title><rect x="46.7634%" y="228" width="2.7173%" height="15" fill="rgb(249,80,12)" fg:x="3287" fg:w="191"/><text x="47.0134%" y="238.50">co..</text></g><g><title>step (stable_baselines3\common\vec_env\base_vec_env.py:180) (191 samples, 2.72%)</title><rect x="46.7634%" y="244" width="2.7173%" height="15" fill="rgb(221,65,9)" fg:x="3287" fg:w="191"/><text x="47.0134%" y="254.50">st..</text></g><g><title>step_wait (stable_baselines3\common\vec_env\dummy_vec_env.py:72) (22 samples, 0.31%)</title><rect x="49.1677%" y="260" width="0.3130%" height="15" fill="rgb(235,49,36)" fg:x="3456" fg:w="22"/><text x="49.4177%" y="270.50"></text></g><g><title>deepcopy (copy.py:146) (22 samples, 0.31%)</title><rect x="49.1677%" y="276" width="0.3130%" height="15" fill="rgb(225,32,20)" fg:x="3456" fg:w="22"/><text x="49.4177%" y="286.50"></text></g><g><title>_deepcopy_list (copy.py:206) (22 samples, 0.31%)</title><rect x="49.1677%" y="292" width="0.3130%" height="15" fill="rgb(215,141,46)" fg:x="3456" fg:w="22"/><text x="49.4177%" y="302.50"></text></g><g><title>learn (stable_baselines3\common\off_policy_algorithm.py:312) (2,523 samples, 35.89%)</title><rect x="13.6577%" y="212" width="35.8942%" height="15" fill="rgb(250,160,47)" fg:x="960" fg:w="2523"/><text x="13.9077%" y="222.50">learn (stable_baselines3\common\off_policy_algorithm.py:31..</text></g><g><title>train (torch\nn\modules\module.py:2287) (10 samples, 0.14%)</title><rect x="49.7653%" y="308" width="0.1423%" height="15" fill="rgb(216,222,40)" fg:x="3498" fg:w="10"/><text x="50.0153%" y="318.50"></text></g><g><title>children (torch\nn\modules\module.py:2173) (9 samples, 0.13%)</title><rect x="49.7795%" y="324" width="0.1280%" height="15" fill="rgb(234,217,39)" fg:x="3499" fg:w="9"/><text x="50.0295%" y="334.50"></text></g><g><title>children (torch\nn\modules\module.py:2173) (15 samples, 0.21%)</title><rect x="50.0640%" y="356" width="0.2134%" height="15" fill="rgb(207,178,40)" fg:x="3519" fg:w="15"/><text x="50.3140%" y="366.50"></text></g><g><title>train (torch\nn\modules\module.py:2287) (21 samples, 0.30%)</title><rect x="50.0640%" y="340" width="0.2988%" height="15" fill="rgb(221,136,13)" fg:x="3519" fg:w="21"/><text x="50.3140%" y="350.50"></text></g><g><title>reconstruction_training_step (cemrl.py:120) (74 samples, 1.05%)</title><rect x="49.6230%" y="244" width="1.0528%" height="15" fill="rgb(249,199,10)" fg:x="3488" fg:w="74"/><text x="49.8730%" y="254.50"></text></g><g><title>set_training_mode (stable_baselines3\common\policies.py:209) (74 samples, 1.05%)</title><rect x="49.6230%" y="260" width="1.0528%" height="15" fill="rgb(249,222,13)" fg:x="3488" fg:w="74"/><text x="49.8730%" y="270.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (72 samples, 1.02%)</title><rect x="49.6514%" y="276" width="1.0243%" height="15" fill="rgb(244,185,38)" fg:x="3490" fg:w="72"/><text x="49.9014%" y="286.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (65 samples, 0.92%)</title><rect x="49.7510%" y="292" width="0.9247%" height="15" fill="rgb(236,202,9)" fg:x="3497" fg:w="65"/><text x="50.0010%" y="302.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (54 samples, 0.77%)</title><rect x="49.9075%" y="308" width="0.7682%" height="15" fill="rgb(250,229,37)" fg:x="3508" fg:w="54"/><text x="50.1575%" y="318.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (48 samples, 0.68%)</title><rect x="49.9929%" y="324" width="0.6829%" height="15" fill="rgb(206,174,23)" fg:x="3514" fg:w="48"/><text x="50.2429%" y="334.50"></text></g><g><title>train (torch\nn\modules\module.py:2288) (22 samples, 0.31%)</title><rect x="50.3628%" y="340" width="0.3130%" height="15" fill="rgb(211,33,43)" fg:x="3540" fg:w="22"/><text x="50.6128%" y="350.50"></text></g><g><title>train (torch\nn\modules\module.py:2287) (14 samples, 0.20%)</title><rect x="50.4766%" y="356" width="0.1992%" height="15" fill="rgb(245,58,50)" fg:x="3548" fg:w="14"/><text x="50.7266%" y="366.50"></text></g><g><title>children (torch\nn\modules\module.py:2173) (14 samples, 0.20%)</title><rect x="50.4766%" y="372" width="0.1992%" height="15" fill="rgb(244,68,36)" fg:x="3548" fg:w="14"/><text x="50.7266%" y="382.50"></text></g><g><title>valid_indices (buffers.py:108) (13 samples, 0.18%)</title><rect x="50.7896%" y="260" width="0.1849%" height="15" fill="rgb(232,229,15)" fg:x="3570" fg:w="13"/><text x="51.0396%" y="270.50"></text></g><g><title>concatenate (&lt;__array_function__ internals&gt;:200) (9 samples, 0.13%)</title><rect x="50.8465%" y="276" width="0.1280%" height="15" fill="rgb(254,30,23)" fg:x="3574" fg:w="9"/><text x="51.0965%" y="286.50"></text></g><g><title>reconstruction_training_step (cemrl.py:121) (40 samples, 0.57%)</title><rect x="50.6758%" y="244" width="0.5691%" height="15" fill="rgb(235,160,14)" fg:x="3562" fg:w="40"/><text x="50.9258%" y="254.50"></text></g><g><title>valid_indices (buffers.py:109) (19 samples, 0.27%)</title><rect x="50.9745%" y="260" width="0.2703%" height="15" fill="rgb(212,155,44)" fg:x="3583" fg:w="19"/><text x="51.2245%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:143) (18 samples, 0.26%)</title><rect x="51.4013%" y="260" width="0.2561%" height="15" fill="rgb(226,2,50)" fg:x="3613" fg:w="18"/><text x="51.6513%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:145) (9 samples, 0.13%)</title><rect x="51.7570%" y="260" width="0.1280%" height="15" fill="rgb(234,177,6)" fg:x="3638" fg:w="9"/><text x="52.0070%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:147) (9 samples, 0.13%)</title><rect x="51.9846%" y="260" width="0.1280%" height="15" fill="rgb(217,24,9)" fg:x="3654" fg:w="9"/><text x="52.2346%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:154) (34 samples, 0.48%)</title><rect x="52.2976%" y="260" width="0.4837%" height="15" fill="rgb(220,13,46)" fg:x="3676" fg:w="34"/><text x="52.5476%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:155) (38 samples, 0.54%)</title><rect x="52.7813%" y="260" width="0.5406%" height="15" fill="rgb(239,221,27)" fg:x="3710" fg:w="38"/><text x="53.0313%" y="270.50"></text></g><g><title>reconstruction_training_step (cemrl.py:123) (178 samples, 2.53%)</title><rect x="51.2448%" y="244" width="2.5324%" height="15" fill="rgb(222,198,25)" fg:x="3602" fg:w="178"/><text x="51.4948%" y="254.50">re..</text></g><g><title>factorize (pandas\core\algorithms.py:818) (8 samples, 0.11%)</title><rect x="53.8768%" y="372" width="0.1138%" height="15" fill="rgb(211,99,13)" fg:x="3787" fg:w="8"/><text x="54.1268%" y="382.50"></text></g><g><title>codes (pandas\core\groupby\grouper.py:621) (10 samples, 0.14%)</title><rect x="53.8768%" y="340" width="0.1423%" height="15" fill="rgb(232,111,31)" fg:x="3787" fg:w="10"/><text x="54.1268%" y="350.50"></text></g><g><title>_codes_and_uniques (pandas\core\groupby\grouper.py:692) (10 samples, 0.14%)</title><rect x="53.8768%" y="356" width="0.1423%" height="15" fill="rgb(245,82,37)" fg:x="3787" fg:w="10"/><text x="54.1268%" y="366.50"></text></g><g><title>_reverse_indexer (pandas\core\arrays\categorical.py:2281) (12 samples, 0.17%)</title><rect x="54.0617%" y="356" width="0.1707%" height="15" fill="rgb(227,149,46)" fg:x="3800" fg:w="12"/><text x="54.3117%" y="366.50"></text></g><g><title>groupby (pandas\core\indexes\base.py:6376) (15 samples, 0.21%)</title><rect x="54.0617%" y="340" width="0.2134%" height="15" fill="rgb(218,36,50)" fg:x="3800" fg:w="15"/><text x="54.3117%" y="350.50"></text></g><g><title>_build_decoder_index (buffers.py:199) (41 samples, 0.58%)</title><rect x="53.8768%" y="276" width="0.5833%" height="15" fill="rgb(226,80,48)" fg:x="3787" fg:w="41"/><text x="54.1268%" y="286.50"></text></g><g><title>groups (pandas\core\groupby\groupby.py:666) (41 samples, 0.58%)</title><rect x="53.8768%" y="292" width="0.5833%" height="15" fill="rgb(238,224,15)" fg:x="3787" fg:w="41"/><text x="54.1268%" y="302.50"></text></g><g><title>groups (pandas\core\groupby\ops.py:924) (41 samples, 0.58%)</title><rect x="53.8768%" y="308" width="0.5833%" height="15" fill="rgb(241,136,10)" fg:x="3787" fg:w="41"/><text x="54.1268%" y="318.50"></text></g><g><title>groups (pandas\core\groupby\grouper.py:699) (41 samples, 0.58%)</title><rect x="53.8768%" y="324" width="0.5833%" height="15" fill="rgb(208,32,45)" fg:x="3787" fg:w="41"/><text x="54.1268%" y="334.50"></text></g><g><title>groupby (pandas\core\indexes\base.py:6379) (13 samples, 0.18%)</title><rect x="54.2751%" y="340" width="0.1849%" height="15" fill="rgb(207,135,9)" fg:x="3815" fg:w="13"/><text x="54.5251%" y="350.50"></text></g><g><title>&lt;dictcomp&gt; (pandas\core\indexes\base.py:6379) (13 samples, 0.18%)</title><rect x="54.2751%" y="356" width="0.1849%" height="15" fill="rgb(206,86,44)" fg:x="3815" fg:w="13"/><text x="54.5251%" y="366.50"></text></g><g><title>take (pandas\core\indexes\base.py:1184) (8 samples, 0.11%)</title><rect x="54.3463%" y="372" width="0.1138%" height="15" fill="rgb(245,177,15)" fg:x="3820" fg:w="8"/><text x="54.5963%" y="382.50"></text></g><g><title>take (pandas\core\algorithms.py:1573) (8 samples, 0.11%)</title><rect x="54.3463%" y="388" width="0.1138%" height="15" fill="rgb(206,64,50)" fg:x="3820" fg:w="8"/><text x="54.5963%" y="398.50"></text></g><g><title>_bin_edges (scipy\stats\_binned_statistic.py:725) (10 samples, 0.14%)</title><rect x="54.5597%" y="308" width="0.1423%" height="15" fill="rgb(234,36,40)" fg:x="3835" fg:w="10"/><text x="54.8097%" y="318.50"></text></g><g><title>_amin (numpy\core\_methods.py:45) (10 samples, 0.14%)</title><rect x="54.5597%" y="324" width="0.1423%" height="15" fill="rgb(213,64,8)" fg:x="3835" fg:w="10"/><text x="54.8097%" y="334.50"></text></g><g><title>binned_statistic_dd (scipy\stats\_binned_statistic.py:583) (12 samples, 0.17%)</title><rect x="54.5597%" y="292" width="0.1707%" height="15" fill="rgb(210,75,36)" fg:x="3835" fg:w="12"/><text x="54.8097%" y="302.50"></text></g><g><title>_build_decoder_index (buffers.py:204) (36 samples, 0.51%)</title><rect x="54.4601%" y="276" width="0.5122%" height="15" fill="rgb(229,88,21)" fg:x="3828" fg:w="36"/><text x="54.7101%" y="286.50"></text></g><g><title>binned_statistic_dd (scipy\stats\_binned_statistic.py:584) (17 samples, 0.24%)</title><rect x="54.7304%" y="292" width="0.2419%" height="15" fill="rgb(252,204,47)" fg:x="3847" fg:w="17"/><text x="54.9804%" y="302.50"></text></g><g><title>_unique1d (numpy\lib\arraysetops.py:333) (11 samples, 0.16%)</title><rect x="54.9723%" y="324" width="0.1565%" height="15" fill="rgb(208,77,27)" fg:x="3864" fg:w="11"/><text x="55.2223%" y="334.50"></text></g><g><title>_unique1d (numpy\lib\arraysetops.py:360) (10 samples, 0.14%)</title><rect x="55.1857%" y="324" width="0.1423%" height="15" fill="rgb(221,76,26)" fg:x="3879" fg:w="10"/><text x="55.4357%" y="334.50"></text></g><g><title>_build_decoder_index (buffers.py:205) (26 samples, 0.37%)</title><rect x="54.9723%" y="276" width="0.3699%" height="15" fill="rgb(225,139,18)" fg:x="3864" fg:w="26"/><text x="55.2223%" y="286.50"></text></g><g><title>unique (&lt;__array_function__ internals&gt;:200) (26 samples, 0.37%)</title><rect x="54.9723%" y="292" width="0.3699%" height="15" fill="rgb(230,137,11)" fg:x="3864" fg:w="26"/><text x="55.2223%" y="302.50"></text></g><g><title>unique (numpy\lib\arraysetops.py:274) (26 samples, 0.37%)</title><rect x="54.9723%" y="308" width="0.3699%" height="15" fill="rgb(212,28,1)" fg:x="3864" fg:w="26"/><text x="55.2223%" y="318.50"></text></g><g><title>get_decoder_targets (buffers.py:180) (199 samples, 2.83%)</title><rect x="53.7772%" y="260" width="2.8311%" height="15" fill="rgb(248,164,17)" fg:x="3780" fg:w="199"/><text x="54.0272%" y="270.50">ge..</text></g><g><title>_build_decoder_index (buffers.py:213) (83 samples, 1.18%)</title><rect x="55.4275%" y="276" width="1.1808%" height="15" fill="rgb(222,171,42)" fg:x="3896" fg:w="83"/><text x="55.6775%" y="286.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:179) (17 samples, 0.24%)</title><rect x="59.3114%" y="276" width="0.2419%" height="15" fill="rgb(243,84,45)" fg:x="4169" fg:w="17"/><text x="59.5614%" y="286.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:180) (16 samples, 0.23%)</title><rect x="59.5533%" y="276" width="0.2276%" height="15" fill="rgb(252,49,23)" fg:x="4186" fg:w="16"/><text x="59.8033%" y="286.50"></text></g><g><title>&lt;dictcomp&gt; (numpy\core\fromnumeric.py:70) (20 samples, 0.28%)</title><rect x="60.5918%" y="324" width="0.2845%" height="15" fill="rgb(215,19,7)" fg:x="4259" fg:w="20"/><text x="60.8418%" y="334.50"></text></g><g><title>_wrapreduction (numpy\core\fromnumeric.py:70) (48 samples, 0.68%)</title><rect x="60.3500%" y="308" width="0.6829%" height="15" fill="rgb(238,81,41)" fg:x="4242" fg:w="48"/><text x="60.6000%" y="318.50"></text></g><g><title>&lt;dictcomp&gt; (numpy\core\fromnumeric.py:71) (11 samples, 0.16%)</title><rect x="60.8764%" y="324" width="0.1565%" height="15" fill="rgb(210,199,37)" fg:x="4279" fg:w="11"/><text x="61.1264%" y="334.50"></text></g><g><title>_wrapreduction (numpy\core\fromnumeric.py:75) (16 samples, 0.23%)</title><rect x="61.1040%" y="308" width="0.2276%" height="15" fill="rgb(244,192,49)" fg:x="4295" fg:w="16"/><text x="61.3540%" y="318.50"></text></g><g><title>_wrapreduction (numpy\core\fromnumeric.py:86) (72 samples, 1.02%)</title><rect x="61.4028%" y="308" width="1.0243%" height="15" fill="rgb(226,211,11)" fg:x="4316" fg:w="72"/><text x="61.6528%" y="318.50"></text></g><g><title>prod (&lt;__array_function__ internals&gt;:200) (188 samples, 2.67%)</title><rect x="59.7809%" y="276" width="2.6746%" height="15" fill="rgb(236,162,54)" fg:x="4202" fg:w="188"/><text x="60.0309%" y="286.50">pr..</text></g><g><title>prod (numpy\core\fromnumeric.py:3076) (179 samples, 2.55%)</title><rect x="59.9089%" y="292" width="2.5466%" height="15" fill="rgb(220,229,9)" fg:x="4211" fg:w="179"/><text x="60.1589%" y="302.50">pr..</text></g><g><title>get_decoder_targets (buffers.py:186) (403 samples, 5.73%)</title><rect x="56.7364%" y="260" width="5.7334%" height="15" fill="rgb(250,87,22)" fg:x="3988" fg:w="403"/><text x="56.9864%" y="270.50">get_dec..</text></g><g><title>get_decoder_targets (buffers.py:189) (123 samples, 1.75%)</title><rect x="62.4698%" y="260" width="1.7499%" height="15" fill="rgb(239,43,17)" fg:x="4391" fg:w="123"/><text x="62.7198%" y="270.50"></text></g><g><title>get_decoder_targets (buffers.py:190) (113 samples, 1.61%)</title><rect x="64.2197%" y="260" width="1.6076%" height="15" fill="rgb(231,177,25)" fg:x="4514" fg:w="113"/><text x="64.4697%" y="270.50"></text></g><g><title>get_decoder_targets (buffers.py:191) (121 samples, 1.72%)</title><rect x="65.8273%" y="260" width="1.7214%" height="15" fill="rgb(219,179,1)" fg:x="4627" fg:w="121"/><text x="66.0773%" y="270.50"></text></g><g><title>to_torch (stable_baselines3\common\buffers.py:135) (10 samples, 0.14%)</title><rect x="67.4065%" y="276" width="0.1423%" height="15" fill="rgb(238,219,53)" fg:x="4738" fg:w="10"/><text x="67.6565%" y="286.50"></text></g><g><title>get_decoder_targets (buffers.py:192) (64 samples, 0.91%)</title><rect x="67.5487%" y="260" width="0.9105%" height="15" fill="rgb(232,167,36)" fg:x="4748" fg:w="64"/><text x="67.7987%" y="270.50"></text></g><g><title>reconstruction_training_step (cemrl.py:126) (1,072 samples, 15.25%)</title><rect x="53.7772%" y="244" width="15.2511%" height="15" fill="rgb(244,19,51)" fg:x="3780" fg:w="1072"/><text x="54.0272%" y="254.50">reconstruction_training..</text></g><g><title>get_decoder_targets (buffers.py:193) (40 samples, 0.57%)</title><rect x="68.4592%" y="260" width="0.5691%" height="15" fill="rgb(224,6,22)" fg:x="4812" fg:w="40"/><text x="68.7092%" y="270.50"></text></g><g><title>encode (networks.py:39) (118 samples, 1.68%)</title><rect x="69.1848%" y="276" width="1.6788%" height="15" fill="rgb(224,145,5)" fg:x="4863" fg:w="118"/><text x="69.4348%" y="286.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (117 samples, 1.66%)</title><rect x="69.1990%" y="292" width="1.6645%" height="15" fill="rgb(234,130,49)" fg:x="4864" fg:w="117"/><text x="69.4490%" y="302.50"></text></g><g><title>forward (torch\nn\modules\rnn.py:998) (110 samples, 1.56%)</title><rect x="69.2986%" y="308" width="1.5649%" height="15" fill="rgb(254,6,2)" fg:x="4871" fg:w="110"/><text x="69.5486%" y="318.50"></text></g><g><title>encode (networks.py:41) (13 samples, 0.18%)</title><rect x="70.8778%" y="276" width="0.1849%" height="15" fill="rgb(208,96,46)" fg:x="4982" fg:w="13"/><text x="71.1278%" y="286.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (13 samples, 0.18%)</title><rect x="70.8778%" y="292" width="0.1849%" height="15" fill="rgb(239,3,39)" fg:x="4982" fg:w="13"/><text x="71.1278%" y="302.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (13 samples, 0.18%)</title><rect x="70.8778%" y="308" width="0.1849%" height="15" fill="rgb(233,210,1)" fg:x="4982" fg:w="13"/><text x="71.1278%" y="318.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (13 samples, 0.18%)</title><rect x="70.8778%" y="324" width="0.1849%" height="15" fill="rgb(244,137,37)" fg:x="4982" fg:w="13"/><text x="71.1278%" y="334.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (8 samples, 0.11%)</title><rect x="70.9489%" y="340" width="0.1138%" height="15" fill="rgb(240,136,2)" fg:x="4987" fg:w="8"/><text x="71.1989%" y="350.50"></text></g><g><title>encode (networks.py:42) (21 samples, 0.30%)</title><rect x="71.0627%" y="276" width="0.2988%" height="15" fill="rgb(239,18,37)" fg:x="4995" fg:w="21"/><text x="71.3127%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (networks.py:42) (17 samples, 0.24%)</title><rect x="71.1196%" y="292" width="0.2419%" height="15" fill="rgb(218,185,22)" fg:x="4999" fg:w="17"/><text x="71.3696%" y="302.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (17 samples, 0.24%)</title><rect x="71.1196%" y="308" width="0.2419%" height="15" fill="rgb(225,218,4)" fg:x="4999" fg:w="17"/><text x="71.3696%" y="318.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (17 samples, 0.24%)</title><rect x="71.1196%" y="324" width="0.2419%" height="15" fill="rgb(230,182,32)" fg:x="4999" fg:w="17"/><text x="71.3696%" y="334.50"></text></g><g><title>__init__ (torch\distributions\distribution.py:60) (9 samples, 0.13%)</title><rect x="71.4753%" y="308" width="0.1280%" height="15" fill="rgb(242,56,43)" fg:x="5024" fg:w="9"/><text x="71.7253%" y="318.50"></text></g><g><title>check (torch\distributions\constraints.py:406) (9 samples, 0.13%)</title><rect x="71.4753%" y="324" width="0.1280%" height="15" fill="rgb(233,99,24)" fg:x="5024" fg:w="9"/><text x="71.7253%" y="334.50"></text></g><g><title>encode (networks.py:46) (14 samples, 0.20%)</title><rect x="71.4469%" y="276" width="0.1992%" height="15" fill="rgb(234,209,42)" fg:x="5022" fg:w="14"/><text x="71.6969%" y="286.50"></text></g><g><title>__init__ (torch\distributions\categorical.py:66) (13 samples, 0.18%)</title><rect x="71.4611%" y="292" width="0.1849%" height="15" fill="rgb(227,7,12)" fg:x="5023" fg:w="13"/><text x="71.7111%" y="302.50"></text></g><g><title>reconstruction_training_step (cemrl.py:131) (193 samples, 2.75%)</title><rect x="69.0994%" y="244" width="2.7458%" height="15" fill="rgb(245,203,43)" fg:x="4857" fg:w="193"/><text x="69.3494%" y="254.50">re..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (192 samples, 2.73%)</title><rect x="69.1137%" y="260" width="2.7315%" height="15" fill="rgb(238,205,33)" fg:x="4858" fg:w="192"/><text x="69.3637%" y="270.50">de..</text></g><g><title>encode (networks.py:47) (14 samples, 0.20%)</title><rect x="71.6460%" y="276" width="0.1992%" height="15" fill="rgb(231,56,7)" fg:x="5036" fg:w="14"/><text x="71.8960%" y="286.50"></text></g><g><title>&lt;listcomp&gt; (networks.py:47) (14 samples, 0.20%)</title><rect x="71.6460%" y="292" width="0.1992%" height="15" fill="rgb(244,186,29)" fg:x="5036" fg:w="14"/><text x="71.8960%" y="302.50"></text></g><g><title>__init__ (torch\distributions\normal.py:56) (12 samples, 0.17%)</title><rect x="71.6745%" y="308" width="0.1707%" height="15" fill="rgb(234,111,31)" fg:x="5038" fg:w="12"/><text x="71.9245%" y="318.50"></text></g><g><title>reconstruction_training_step (cemrl.py:147) (10 samples, 0.14%)</title><rect x="72.0302%" y="244" width="0.1423%" height="15" fill="rgb(241,149,10)" fg:x="5063" fg:w="10"/><text x="72.2802%" y="254.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (9 samples, 0.13%)</title><rect x="72.0444%" y="260" width="0.1280%" height="15" fill="rgb(249,206,44)" fg:x="5064" fg:w="9"/><text x="72.2944%" y="270.50"></text></g><g><title>forward (torch\nn\modules\activation.py:103) (135 samples, 1.92%)</title><rect x="73.0118%" y="404" width="1.9206%" height="15" fill="rgb(251,153,30)" fg:x="5132" fg:w="135"/><text x="73.2618%" y="414.50">f..</text></g><g><title>relu (torch\nn\functional.py:1457) (133 samples, 1.89%)</title><rect x="73.0403%" y="420" width="1.8922%" height="15" fill="rgb(239,152,38)" fg:x="5134" fg:w="133"/><text x="73.2903%" y="430.50">r..</text></g><g><title>forward (networks.py:91) (620 samples, 8.82%)</title><rect x="72.3005%" y="340" width="8.8206%" height="15" fill="rgb(249,139,47)" fg:x="5082" fg:w="620"/><text x="72.5505%" y="350.50">forward (net..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (578 samples, 8.22%)</title><rect x="72.8980%" y="356" width="8.2231%" height="15" fill="rgb(244,64,35)" fg:x="5124" fg:w="578"/><text x="73.1480%" y="366.50">_call_impl ..</text></g><g><title>forward (torch\nn\modules\container.py:217) (577 samples, 8.21%)</title><rect x="72.9122%" y="372" width="8.2088%" height="15" fill="rgb(216,46,15)" fg:x="5125" fg:w="577"/><text x="73.1622%" y="382.50">forward (to..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (571 samples, 8.12%)</title><rect x="72.9976%" y="388" width="8.1235%" height="15" fill="rgb(250,74,19)" fg:x="5131" fg:w="571"/><text x="73.2476%" y="398.50">_call_impl ..</text></g><g><title>forward (torch\nn\modules\linear.py:114) (435 samples, 6.19%)</title><rect x="74.9324%" y="404" width="6.1886%" height="15" fill="rgb(249,42,33)" fg:x="5267" fg:w="435"/><text x="75.1824%" y="414.50">forward ..</text></g><g><title>forward (torch\nn\modules\activation.py:103) (158 samples, 2.25%)</title><rect x="81.9462%" y="404" width="2.2478%" height="15" fill="rgb(242,149,17)" fg:x="5760" fg:w="158"/><text x="82.1962%" y="414.50">f..</text></g><g><title>relu (torch\nn\functional.py:1457) (154 samples, 2.19%)</title><rect x="82.0031%" y="420" width="2.1909%" height="15" fill="rgb(244,29,21)" fg:x="5764" fg:w="154"/><text x="82.2531%" y="430.50">r..</text></g><g><title>forward (networks.py:93) (709 samples, 10.09%)</title><rect x="81.1211%" y="340" width="10.0868%" height="15" fill="rgb(220,130,37)" fg:x="5702" fg:w="709"/><text x="81.3711%" y="350.50">forward (networ..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (660 samples, 9.39%)</title><rect x="81.8182%" y="356" width="9.3897%" height="15" fill="rgb(211,67,2)" fg:x="5751" fg:w="660"/><text x="82.0682%" y="366.50">_call_impl (t..</text></g><g><title>forward (torch\nn\modules\container.py:217) (659 samples, 9.38%)</title><rect x="81.8324%" y="372" width="9.3754%" height="15" fill="rgb(235,68,52)" fg:x="5752" fg:w="659"/><text x="82.0824%" y="382.50">forward (torc..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (651 samples, 9.26%)</title><rect x="81.9462%" y="388" width="9.2616%" height="15" fill="rgb(246,142,3)" fg:x="5760" fg:w="651"/><text x="82.1962%" y="398.50">_call_impl (t..</text></g><g><title>forward (torch\nn\modules\linear.py:114) (493 samples, 7.01%)</title><rect x="84.1941%" y="404" width="7.0138%" height="15" fill="rgb(241,25,7)" fg:x="5918" fg:w="493"/><text x="84.4441%" y="414.50">forward (..</text></g><g><title>forward (networks.py:49) (1,337 samples, 19.02%)</title><rect x="72.2009%" y="292" width="19.0212%" height="15" fill="rgb(242,119,39)" fg:x="5075" fg:w="1337"/><text x="72.4509%" y="302.50">forward (networks.py:49)</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,335 samples, 18.99%)</title><rect x="72.2293%" y="308" width="18.9927%" height="15" fill="rgb(241,98,45)" fg:x="5077" fg:w="1335"/><text x="72.4793%" y="318.50">_call_impl (torch\nn\modules\m..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,330 samples, 18.92%)</title><rect x="72.3005%" y="324" width="18.9216%" height="15" fill="rgb(254,28,30)" fg:x="5082" fg:w="1330"/><text x="72.5505%" y="334.50">decorate_autocast (torch\amp\a..</text></g><g><title>reconstruction_training_step (cemrl.py:150) (1,343 samples, 19.11%)</title><rect x="72.1867%" y="244" width="19.1066%" height="15" fill="rgb(241,142,54)" fg:x="5074" fg:w="1343"/><text x="72.4367%" y="254.50">reconstruction_training_step (..</text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (1,343 samples, 19.11%)</title><rect x="72.1867%" y="260" width="19.1066%" height="15" fill="rgb(222,85,15)" fg:x="5074" fg:w="1343"/><text x="72.4367%" y="270.50">_call_impl (torch\nn\modules\m..</text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (1,343 samples, 19.11%)</title><rect x="72.1867%" y="276" width="19.1066%" height="15" fill="rgb(210,85,47)" fg:x="5074" fg:w="1343"/><text x="72.4367%" y="286.50">decorate_autocast (torch\amp\a..</text></g><g><title>reconstruction_training_step (cemrl.py:154) (9 samples, 0.13%)</title><rect x="91.2932%" y="244" width="0.1280%" height="15" fill="rgb(224,206,25)" fg:x="6417" fg:w="9"/><text x="91.5432%" y="254.50"></text></g><g><title>reconstruction_training_step (cemrl.py:157) (10 samples, 0.14%)</title><rect x="91.4782%" y="244" width="0.1423%" height="15" fill="rgb(243,201,19)" fg:x="6430" fg:w="10"/><text x="91.7282%" y="254.50"></text></g><g><title>reconstruction_training_step (cemrl.py:168) (9 samples, 0.13%)</title><rect x="91.8338%" y="244" width="0.1280%" height="15" fill="rgb(236,59,4)" fg:x="6455" fg:w="9"/><text x="92.0838%" y="254.50"></text></g><g><title>reconstruction_training_step (cemrl.py:172) (14 samples, 0.20%)</title><rect x="91.9903%" y="244" width="0.1992%" height="15" fill="rgb(254,179,45)" fg:x="6466" fg:w="14"/><text x="92.2403%" y="254.50"></text></g><g><title>__init__ (torch\distributions\normal.py:56) (8 samples, 0.11%)</title><rect x="92.0757%" y="260" width="0.1138%" height="15" fill="rgb(226,14,10)" fg:x="6472" fg:w="8"/><text x="92.3257%" y="270.50"></text></g><g><title>reconstruction_training_step (cemrl.py:173) (8 samples, 0.11%)</title><rect x="92.1895%" y="244" width="0.1138%" height="15" fill="rgb(244,27,41)" fg:x="6480" fg:w="8"/><text x="92.4395%" y="254.50"></text></g><g><title>reconstruction_training_step (cemrl.py:177) (14 samples, 0.20%)</title><rect x="92.3175%" y="244" width="0.1992%" height="15" fill="rgb(235,35,32)" fg:x="6489" fg:w="14"/><text x="92.5675%" y="254.50"></text></g><g><title>__init__ (torch\distributions\categorical.py:66) (11 samples, 0.16%)</title><rect x="92.3602%" y="260" width="0.1565%" height="15" fill="rgb(218,68,31)" fg:x="6492" fg:w="11"/><text x="92.6102%" y="270.50"></text></g><g><title>_kl_categorical_categorical (torch\distributions\kl.py:219) (9 samples, 0.13%)</title><rect x="92.5167%" y="276" width="0.1280%" height="15" fill="rgb(207,120,37)" fg:x="6503" fg:w="9"/><text x="92.7667%" y="286.50"></text></g><g><title>__get__ (torch\distributions\utils.py:112) (8 samples, 0.11%)</title><rect x="92.5309%" y="292" width="0.1138%" height="15" fill="rgb(227,98,0)" fg:x="6504" fg:w="8"/><text x="92.7809%" y="302.50"></text></g><g><title>logits (torch\distributions\categorical.py:92) (8 samples, 0.11%)</title><rect x="92.5309%" y="308" width="0.1138%" height="15" fill="rgb(207,7,3)" fg:x="6504" fg:w="8"/><text x="92.7809%" y="318.50"></text></g><g><title>reconstruction_training_step (cemrl.py:178) (20 samples, 0.28%)</title><rect x="92.5167%" y="244" width="0.2845%" height="15" fill="rgb(206,98,19)" fg:x="6503" fg:w="20"/><text x="92.7667%" y="254.50"></text></g><g><title>kl_divergence (torch\distributions\kl.py:172) (20 samples, 0.28%)</title><rect x="92.5167%" y="260" width="0.2845%" height="15" fill="rgb(217,5,26)" fg:x="6503" fg:w="20"/><text x="92.7667%" y="270.50"></text></g><g><title>reconstruction_training_step (cemrl.py:183) (17 samples, 0.24%)</title><rect x="92.8013%" y="244" width="0.2419%" height="15" fill="rgb(235,190,38)" fg:x="6523" fg:w="17"/><text x="93.0513%" y="254.50"></text></g><g><title>reconstruction_training_step (cemrl.py:187) (9 samples, 0.13%)</title><rect x="93.0431%" y="244" width="0.1280%" height="15" fill="rgb(247,86,24)" fg:x="6540" fg:w="9"/><text x="93.2931%" y="254.50"></text></g><g><title>reconstruction_training_step (cemrl.py:190) (9 samples, 0.13%)</title><rect x="93.1711%" y="244" width="0.1280%" height="15" fill="rgb(205,101,16)" fg:x="6549" fg:w="9"/><text x="93.4211%" y="254.50"></text></g><g><title>unscale_ (torch\cuda\amp\grad_scaler.py:281) (8 samples, 0.11%)</title><rect x="93.3134%" y="276" width="0.1138%" height="15" fill="rgb(246,168,33)" fg:x="6559" fg:w="8"/><text x="93.5634%" y="286.50"></text></g><g><title>step (torch\cuda\amp\grad_scaler.py:366) (24 samples, 0.34%)</title><rect x="93.2992%" y="260" width="0.3414%" height="15" fill="rgb(231,114,1)" fg:x="6558" fg:w="24"/><text x="93.5492%" y="270.50"></text></g><g><title>unscale_ (torch\cuda\amp\grad_scaler.py:284) (12 samples, 0.17%)</title><rect x="93.4699%" y="276" width="0.1707%" height="15" fill="rgb(207,184,53)" fg:x="6570" fg:w="12"/><text x="93.7199%" y="286.50"></text></g><g><title>step (torch\optim\adamw.py:160) (8 samples, 0.11%)</title><rect x="93.7260%" y="324" width="0.1138%" height="15" fill="rgb(224,95,51)" fg:x="6588" fg:w="8"/><text x="93.9760%" y="334.50"></text></g><g><title>adamw (torch\optim\adamw.py:303) (12 samples, 0.17%)</title><rect x="93.9109%" y="340" width="0.1707%" height="15" fill="rgb(212,188,45)" fg:x="6601" fg:w="12"/><text x="94.1609%" y="350.50"></text></g><g><title>_default_to_fused_or_foreach (torch\optim\optimizer.py:72) (12 samples, 0.17%)</title><rect x="93.9109%" y="356" width="0.1707%" height="15" fill="rgb(223,154,38)" fg:x="6601" fg:w="12"/><text x="94.1609%" y="366.50"></text></g><g><title>&lt;genexpr&gt; (torch\optim\optimizer.py:73) (8 samples, 0.11%)</title><rect x="93.9678%" y="372" width="0.1138%" height="15" fill="rgb(251,22,52)" fg:x="6605" fg:w="8"/><text x="94.2178%" y="382.50"></text></g><g><title>_multi_tensor_adamw (torch\optim\adamw.py:477) (13 samples, 0.18%)</title><rect x="94.1386%" y="356" width="0.1849%" height="15" fill="rgb(229,209,22)" fg:x="6617" fg:w="13"/><text x="94.3886%" y="366.50"></text></g><g><title>decorate_context (torch\utils\_contextlib.py:115) (13 samples, 0.18%)</title><rect x="94.1386%" y="372" width="0.1849%" height="15" fill="rgb(234,138,34)" fg:x="6617" fg:w="13"/><text x="94.3886%" y="382.50"></text></g><g><title>_multi_tensor_adamw (torch\optim\adamw.py:493) (16 samples, 0.23%)</title><rect x="94.4373%" y="356" width="0.2276%" height="15" fill="rgb(212,95,11)" fg:x="6638" fg:w="16"/><text x="94.6873%" y="366.50"></text></g><g><title>_get_value (torch\optim\optimizer.py:41) (8 samples, 0.11%)</title><rect x="94.9779%" y="388" width="0.1138%" height="15" fill="rgb(240,179,47)" fg:x="6676" fg:w="8"/><text x="95.2279%" y="398.50"></text></g><g><title>_multi_tensor_adamw (torch\optim\adamw.py:548) (13 samples, 0.18%)</title><rect x="94.9210%" y="356" width="0.1849%" height="15" fill="rgb(240,163,11)" fg:x="6672" fg:w="13"/><text x="95.1710%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (torch\optim\adamw.py:548) (13 samples, 0.18%)</title><rect x="94.9210%" y="372" width="0.1849%" height="15" fill="rgb(236,37,12)" fg:x="6672" fg:w="13"/><text x="95.1710%" y="382.50"></text></g><g><title>_multi_tensor_adamw (torch\optim\adamw.py:549) (11 samples, 0.16%)</title><rect x="95.1060%" y="356" width="0.1565%" height="15" fill="rgb(232,164,16)" fg:x="6685" fg:w="11"/><text x="95.3560%" y="366.50"></text></g><g><title>&lt;listcomp&gt; (torch\optim\adamw.py:549) (11 samples, 0.16%)</title><rect x="95.1060%" y="372" width="0.1565%" height="15" fill="rgb(244,205,15)" fg:x="6685" fg:w="11"/><text x="95.3560%" y="382.50"></text></g><g><title>_get_value (torch\optim\optimizer.py:41) (8 samples, 0.11%)</title><rect x="95.1487%" y="388" width="0.1138%" height="15" fill="rgb(223,117,47)" fg:x="6688" fg:w="8"/><text x="95.3987%" y="398.50"></text></g><g><title>_multi_tensor_adamw (torch\optim\adamw.py:564) (16 samples, 0.23%)</title><rect x="95.3478%" y="356" width="0.2276%" height="15" fill="rgb(244,107,35)" fg:x="6702" fg:w="16"/><text x="95.5978%" y="366.50"></text></g><g><title>_multi_tensor_adamw (torch\optim\adamw.py:566) (11 samples, 0.16%)</title><rect x="95.6466%" y="356" width="0.1565%" height="15" fill="rgb(205,140,8)" fg:x="6723" fg:w="11"/><text x="95.8966%" y="366.50"></text></g><g><title>reconstruction_training_step (cemrl.py:193) (184 samples, 2.62%)</title><rect x="93.2992%" y="244" width="2.6177%" height="15" fill="rgb(228,84,46)" fg:x="6558" fg:w="184"/><text x="93.5492%" y="254.50">re..</text></g><g><title>step (torch\cuda\amp\grad_scaler.py:370) (160 samples, 2.28%)</title><rect x="93.6406%" y="260" width="2.2763%" height="15" fill="rgb(254,188,9)" fg:x="6582" fg:w="160"/><text x="93.8906%" y="270.50">s..</text></g><g><title>_maybe_opt_step (torch\cuda\amp\grad_scaler.py:290) (158 samples, 2.25%)</title><rect x="93.6691%" y="276" width="2.2478%" height="15" fill="rgb(206,112,54)" fg:x="6584" fg:w="158"/><text x="93.9191%" y="286.50">_..</text></g><g><title>wrapper (torch\optim\optimizer.py:280) (154 samples, 2.19%)</title><rect x="93.7260%" y="292" width="2.1909%" height="15" fill="rgb(216,84,49)" fg:x="6588" fg:w="154"/><text x="93.9760%" y="302.50">w..</text></g><g><title>_use_grad (torch\optim\optimizer.py:33) (154 samples, 2.19%)</title><rect x="93.7260%" y="308" width="2.1909%" height="15" fill="rgb(214,194,35)" fg:x="6588" fg:w="154"/><text x="93.9760%" y="318.50">_..</text></g><g><title>step (torch\optim\adamw.py:171) (146 samples, 2.08%)</title><rect x="93.8398%" y="324" width="2.0771%" height="15" fill="rgb(249,28,3)" fg:x="6596" fg:w="146"/><text x="94.0898%" y="334.50">s..</text></g><g><title>adamw (torch\optim\adamw.py:321) (129 samples, 1.84%)</title><rect x="94.0817%" y="340" width="1.8353%" height="15" fill="rgb(222,56,52)" fg:x="6613" fg:w="129"/><text x="94.3317%" y="350.50">a..</text></g><g><title>_multi_tensor_adamw (torch\optim\adamw.py:568) (8 samples, 0.11%)</title><rect x="95.8031%" y="356" width="0.1138%" height="15" fill="rgb(245,217,50)" fg:x="6734" fg:w="8"/><text x="96.0531%" y="366.50"></text></g><g><title>train (cemrl.py:104) (3,267 samples, 46.48%)</title><rect x="49.5519%" y="228" width="46.4789%" height="15" fill="rgb(213,201,24)" fg:x="3483" fg:w="3267"/><text x="49.8019%" y="238.50">train (cemrl.py:104)</text></g><g><title>sample (buffers.py:113) (13 samples, 0.18%)</title><rect x="96.0307%" y="260" width="0.1849%" height="15" fill="rgb(248,116,28)" fg:x="6750" fg:w="13"/><text x="96.2807%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:145) (8 samples, 0.11%)</title><rect x="96.4291%" y="276" width="0.1138%" height="15" fill="rgb(219,72,43)" fg:x="6778" fg:w="8"/><text x="96.6791%" y="286.50"></text></g><g><title>get_encoder_context (buffers.py:154) (11 samples, 0.16%)</title><rect x="96.6425%" y="276" width="0.1565%" height="15" fill="rgb(209,138,14)" fg:x="6793" fg:w="11"/><text x="96.8925%" y="286.50"></text></g><g><title>sample (buffers.py:114) (54 samples, 0.77%)</title><rect x="96.2157%" y="260" width="0.7682%" height="15" fill="rgb(222,18,33)" fg:x="6763" fg:w="54"/><text x="96.4657%" y="270.50"></text></g><g><title>get_encoder_context (buffers.py:155) (13 samples, 0.18%)</title><rect x="96.7990%" y="276" width="0.1849%" height="15" fill="rgb(213,199,7)" fg:x="6804" fg:w="13"/><text x="97.0490%" y="286.50"></text></g><g><title>encode (networks.py:39) (35 samples, 0.50%)</title><rect x="96.9982%" y="340" width="0.4979%" height="15" fill="rgb(250,110,10)" fg:x="6818" fg:w="35"/><text x="97.2482%" y="350.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (34 samples, 0.48%)</title><rect x="97.0124%" y="356" width="0.4837%" height="15" fill="rgb(248,123,6)" fg:x="6819" fg:w="34"/><text x="97.2624%" y="366.50"></text></g><g><title>forward (torch\nn\modules\rnn.py:998) (34 samples, 0.48%)</title><rect x="97.0124%" y="372" width="0.4837%" height="15" fill="rgb(206,91,31)" fg:x="6819" fg:w="34"/><text x="97.2624%" y="382.50"></text></g><g><title>forward (networks.py:30) (54 samples, 0.77%)</title><rect x="96.9839%" y="308" width="0.7682%" height="15" fill="rgb(211,154,13)" fg:x="6817" fg:w="54"/><text x="97.2339%" y="318.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (53 samples, 0.75%)</title><rect x="96.9982%" y="324" width="0.7540%" height="15" fill="rgb(225,148,7)" fg:x="6818" fg:w="53"/><text x="97.2482%" y="334.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:215) (125 samples, 1.78%)</title><rect x="96.0307%" y="244" width="1.7783%" height="15" fill="rgb(220,160,43)" fg:x="6750" fg:w="125"/><text x="96.2807%" y="254.50">t..</text></g><g><title>sample (buffers.py:116) (58 samples, 0.83%)</title><rect x="96.9839%" y="260" width="0.8252%" height="15" fill="rgb(213,52,39)" fg:x="6817" fg:w="58"/><text x="97.2339%" y="270.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (58 samples, 0.83%)</title><rect x="96.9839%" y="276" width="0.8252%" height="15" fill="rgb(243,137,7)" fg:x="6817" fg:w="58"/><text x="97.2339%" y="286.50"></text></g><g><title>decorate_autocast (torch\amp\autocast_mode.py:14) (58 samples, 0.83%)</title><rect x="96.9839%" y="292" width="0.8252%" height="15" fill="rgb(230,79,13)" fg:x="6817" fg:w="58"/><text x="97.2339%" y="302.50"></text></g><g><title>action_log_prob (stable_baselines3\sac\policies.py:173) (8 samples, 0.11%)</title><rect x="97.8091%" y="260" width="0.1138%" height="15" fill="rgb(247,105,23)" fg:x="6875" fg:w="8"/><text x="98.0591%" y="270.50"></text></g><g><title>log_prob_from_params (stable_baselines3\common\distributions.py:258) (8 samples, 0.11%)</title><rect x="97.9229%" y="276" width="0.1138%" height="15" fill="rgb(223,179,41)" fg:x="6883" fg:w="8"/><text x="98.1729%" y="286.50"></text></g><g><title>actions_from_params (stable_baselines3\common\distributions.py:190) (8 samples, 0.11%)</title><rect x="97.9229%" y="292" width="0.1138%" height="15" fill="rgb(218,9,34)" fg:x="6883" fg:w="8"/><text x="98.1729%" y="302.50"></text></g><g><title>proba_distribution (stable_baselines3\common\distributions.py:224) (8 samples, 0.11%)</title><rect x="97.9229%" y="308" width="0.1138%" height="15" fill="rgb(222,106,8)" fg:x="6883" fg:w="8"/><text x="98.1729%" y="318.50"></text></g><g><title>log_prob (stable_baselines3\common\distributions.py:236) (8 samples, 0.11%)</title><rect x="98.0367%" y="292" width="0.1138%" height="15" fill="rgb(211,220,0)" fg:x="6891" fg:w="8"/><text x="98.2867%" y="302.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:222) (26 samples, 0.37%)</title><rect x="97.8091%" y="244" width="0.3699%" height="15" fill="rgb(229,52,16)" fg:x="6875" fg:w="26"/><text x="98.0591%" y="254.50"></text></g><g><title>action_log_prob (stable_baselines3\sac\policies.py:175) (18 samples, 0.26%)</title><rect x="97.9229%" y="260" width="0.2561%" height="15" fill="rgb(212,155,18)" fg:x="6883" fg:w="18"/><text x="98.1729%" y="270.50"></text></g><g><title>log_prob_from_params (stable_baselines3\common\distributions.py:259) (10 samples, 0.14%)</title><rect x="98.0367%" y="276" width="0.1423%" height="15" fill="rgb(242,21,14)" fg:x="6891" fg:w="10"/><text x="98.2867%" y="286.50"></text></g><g><title>log_prob (stable_baselines3\common\distributions.py:236) (11 samples, 0.16%)</title><rect x="98.4351%" y="292" width="0.1565%" height="15" fill="rgb(222,19,48)" fg:x="6919" fg:w="11"/><text x="98.6851%" y="302.50"></text></g><g><title>log_prob (stable_baselines3\common\distributions.py:175) (10 samples, 0.14%)</title><rect x="98.4493%" y="308" width="0.1423%" height="15" fill="rgb(232,45,27)" fg:x="6920" fg:w="10"/><text x="98.6993%" y="318.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:247) (29 samples, 0.41%)</title><rect x="98.2643%" y="244" width="0.4126%" height="15" fill="rgb(249,103,42)" fg:x="6907" fg:w="29"/><text x="98.5143%" y="254.50"></text></g><g><title>action_log_prob (stable_baselines3\sac\policies.py:175) (23 samples, 0.33%)</title><rect x="98.3497%" y="260" width="0.3272%" height="15" fill="rgb(246,81,33)" fg:x="6913" fg:w="23"/><text x="98.5997%" y="270.50"></text></g><g><title>log_prob_from_params (stable_baselines3\common\distributions.py:259) (17 samples, 0.24%)</title><rect x="98.4351%" y="276" width="0.2419%" height="15" fill="rgb(252,33,42)" fg:x="6919" fg:w="17"/><text x="98.6851%" y="286.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:249) (8 samples, 0.11%)</title><rect x="98.6769%" y="244" width="0.1138%" height="15" fill="rgb(209,212,41)" fg:x="6936" fg:w="8"/><text x="98.9269%" y="254.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (8 samples, 0.11%)</title><rect x="98.6769%" y="260" width="0.1138%" height="15" fill="rgb(207,154,6)" fg:x="6936" fg:w="8"/><text x="98.9269%" y="270.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:258) (12 samples, 0.17%)</title><rect x="98.7907%" y="244" width="0.1707%" height="15" fill="rgb(223,64,47)" fg:x="6944" fg:w="12"/><text x="99.0407%" y="254.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (12 samples, 0.17%)</title><rect x="98.7907%" y="260" width="0.1707%" height="15" fill="rgb(211,161,38)" fg:x="6944" fg:w="12"/><text x="99.0407%" y="270.50"></text></g><g><title>forward (stable_baselines3\common\policies.py:937) (9 samples, 0.13%)</title><rect x="98.8334%" y="276" width="0.1280%" height="15" fill="rgb(219,138,40)" fg:x="6947" fg:w="9"/><text x="99.0834%" y="286.50"></text></g><g><title>&lt;genexpr&gt; (stable_baselines3\common\policies.py:937) (8 samples, 0.11%)</title><rect x="98.8476%" y="292" width="0.1138%" height="15" fill="rgb(241,228,46)" fg:x="6948" fg:w="8"/><text x="99.0976%" y="302.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (8 samples, 0.11%)</title><rect x="98.8476%" y="308" width="0.1138%" height="15" fill="rgb(223,209,38)" fg:x="6948" fg:w="8"/><text x="99.0976%" y="318.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (8 samples, 0.11%)</title><rect x="98.8476%" y="324" width="0.1138%" height="15" fill="rgb(236,164,45)" fg:x="6948" fg:w="8"/><text x="99.0976%" y="334.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:261) (8 samples, 0.11%)</title><rect x="98.9614%" y="244" width="0.1138%" height="15" fill="rgb(231,15,5)" fg:x="6956" fg:w="8"/><text x="99.2114%" y="254.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:268) (21 samples, 0.30%)</title><rect x="99.1179%" y="244" width="0.2988%" height="15" fill="rgb(252,35,15)" fg:x="6967" fg:w="21"/><text x="99.3679%" y="254.50"></text></g><g><title>wrapper (torch\optim\optimizer.py:280) (20 samples, 0.28%)</title><rect x="99.1322%" y="260" width="0.2845%" height="15" fill="rgb(248,181,18)" fg:x="6968" fg:w="20"/><text x="99.3822%" y="270.50"></text></g><g><title>_use_grad (torch\optim\optimizer.py:33) (20 samples, 0.28%)</title><rect x="99.1322%" y="276" width="0.2845%" height="15" fill="rgb(233,39,42)" fg:x="6968" fg:w="20"/><text x="99.3822%" y="286.50"></text></g><g><title>step (torch\optim\adam.py:141) (16 samples, 0.23%)</title><rect x="99.1891%" y="292" width="0.2276%" height="15" fill="rgb(238,110,33)" fg:x="6972" fg:w="16"/><text x="99.4391%" y="302.50"></text></g><g><title>adam (torch\optim\adam.py:281) (13 samples, 0.18%)</title><rect x="99.2318%" y="308" width="0.1849%" height="15" fill="rgb(233,195,10)" fg:x="6975" fg:w="13"/><text x="99.4818%" y="318.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:273) (12 samples, 0.17%)</title><rect x="99.4167%" y="244" width="0.1707%" height="15" fill="rgb(254,105,3)" fg:x="6988" fg:w="12"/><text x="99.6667%" y="254.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (12 samples, 0.17%)</title><rect x="99.4167%" y="260" width="0.1707%" height="15" fill="rgb(221,225,9)" fg:x="6988" fg:w="12"/><text x="99.6667%" y="270.50"></text></g><g><title>forward (stable_baselines3\common\policies.py:937) (10 samples, 0.14%)</title><rect x="99.4452%" y="276" width="0.1423%" height="15" fill="rgb(224,227,45)" fg:x="6990" fg:w="10"/><text x="99.6952%" y="286.50"></text></g><g><title>&lt;genexpr&gt; (stable_baselines3\common\policies.py:937) (10 samples, 0.14%)</title><rect x="99.4452%" y="292" width="0.1423%" height="15" fill="rgb(229,198,43)" fg:x="6990" fg:w="10"/><text x="99.6952%" y="302.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (10 samples, 0.14%)</title><rect x="99.4452%" y="308" width="0.1423%" height="15" fill="rgb(206,209,35)" fg:x="6990" fg:w="10"/><text x="99.6952%" y="318.50"></text></g><g><title>forward (torch\nn\modules\container.py:217) (9 samples, 0.13%)</title><rect x="99.4594%" y="324" width="0.1280%" height="15" fill="rgb(245,195,53)" fg:x="6991" fg:w="9"/><text x="99.7094%" y="334.50"></text></g><g><title>_call_impl (torch\nn\modules\module.py:1501) (9 samples, 0.13%)</title><rect x="99.4594%" y="340" width="0.1280%" height="15" fill="rgb(240,92,26)" fg:x="6991" fg:w="9"/><text x="99.7094%" y="350.50"></text></g><g><title>forward (torch\nn\modules\linear.py:114) (8 samples, 0.11%)</title><rect x="99.4736%" y="356" width="0.1138%" height="15" fill="rgb(207,40,23)" fg:x="6992" fg:w="8"/><text x="99.7236%" y="366.50"></text></g><g><title>train (stable_baselines3\sac\sac.py:281) (8 samples, 0.11%)</title><rect x="99.6443%" y="244" width="0.1138%" height="15" fill="rgb(223,111,35)" fg:x="7004" fg:w="8"/><text x="99.8943%" y="254.50"></text></g><g><title>polyak_update (stable_baselines3\common\utils.py:469) (11 samples, 0.16%)</title><rect x="99.7581%" y="260" width="0.1565%" height="15" fill="rgb(229,147,28)" fg:x="7012" fg:w="11"/><text x="100.0081%" y="270.50"></text></g><g><title>all (7,029 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(211,29,28)" fg:x="0" fg:w="7029"/><text x="0.2500%" y="62.50"></text></g><g><title>_run_module_as_main (runpy.py:196) (6,069 samples, 86.34%)</title><rect x="13.6577%" y="68" width="86.3423%" height="15" fill="rgb(228,72,33)" fg:x="960" fg:w="6069"/><text x="13.9077%" y="78.50">_run_module_as_main (runpy.py:196)</text></g><g><title>_run_code (runpy.py:86) (6,069 samples, 86.34%)</title><rect x="13.6577%" y="84" width="86.3423%" height="15" fill="rgb(205,214,31)" fg:x="960" fg:w="6069"/><text x="13.9077%" y="94.50">_run_code (runpy.py:86)</text></g><g><title>&lt;module&gt; (debugpy\__main__.py:39) (6,069 samples, 86.34%)</title><rect x="13.6577%" y="100" width="86.3423%" height="15" fill="rgb(224,111,15)" fg:x="960" fg:w="6069"/><text x="13.9077%" y="110.50">&lt;module&gt; (debugpy\__main__.py:39)</text></g><g><title>main (debugpy\server\cli.py:430) (6,069 samples, 86.34%)</title><rect x="13.6577%" y="116" width="86.3423%" height="15" fill="rgb(253,21,26)" fg:x="960" fg:w="6069"/><text x="13.9077%" y="126.50">main (debugpy\server\cli.py:430)</text></g><g><title>run_file (debugpy\server\cli.py:284) (6,069 samples, 86.34%)</title><rect x="13.6577%" y="132" width="86.3423%" height="15" fill="rgb(245,139,43)" fg:x="960" fg:w="6069"/><text x="13.9077%" y="142.50">run_file (debugpy\server\cli.py:284)</text></g><g><title>run_path (_pydevd_bundle\pydevd_runpy.py:321) (6,069 samples, 86.34%)</title><rect x="13.6577%" y="148" width="86.3423%" height="15" fill="rgb(252,170,7)" fg:x="960" fg:w="6069"/><text x="13.9077%" y="158.50">run_path (_pydevd_bundle\pydevd_runpy.py:321)</text></g><g><title>_run_module_code (_pydevd_bundle\pydevd_runpy.py:135) (6,069 samples, 86.34%)</title><rect x="13.6577%" y="164" width="86.3423%" height="15" fill="rgb(231,118,14)" fg:x="960" fg:w="6069"/><text x="13.9077%" y="174.50">_run_module_code (_pydevd_bundle\pydevd_runpy.py:135)</text></g><g><title>_run_code (_pydevd_bundle\pydevd_runpy.py:124) (6,069 samples, 86.34%)</title><rect x="13.6577%" y="180" width="86.3423%" height="15" fill="rgb(238,83,0)" fg:x="960" fg:w="6069"/><text x="13.9077%" y="190.50">_run_code (_pydevd_bundle\pydevd_runpy.py:124)</text></g><g><title>&lt;module&gt; (cli.py:194) (6,069 samples, 86.34%)</title><rect x="13.6577%" y="196" width="86.3423%" height="15" fill="rgb(221,39,39)" fg:x="960" fg:w="6069"/><text x="13.9077%" y="206.50">&lt;module&gt; (cli.py:194)</text></g><g><title>learn (stable_baselines3\common\off_policy_algorithm.py:331) (3,546 samples, 50.45%)</title><rect x="49.5519%" y="212" width="50.4481%" height="15" fill="rgb(222,119,46)" fg:x="3483" fg:w="3546"/><text x="49.8019%" y="222.50">learn (stable_baselines3\common\off_policy_algorithm.py:331)</text></g><g><title>train (cemrl.py:105) (279 samples, 3.97%)</title><rect x="96.0307%" y="228" width="3.9693%" height="15" fill="rgb(222,165,49)" fg:x="6750" fg:w="279"/><text x="96.2807%" y="238.50">trai..</text></g><g><title>train (stable_baselines3\sac\sac.py:285) (17 samples, 0.24%)</title><rect x="99.7581%" y="244" width="0.2419%" height="15" fill="rgb(219,113,52)" fg:x="7012" fg:w="17"/><text x="100.0081%" y="254.50"></text></g></svg></svg>